{"dependencies":[{"name":"../getNextHandlerTag","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":57,"index":72}}],"key":"xPiMMdBr7viMwno5RpgPsKrTYT4=","exportNames":["*"]}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":73},"end":{"line":4,"column":55,"index":128}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Gesture = exports.ContinousBaseGesture = exports.CALLBACK_TYPE = exports.BaseGesture = void 0;\n  var _getNextHandlerTag = require(_dependencyMap[0], \"../getNextHandlerTag\");\n  var _utils = require(_dependencyMap[1], \"../../utils\");\n  // Allow adding a ref to a gesture handler\n\n  const CALLBACK_TYPE = exports.CALLBACK_TYPE = {\n    UNDEFINED: 0,\n    BEGAN: 1,\n    START: 2,\n    UPDATE: 3,\n    CHANGE: 4,\n    END: 5,\n    FINALIZE: 6,\n    TOUCHES_DOWN: 7,\n    TOUCHES_MOVE: 8,\n    TOUCHES_UP: 9,\n    TOUCHES_CANCELLED: 10\n  };\n\n  // Allow using CALLBACK_TYPE as object and type\n  // eslint-disable-next-line @typescript-eslint/no-redeclare\n\n  class Gesture {}\n  exports.Gesture = Gesture;\n  let nextGestureId = 0;\n  class BaseGesture extends Gesture {\n    gestureId = -1;\n    handlerTag = -1;\n    handlerName = '';\n    config = {};\n    handlers = {\n      gestureId: -1,\n      handlerTag: -1,\n      isWorklet: []\n    };\n    constructor() {\n      super();\n\n      // Used to check whether the gesture config has been updated when wrapping it\n      // with `useMemo`. Since every config will have a unique id, when the dependencies\n      // don't change, the config won't be recreated and the id will stay the same.\n      // If the id is different, it means that the config has changed and the gesture\n      // needs to be updated.\n      this.gestureId = nextGestureId++;\n      this.handlers.gestureId = this.gestureId;\n    }\n    addDependency(key, gesture) {\n      const value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n\n    /**\n     * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n     * @param ref\n     */\n    withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    isWorklet(callback) {\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      return callback.__workletHash !== undefined;\n    }\n\n    /**\n     * Set the callback that is being called when given gesture handler starts receiving touches.\n     * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n     * @param callback\n     */\n    onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n     * @param callback\n     */\n    onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n     * It will be called only if the handler was previously in the `ACTIVE` state.\n     * @param callback\n     */\n    onEnd(callback) {\n      this.handlers.onEnd = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n     * @param callback\n     */\n    onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n     * @param callback\n     */\n    onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n     * @param callback\n     */\n    onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n     * @param callback\n     */\n    onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n     * @param callback\n     */\n    onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Indicates whether the given handler should be analyzing stream of touch events or not.\n     * @param enabled\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n     */\n    enabled(enabled) {\n      this.config.enabled = enabled;\n      return this;\n    }\n\n    /**\n     * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n     * @param value\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n     */\n    shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n\n    /**\n     * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n     * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n     * @param hitSlop\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n     */\n    hitSlop(hitSlop) {\n      this.config.hitSlop = hitSlop;\n      return this;\n    }\n\n    /**\n     * #### Web only\n     * This parameter allows to specify which `cursor` should be used when gesture activates.\n     * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n     * @param activeCursor\n     */\n    activeCursor(activeCursor) {\n      this.config.activeCursor = activeCursor;\n      return this;\n    }\n\n    /**\n     * #### Web & Android only\n     * Allows users to choose which mouse button should handler respond to.\n     * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n     * Default value is set to `MouseButton.LEFT`.\n     * @param mouseButton\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n     */\n    mouseButton(mouseButton) {\n      this.config.mouseButton = mouseButton;\n      return this;\n    }\n\n    /**\n     * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n     * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n     * Defaults to `false`.\n     * @param runOnJS\n     */\n    runOnJS(runOnJS) {\n      this.config.runOnJS = runOnJS;\n      return this;\n    }\n\n    /**\n     * Allows gestures across different components to be recognized simultaneously.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n     */\n    simultaneousWithExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('simultaneousWith', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n     */\n    requireExternalGestureToFail(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('requireToFail', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n     */\n    blocksExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('blocksHandlers', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n     * @param id\n     */\n    withTestId(id) {\n      this.config.testId = id;\n      return this;\n    }\n\n    /**\n     * #### iOS only\n     * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n     * Default value is `true`.\n     * @param value\n     */\n    cancelsTouchesInView(value) {\n      this.config.cancelsTouchesInView = value;\n      return this;\n    }\n    initialize() {\n      this.handlerTag = (0, _getNextHandlerTag.getNextHandlerTag)();\n      this.handlers = Object.assign({}, this.handlers, {\n        handlerTag: this.handlerTag\n      });\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n    toGestureArray() {\n      return [this];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    prepare() {}\n    get shouldUseReanimated() {\n      // Use Reanimated when runOnJS isn't set explicitly,\n      // all defined callbacks are worklets\n      // and remote debugging is disabled\n      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();\n    }\n  }\n  exports.BaseGesture = BaseGesture;\n  class ContinousBaseGesture extends BaseGesture {\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * @param callback\n     */\n    onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * This callback will receive information about change in value in relation to the last received event.\n     * @param callback\n     */\n    onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * When `true` the handler will not activate by itself even if its activation criteria are met.\n     * Instead you can manipulate its state using state manager.\n     * @param manualActivation\n     */\n    manualActivation(manualActivation) {\n      this.config.manualActivation = manualActivation;\n      return this;\n    }\n  }\n  exports.ContinousBaseGesture = ContinousBaseGesture;\n});","lineCount":338,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"Gesture"],[7,17,1,13],[7,20,1,13,"exports"],[7,27,1,13],[7,28,1,13,"ContinousBaseGesture"],[7,48,1,13],[7,51,1,13,"exports"],[7,58,1,13],[7,59,1,13,"CALLBACK_TYPE"],[7,72,1,13],[7,75,1,13,"exports"],[7,82,1,13],[7,83,1,13,"BaseGesture"],[7,94,1,13],[8,2,3,0],[8,6,3,0,"_getNextHandlerTag"],[8,24,3,0],[8,27,3,0,"require"],[8,34,3,0],[8,35,3,0,"_dependencyMap"],[8,49,3,0],[9,2,4,0],[9,6,4,0,"_utils"],[9,12,4,0],[9,15,4,0,"require"],[9,22,4,0],[9,23,4,0,"_dependencyMap"],[9,37,4,0],[10,2,6,0],[12,2,8,7],[12,8,8,13,"CALLBACK_TYPE"],[12,21,8,26],[12,24,8,26,"exports"],[12,31,8,26],[12,32,8,26,"CALLBACK_TYPE"],[12,45,8,26],[12,48,8,29],[13,4,9,2,"UNDEFINED"],[13,13,9,11],[13,15,9,13],[13,16,9,14],[14,4,10,2,"BEGAN"],[14,9,10,7],[14,11,10,9],[14,12,10,10],[15,4,11,2,"START"],[15,9,11,7],[15,11,11,9],[15,12,11,10],[16,4,12,2,"UPDATE"],[16,10,12,8],[16,12,12,10],[16,13,12,11],[17,4,13,2,"CHANGE"],[17,10,13,8],[17,12,13,10],[17,13,13,11],[18,4,14,2,"END"],[18,7,14,5],[18,9,14,7],[18,10,14,8],[19,4,15,2,"FINALIZE"],[19,12,15,10],[19,14,15,12],[19,15,15,13],[20,4,16,2,"TOUCHES_DOWN"],[20,16,16,14],[20,18,16,16],[20,19,16,17],[21,4,17,2,"TOUCHES_MOVE"],[21,16,17,14],[21,18,17,16],[21,19,17,17],[22,4,18,2,"TOUCHES_UP"],[22,14,18,12],[22,16,18,14],[22,17,18,15],[23,4,19,2,"TOUCHES_CANCELLED"],[23,21,19,19],[23,23,19,21],[24,2,20,0],[24,3,20,1],[26,2,22,0],[27,2,23,0],[29,2,25,7],[29,8,25,13,"Gesture"],[29,15,25,20],[29,16,25,21],[30,2,25,23,"exports"],[30,9,25,23],[30,10,25,23,"Gesture"],[30,17,25,23],[30,20,25,23,"Gesture"],[30,27,25,23],[31,2,26,0],[31,6,26,4,"nextGestureId"],[31,19,26,17],[31,22,26,20],[31,23,26,21],[32,2,27,7],[32,8,27,13,"BaseGesture"],[32,19,27,24],[32,28,27,33,"Gesture"],[32,35,27,40],[32,36,27,41],[33,4,28,2,"gestureId"],[33,13,28,11],[33,16,28,14],[33,17,28,15],[33,18,28,16],[34,4,29,2,"handlerTag"],[34,14,29,12],[34,17,29,15],[34,18,29,16],[34,19,29,17],[35,4,30,2,"handlerName"],[35,15,30,13],[35,18,30,16],[35,20,30,18],[36,4,31,2,"config"],[36,10,31,8],[36,13,31,11],[36,14,31,12],[36,15,31,13],[37,4,32,2,"handlers"],[37,12,32,10],[37,15,32,13],[38,6,33,4,"gestureId"],[38,15,33,13],[38,17,33,15],[38,18,33,16],[38,19,33,17],[39,6,34,4,"handlerTag"],[39,16,34,14],[39,18,34,16],[39,19,34,17],[39,20,34,18],[40,6,35,4,"isWorklet"],[40,15,35,13],[40,17,35,15],[41,4,36,2],[41,5,36,3],[42,4,37,2,"constructor"],[42,15,37,13,"constructor"],[42,16,37,13],[42,18,37,16],[43,6,38,4],[43,11,38,9],[43,12,38,10],[43,13,38,11],[45,6,40,4],[46,6,41,4],[47,6,42,4],[48,6,43,4],[49,6,44,4],[50,6,45,4],[50,10,45,8],[50,11,45,9,"gestureId"],[50,20,45,18],[50,23,45,21,"nextGestureId"],[50,36,45,34],[50,38,45,36],[51,6,46,4],[51,10,46,8],[51,11,46,9,"handlers"],[51,19,46,17],[51,20,46,18,"gestureId"],[51,29,46,27],[51,32,46,30],[51,36,46,34],[51,37,46,35,"gestureId"],[51,46,46,44],[52,4,47,2],[53,4,48,2,"addDependency"],[53,17,48,15,"addDependency"],[53,18,48,16,"key"],[53,21,48,19],[53,23,48,21,"gesture"],[53,30,48,28],[53,32,48,30],[54,6,49,4],[54,12,49,10,"value"],[54,17,49,15],[54,20,49,18],[54,24,49,22],[54,25,49,23,"config"],[54,31,49,29],[54,32,49,30,"key"],[54,35,49,33],[54,36,49,34],[55,6,50,4],[55,10,50,8],[55,11,50,9,"config"],[55,17,50,15],[55,18,50,16,"key"],[55,21,50,19],[55,22,50,20],[55,25,50,23,"value"],[55,30,50,28],[55,33,50,31,"Array"],[55,38,50,36],[55,39,50,37],[55,40,50,38],[55,41,50,39,"concat"],[55,47,50,45],[55,48,50,46,"value"],[55,53,50,51],[55,55,50,53,"gesture"],[55,62,50,60],[55,63,50,61],[55,66,50,64],[55,67,50,65,"gesture"],[55,74,50,72],[55,75,50,73],[56,4,51,2],[58,4,53,2],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,4,57,2,"withRef"],[62,11,57,9,"withRef"],[62,12,57,10,"ref"],[62,15,57,13],[62,17,57,15],[63,6,58,4],[63,10,58,8],[63,11,58,9,"config"],[63,17,58,15],[63,18,58,16,"ref"],[63,21,58,19],[63,24,58,22,"ref"],[63,27,58,25],[64,6,59,4],[64,13,59,11],[64,17,59,15],[65,4,60,2],[67,4,62,2],[68,4,63,2,"isWorklet"],[68,13,63,11,"isWorklet"],[68,14,63,12,"callback"],[68,22,63,20],[68,24,63,22],[69,6,64,4],[70,6,65,4],[70,13,65,11,"callback"],[70,21,65,19],[70,22,65,20,"__workletHash"],[70,35,65,33],[70,40,65,38,"undefined"],[70,49,65,47],[71,4,66,2],[73,4,68,2],[74,0,69,0],[75,0,70,0],[76,0,71,0],[77,0,72,0],[78,4,73,2,"onBegin"],[78,11,73,9,"onBegin"],[78,12,73,10,"callback"],[78,20,73,18],[78,22,73,20],[79,6,74,4],[79,10,74,8],[79,11,74,9,"handlers"],[79,19,74,17],[79,20,74,18,"onBegin"],[79,27,74,25],[79,30,74,28,"callback"],[79,38,74,36],[80,6,75,4],[80,10,75,8],[80,11,75,9,"handlers"],[80,19,75,17],[80,20,75,18,"isWorklet"],[80,29,75,27],[80,30,75,28,"CALLBACK_TYPE"],[80,43,75,41],[80,44,75,42,"BEGAN"],[80,49,75,47],[80,50,75,48],[80,53,75,51],[80,57,75,55],[80,58,75,56,"isWorklet"],[80,67,75,65],[80,68,75,66,"callback"],[80,76,75,74],[80,77,75,75],[81,6,76,4],[81,13,76,11],[81,17,76,15],[82,4,77,2],[84,4,79,2],[85,0,80,0],[86,0,81,0],[87,0,82,0],[88,4,83,2,"onStart"],[88,11,83,9,"onStart"],[88,12,83,10,"callback"],[88,20,83,18],[88,22,83,20],[89,6,84,4],[89,10,84,8],[89,11,84,9,"handlers"],[89,19,84,17],[89,20,84,18,"onStart"],[89,27,84,25],[89,30,84,28,"callback"],[89,38,84,36],[90,6,85,4],[90,10,85,8],[90,11,85,9,"handlers"],[90,19,85,17],[90,20,85,18,"isWorklet"],[90,29,85,27],[90,30,85,28,"CALLBACK_TYPE"],[90,43,85,41],[90,44,85,42,"START"],[90,49,85,47],[90,50,85,48],[90,53,85,51],[90,57,85,55],[90,58,85,56,"isWorklet"],[90,67,85,65],[90,68,85,66,"callback"],[90,76,85,74],[90,77,85,75],[91,6,86,4],[91,13,86,11],[91,17,86,15],[92,4,87,2],[94,4,89,2],[95,0,90,0],[96,0,91,0],[97,0,92,0],[98,0,93,0],[99,4,94,2,"onEnd"],[99,9,94,7,"onEnd"],[99,10,94,8,"callback"],[99,18,94,16],[99,20,94,18],[100,6,95,4],[100,10,95,8],[100,11,95,9,"handlers"],[100,19,95,17],[100,20,95,18,"onEnd"],[100,25,95,23],[100,28,95,26,"callback"],[100,36,95,34],[101,6,96,4],[102,6,97,4],[102,10,97,8],[102,11,97,9,"handlers"],[102,19,97,17],[102,20,97,18,"isWorklet"],[102,29,97,27],[102,30,97,28,"CALLBACK_TYPE"],[102,43,97,41],[102,44,97,42,"END"],[102,47,97,45],[102,48,97,46],[102,51,97,49],[102,55,97,53],[102,56,97,54,"isWorklet"],[102,65,97,63],[102,66,97,64,"callback"],[102,74,97,72],[102,75,97,73],[103,6,98,4],[103,13,98,11],[103,17,98,15],[104,4,99,2],[106,4,101,2],[107,0,102,0],[108,0,103,0],[109,0,104,0],[110,4,105,2,"onFinalize"],[110,14,105,12,"onFinalize"],[110,15,105,13,"callback"],[110,23,105,21],[110,25,105,23],[111,6,106,4],[111,10,106,8],[111,11,106,9,"handlers"],[111,19,106,17],[111,20,106,18,"onFinalize"],[111,30,106,28],[111,33,106,31,"callback"],[111,41,106,39],[112,6,107,4],[113,6,108,4],[113,10,108,8],[113,11,108,9,"handlers"],[113,19,108,17],[113,20,108,18,"isWorklet"],[113,29,108,27],[113,30,108,28,"CALLBACK_TYPE"],[113,43,108,41],[113,44,108,42,"FINALIZE"],[113,52,108,50],[113,53,108,51],[113,56,108,54],[113,60,108,58],[113,61,108,59,"isWorklet"],[113,70,108,68],[113,71,108,69,"callback"],[113,79,108,77],[113,80,108,78],[114,6,109,4],[114,13,109,11],[114,17,109,15],[115,4,110,2],[117,4,112,2],[118,0,113,0],[119,0,114,0],[120,0,115,0],[121,4,116,2,"onTouchesDown"],[121,17,116,15,"onTouchesDown"],[121,18,116,16,"callback"],[121,26,116,24],[121,28,116,26],[122,6,117,4],[122,10,117,8],[122,11,117,9,"config"],[122,17,117,15],[122,18,117,16,"needsPointerData"],[122,34,117,32],[122,37,117,35],[122,41,117,39],[123,6,118,4],[123,10,118,8],[123,11,118,9,"handlers"],[123,19,118,17],[123,20,118,18,"onTouchesDown"],[123,33,118,31],[123,36,118,34,"callback"],[123,44,118,42],[124,6,119,4],[124,10,119,8],[124,11,119,9,"handlers"],[124,19,119,17],[124,20,119,18,"isWorklet"],[124,29,119,27],[124,30,119,28,"CALLBACK_TYPE"],[124,43,119,41],[124,44,119,42,"TOUCHES_DOWN"],[124,56,119,54],[124,57,119,55],[124,60,119,58],[124,64,119,62],[124,65,119,63,"isWorklet"],[124,74,119,72],[124,75,119,73,"callback"],[124,83,119,81],[124,84,119,82],[125,6,120,4],[125,13,120,11],[125,17,120,15],[126,4,121,2],[128,4,123,2],[129,0,124,0],[130,0,125,0],[131,0,126,0],[132,4,127,2,"onTouchesMove"],[132,17,127,15,"onTouchesMove"],[132,18,127,16,"callback"],[132,26,127,24],[132,28,127,26],[133,6,128,4],[133,10,128,8],[133,11,128,9,"config"],[133,17,128,15],[133,18,128,16,"needsPointerData"],[133,34,128,32],[133,37,128,35],[133,41,128,39],[134,6,129,4],[134,10,129,8],[134,11,129,9,"handlers"],[134,19,129,17],[134,20,129,18,"onTouchesMove"],[134,33,129,31],[134,36,129,34,"callback"],[134,44,129,42],[135,6,130,4],[135,10,130,8],[135,11,130,9,"handlers"],[135,19,130,17],[135,20,130,18,"isWorklet"],[135,29,130,27],[135,30,130,28,"CALLBACK_TYPE"],[135,43,130,41],[135,44,130,42,"TOUCHES_MOVE"],[135,56,130,54],[135,57,130,55],[135,60,130,58],[135,64,130,62],[135,65,130,63,"isWorklet"],[135,74,130,72],[135,75,130,73,"callback"],[135,83,130,81],[135,84,130,82],[136,6,131,4],[136,13,131,11],[136,17,131,15],[137,4,132,2],[139,4,134,2],[140,0,135,0],[141,0,136,0],[142,0,137,0],[143,4,138,2,"onTouchesUp"],[143,15,138,13,"onTouchesUp"],[143,16,138,14,"callback"],[143,24,138,22],[143,26,138,24],[144,6,139,4],[144,10,139,8],[144,11,139,9,"config"],[144,17,139,15],[144,18,139,16,"needsPointerData"],[144,34,139,32],[144,37,139,35],[144,41,139,39],[145,6,140,4],[145,10,140,8],[145,11,140,9,"handlers"],[145,19,140,17],[145,20,140,18,"onTouchesUp"],[145,31,140,29],[145,34,140,32,"callback"],[145,42,140,40],[146,6,141,4],[146,10,141,8],[146,11,141,9,"handlers"],[146,19,141,17],[146,20,141,18,"isWorklet"],[146,29,141,27],[146,30,141,28,"CALLBACK_TYPE"],[146,43,141,41],[146,44,141,42,"TOUCHES_UP"],[146,54,141,52],[146,55,141,53],[146,58,141,56],[146,62,141,60],[146,63,141,61,"isWorklet"],[146,72,141,70],[146,73,141,71,"callback"],[146,81,141,79],[146,82,141,80],[147,6,142,4],[147,13,142,11],[147,17,142,15],[148,4,143,2],[150,4,145,2],[151,0,146,0],[152,0,147,0],[153,0,148,0],[154,4,149,2,"onTouchesCancelled"],[154,22,149,20,"onTouchesCancelled"],[154,23,149,21,"callback"],[154,31,149,29],[154,33,149,31],[155,6,150,4],[155,10,150,8],[155,11,150,9,"config"],[155,17,150,15],[155,18,150,16,"needsPointerData"],[155,34,150,32],[155,37,150,35],[155,41,150,39],[156,6,151,4],[156,10,151,8],[156,11,151,9,"handlers"],[156,19,151,17],[156,20,151,18,"onTouchesCancelled"],[156,38,151,36],[156,41,151,39,"callback"],[156,49,151,47],[157,6,152,4],[157,10,152,8],[157,11,152,9,"handlers"],[157,19,152,17],[157,20,152,18,"isWorklet"],[157,29,152,27],[157,30,152,28,"CALLBACK_TYPE"],[157,43,152,41],[157,44,152,42,"TOUCHES_CANCELLED"],[157,61,152,59],[157,62,152,60],[157,65,152,63],[157,69,152,67],[157,70,152,68,"isWorklet"],[157,79,152,77],[157,80,152,78,"callback"],[157,88,152,86],[157,89,152,87],[158,6,153,4],[158,13,153,11],[158,17,153,15],[159,4,154,2],[161,4,156,2],[162,0,157,0],[163,0,158,0],[164,0,159,0],[165,0,160,0],[166,4,161,2,"enabled"],[166,11,161,9,"enabled"],[166,12,161,10,"enabled"],[166,19,161,17],[166,21,161,19],[167,6,162,4],[167,10,162,8],[167,11,162,9,"config"],[167,17,162,15],[167,18,162,16,"enabled"],[167,25,162,23],[167,28,162,26,"enabled"],[167,35,162,33],[168,6,163,4],[168,13,163,11],[168,17,163,15],[169,4,164,2],[171,4,166,2],[172,0,167,0],[173,0,168,0],[174,0,169,0],[175,0,170,0],[176,4,171,2,"shouldCancelWhenOutside"],[176,27,171,25,"shouldCancelWhenOutside"],[176,28,171,26,"value"],[176,33,171,31],[176,35,171,33],[177,6,172,4],[177,10,172,8],[177,11,172,9,"config"],[177,17,172,15],[177,18,172,16,"shouldCancelWhenOutside"],[177,41,172,39],[177,44,172,42,"value"],[177,49,172,47],[178,6,173,4],[178,13,173,11],[178,17,173,15],[179,4,174,2],[181,4,176,2],[182,0,177,0],[183,0,178,0],[184,0,179,0],[185,0,180,0],[186,0,181,0],[187,4,182,2,"hitSlop"],[187,11,182,9,"hitSlop"],[187,12,182,10,"hitSlop"],[187,19,182,17],[187,21,182,19],[188,6,183,4],[188,10,183,8],[188,11,183,9,"config"],[188,17,183,15],[188,18,183,16,"hitSlop"],[188,25,183,23],[188,28,183,26,"hitSlop"],[188,35,183,33],[189,6,184,4],[189,13,184,11],[189,17,184,15],[190,4,185,2],[192,4,187,2],[193,0,188,0],[194,0,189,0],[195,0,190,0],[196,0,191,0],[197,0,192,0],[198,4,193,2,"activeCursor"],[198,16,193,14,"activeCursor"],[198,17,193,15,"activeCursor"],[198,29,193,27],[198,31,193,29],[199,6,194,4],[199,10,194,8],[199,11,194,9,"config"],[199,17,194,15],[199,18,194,16,"activeCursor"],[199,30,194,28],[199,33,194,31,"activeCursor"],[199,45,194,43],[200,6,195,4],[200,13,195,11],[200,17,195,15],[201,4,196,2],[203,4,198,2],[204,0,199,0],[205,0,200,0],[206,0,201,0],[207,0,202,0],[208,0,203,0],[209,0,204,0],[210,0,205,0],[211,4,206,2,"mouseButton"],[211,15,206,13,"mouseButton"],[211,16,206,14,"mouseButton"],[211,27,206,25],[211,29,206,27],[212,6,207,4],[212,10,207,8],[212,11,207,9,"config"],[212,17,207,15],[212,18,207,16,"mouseButton"],[212,29,207,27],[212,32,207,30,"mouseButton"],[212,43,207,41],[213,6,208,4],[213,13,208,11],[213,17,208,15],[214,4,209,2],[216,4,211,2],[217,0,212,0],[218,0,213,0],[219,0,214,0],[220,0,215,0],[221,0,216,0],[222,4,217,2,"runOnJS"],[222,11,217,9,"runOnJS"],[222,12,217,10,"runOnJS"],[222,19,217,17],[222,21,217,19],[223,6,218,4],[223,10,218,8],[223,11,218,9,"config"],[223,17,218,15],[223,18,218,16,"runOnJS"],[223,25,218,23],[223,28,218,26,"runOnJS"],[223,35,218,33],[224,6,219,4],[224,13,219,11],[224,17,219,15],[225,4,220,2],[227,4,222,2],[228,0,223,0],[229,0,224,0],[230,0,225,0],[231,0,226,0],[232,4,227,2,"simultaneousWithExternalGesture"],[232,35,227,33,"simultaneousWithExternalGesture"],[232,36,227,34],[232,39,227,37,"gestures"],[232,47,227,45],[232,49,227,47],[233,6,228,4],[233,11,228,9],[233,17,228,15,"gesture"],[233,24,228,22],[233,28,228,26,"gestures"],[233,36,228,34],[233,38,228,36],[234,8,229,6],[234,12,229,10],[234,13,229,11,"addDependency"],[234,26,229,24],[234,27,229,25],[234,45,229,43],[234,47,229,45,"gesture"],[234,54,229,52],[234,55,229,53],[235,6,230,4],[236,6,231,4],[236,13,231,11],[236,17,231,15],[237,4,232,2],[239,4,234,2],[240,0,235,0],[241,0,236,0],[242,0,237,0],[243,0,238,0],[244,4,239,2,"requireExternalGestureToFail"],[244,32,239,30,"requireExternalGestureToFail"],[244,33,239,31],[244,36,239,34,"gestures"],[244,44,239,42],[244,46,239,44],[245,6,240,4],[245,11,240,9],[245,17,240,15,"gesture"],[245,24,240,22],[245,28,240,26,"gestures"],[245,36,240,34],[245,38,240,36],[246,8,241,6],[246,12,241,10],[246,13,241,11,"addDependency"],[246,26,241,24],[246,27,241,25],[246,42,241,40],[246,44,241,42,"gesture"],[246,51,241,49],[246,52,241,50],[247,6,242,4],[248,6,243,4],[248,13,243,11],[248,17,243,15],[249,4,244,2],[251,4,246,2],[252,0,247,0],[253,0,248,0],[254,0,249,0],[255,0,250,0],[256,4,251,2,"blocksExternalGesture"],[256,25,251,23,"blocksExternalGesture"],[256,26,251,24],[256,29,251,27,"gestures"],[256,37,251,35],[256,39,251,37],[257,6,252,4],[257,11,252,9],[257,17,252,15,"gesture"],[257,24,252,22],[257,28,252,26,"gestures"],[257,36,252,34],[257,38,252,36],[258,8,253,6],[258,12,253,10],[258,13,253,11,"addDependency"],[258,26,253,24],[258,27,253,25],[258,43,253,41],[258,45,253,43,"gesture"],[258,52,253,50],[258,53,253,51],[259,6,254,4],[260,6,255,4],[260,13,255,11],[260,17,255,15],[261,4,256,2],[263,4,258,2],[264,0,259,0],[265,0,260,0],[266,0,261,0],[267,4,262,2,"withTestId"],[267,14,262,12,"withTestId"],[267,15,262,13,"id"],[267,17,262,15],[267,19,262,17],[268,6,263,4],[268,10,263,8],[268,11,263,9,"config"],[268,17,263,15],[268,18,263,16,"testId"],[268,24,263,22],[268,27,263,25,"id"],[268,29,263,27],[269,6,264,4],[269,13,264,11],[269,17,264,15],[270,4,265,2],[272,4,267,2],[273,0,268,0],[274,0,269,0],[275,0,270,0],[276,0,271,0],[277,0,272,0],[278,4,273,2,"cancelsTouchesInView"],[278,24,273,22,"cancelsTouchesInView"],[278,25,273,23,"value"],[278,30,273,28],[278,32,273,30],[279,6,274,4],[279,10,274,8],[279,11,274,9,"config"],[279,17,274,15],[279,18,274,16,"cancelsTouchesInView"],[279,38,274,36],[279,41,274,39,"value"],[279,46,274,44],[280,6,275,4],[280,13,275,11],[280,17,275,15],[281,4,276,2],[282,4,277,2,"initialize"],[282,14,277,12,"initialize"],[282,15,277,12],[282,17,277,15],[283,6,278,4],[283,10,278,8],[283,11,278,9,"handlerTag"],[283,21,278,19],[283,24,278,22],[283,28,278,22,"getNextHandlerTag"],[283,64,278,39],[283,66,278,40],[283,67,278,41],[284,6,279,4],[284,10,279,8],[284,11,279,9,"handlers"],[284,19,279,17],[284,22,279,17,"Object"],[284,28,279,17],[284,29,279,17,"assign"],[284,35,279,17],[284,40,280,9],[284,44,280,13],[284,45,280,14,"handlers"],[284,53,280,22],[285,8,281,6,"handlerTag"],[285,18,281,16],[285,20,281,18],[285,24,281,22],[285,25,281,23,"handlerTag"],[286,6,281,33],[286,8,282,5],[287,6,283,4],[287,10,283,8],[287,14,283,12],[287,15,283,13,"config"],[287,21,283,19],[287,22,283,20,"ref"],[287,25,283,23],[287,27,283,25],[288,8,284,6],[288,12,284,10],[288,13,284,11,"config"],[288,19,284,17],[288,20,284,18,"ref"],[288,23,284,21],[288,24,284,22,"current"],[288,31,284,29],[288,34,284,32],[288,38,284,36],[289,6,285,4],[290,4,286,2],[291,4,287,2,"toGestureArray"],[291,18,287,16,"toGestureArray"],[291,19,287,16],[291,21,287,19],[292,6,288,4],[292,13,288,11],[292,14,288,12],[292,18,288,16],[292,19,288,17],[293,4,289,2],[295,4,291,2],[296,4,292,2,"prepare"],[296,11,292,9,"prepare"],[296,12,292,9],[296,14,292,12],[296,15,292,13],[297,4,293,2],[297,8,293,6,"shouldUseReanimated"],[297,27,293,25,"shouldUseReanimated"],[297,28,293,25],[297,30,293,28],[298,6,294,4],[299,6,295,4],[300,6,296,4],[301,6,297,4],[301,13,297,11],[301,17,297,15],[301,18,297,16,"config"],[301,24,297,22],[301,25,297,23,"runOnJS"],[301,32,297,30],[301,37,297,35],[301,41,297,39],[301,45,297,43],[301,46,297,44],[301,50,297,48],[301,51,297,49,"handlers"],[301,59,297,57],[301,60,297,58,"isWorklet"],[301,69,297,67],[301,70,297,68,"includes"],[301,78,297,76],[301,79,297,77],[301,84,297,82],[301,85,297,83],[301,89,297,87],[301,90,297,88],[301,94,297,88,"isRemoteDebuggingEnabled"],[301,125,297,112],[301,127,297,113],[301,128,297,114],[302,4,298,2],[303,2,299,0],[304,2,299,1,"exports"],[304,9,299,1],[304,10,299,1,"BaseGesture"],[304,21,299,1],[304,24,299,1,"BaseGesture"],[304,35,299,1],[305,2,300,7],[305,8,300,13,"ContinousBaseGesture"],[305,28,300,33],[305,37,300,42,"BaseGesture"],[305,48,300,53],[305,49,300,54],[306,4,301,2],[307,0,302,0],[308,0,303,0],[309,0,304,0],[310,4,305,2,"onUpdate"],[310,12,305,10,"onUpdate"],[310,13,305,11,"callback"],[310,21,305,19],[310,23,305,21],[311,6,306,4],[311,10,306,8],[311,11,306,9,"handlers"],[311,19,306,17],[311,20,306,18,"onUpdate"],[311,28,306,26],[311,31,306,29,"callback"],[311,39,306,37],[312,6,307,4],[312,10,307,8],[312,11,307,9,"handlers"],[312,19,307,17],[312,20,307,18,"isWorklet"],[312,29,307,27],[312,30,307,28,"CALLBACK_TYPE"],[312,43,307,41],[312,44,307,42,"UPDATE"],[312,50,307,48],[312,51,307,49],[312,54,307,52],[312,58,307,56],[312,59,307,57,"isWorklet"],[312,68,307,66],[312,69,307,67,"callback"],[312,77,307,75],[312,78,307,76],[313,6,308,4],[313,13,308,11],[313,17,308,15],[314,4,309,2],[316,4,311,2],[317,0,312,0],[318,0,313,0],[319,0,314,0],[320,0,315,0],[321,4,316,2,"onChange"],[321,12,316,10,"onChange"],[321,13,316,11,"callback"],[321,21,316,19],[321,23,316,21],[322,6,317,4],[322,10,317,8],[322,11,317,9,"handlers"],[322,19,317,17],[322,20,317,18,"onChange"],[322,28,317,26],[322,31,317,29,"callback"],[322,39,317,37],[323,6,318,4],[323,10,318,8],[323,11,318,9,"handlers"],[323,19,318,17],[323,20,318,18,"isWorklet"],[323,29,318,27],[323,30,318,28,"CALLBACK_TYPE"],[323,43,318,41],[323,44,318,42,"CHANGE"],[323,50,318,48],[323,51,318,49],[323,54,318,52],[323,58,318,56],[323,59,318,57,"isWorklet"],[323,68,318,66],[323,69,318,67,"callback"],[323,77,318,75],[323,78,318,76],[324,6,319,4],[324,13,319,11],[324,17,319,15],[325,4,320,2],[327,4,322,2],[328,0,323,0],[329,0,324,0],[330,0,325,0],[331,0,326,0],[332,4,327,2,"manualActivation"],[332,20,327,18,"manualActivation"],[332,21,327,19,"manualActivation"],[332,37,327,35],[332,39,327,37],[333,6,328,4],[333,10,328,8],[333,11,328,9,"config"],[333,17,328,15],[333,18,328,16,"manualActivation"],[333,34,328,32],[333,37,328,35,"manualActivation"],[333,53,328,51],[334,6,329,4],[334,13,329,11],[334,17,329,15],[335,4,330,2],[336,2,331,0],[337,2,331,1,"exports"],[337,9,331,1],[337,10,331,1,"ContinousBaseGesture"],[337,30,331,1],[337,33,331,1,"ContinousBaseGesture"],[337,53,331,1],[338,0,331,1],[338,3]],"functionMap":{"names":["<global>","Gesture","BaseGesture","BaseGesture#constructor","BaseGesture#addDependency","BaseGesture#withRef","BaseGesture#isWorklet","BaseGesture#onBegin","BaseGesture#onStart","BaseGesture#onEnd","BaseGesture#onFinalize","BaseGesture#onTouchesDown","BaseGesture#onTouchesMove","BaseGesture#onTouchesUp","BaseGesture#onTouchesCancelled","BaseGesture#enabled","BaseGesture#shouldCancelWhenOutside","BaseGesture#hitSlop","BaseGesture#activeCursor","BaseGesture#mouseButton","BaseGesture#runOnJS","BaseGesture#simultaneousWithExternalGesture","BaseGesture#requireExternalGestureToFail","BaseGesture#blocksExternalGesture","BaseGesture#withTestId","BaseGesture#cancelsTouchesInView","BaseGesture#initialize","BaseGesture#toGestureArray","BaseGesture#prepare","BaseGesture#get__shouldUseReanimated","ContinousBaseGesture","ContinousBaseGesture#onUpdate","ContinousBaseGesture#onChange","ContinousBaseGesture#manualActivation"],"mappings":"AAA;OCwB,gBD;OEE;ECU;GDU;EEC;GFG;EGM;GHG;EIG;GJG;EKO;GLI;EMM;GNI;EOO;GPK;EQM;GRK;ESM;GTK;EUM;GVK;EWM;GXK;EYM;GZK;EaO;GbG;EcO;GdG;EeQ;GfG;EgBQ;GhBG;EiBU;GjBG;EkBQ;GlBG;EmBO;GnBK;EoBO;GpBK;EqBO;GrBK;EsBM;GtBG;EuBQ;GvBG;EwBC;GxBS;EyBC;GzBE;E0BG,Y1B;E2BC;G3BK;CFC;O8BC;ECK;GDI;EEO;GFI;EGO;GHG;C9BC"}},"type":"js/module"}]}