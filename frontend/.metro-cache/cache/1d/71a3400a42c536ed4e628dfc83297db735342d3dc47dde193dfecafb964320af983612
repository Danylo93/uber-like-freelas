{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../contexts/WebSocketContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":78,"index":136}}],"key":"RXtWqdqDCzQ/KmE1Xu4nrP0NWpQ=","exportNames":["*"]}},{"name":"../contexts/AuthContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":50,"index":187}}],"key":"oNCgyH4yx4pAIVZXLqqRGB2kuCY=","exportNames":["*"]}},{"name":"../services/api","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":45,"index":233}}],"key":"Pr5/EB33W7mJGi+ygccy+pUf1E8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useRealTimeService = void 0;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _WebSocketContext = require(_dependencyMap[1], \"../contexts/WebSocketContext\");\n  var _AuthContext = require(_dependencyMap[2], \"../contexts/AuthContext\");\n  var _api = require(_dependencyMap[3], \"../services/api\");\n  var _s = $RefreshSig$();\n  const useRealTimeService = () => {\n    _s();\n    const {\n      user\n    } = (0, _AuthContext.useAuth)();\n    const {\n      isConnected,\n      onMessage,\n      sendMessage,\n      sendLocationUpdate,\n      updateProviderStatus,\n      respondToService\n    } = (0, _WebSocketContext.useWebSocket)();\n    const [activeService, setActiveService] = (0, _react.useState)(null);\n    const [incomingRequests, setIncomingRequests] = (0, _react.useState)([]);\n    const [receivedOffers, setReceivedOffers] = (0, _react.useState)([]);\n    const [isProviderOnline, setIsProviderOnline] = (0, _react.useState)(false);\n    const [nearbyProviders, setNearbyProviders] = (0, _react.useState)([]);\n\n    // Handle incoming WebSocket messages\n    (0, _react.useEffect)(() => {\n      if (!isConnected) return;\n      const unsubscribe = onMessage(message => {\n        console.log('ðŸ”” Real-time service message:', message);\n        switch (message.type) {\n          case 'new_service_request':\n            handleNewServiceRequest(message.data.service);\n            break;\n          case 'service_status_update':\n            handleServiceStatusUpdate(message.data);\n            break;\n          case 'service_offer':\n            handleServiceOffer(message.data);\n            break;\n          case 'provider_status_change':\n            handleProviderStatusChange(message.data);\n            break;\n          case 'location_update':\n            handleLocationUpdate(message.data);\n            break;\n          default:\n            console.log('Unhandled message type:', message.type);\n        }\n      });\n      return unsubscribe;\n    }, [isConnected]);\n    const handleNewServiceRequest = service => {\n      // Only show to providers\n      if (user?.role === 'provider' && isProviderOnline) {\n        setIncomingRequests(prev => {\n          // Avoid duplicates\n          if (prev.find(req => req.id === service.id)) {\n            return prev;\n          }\n          return [...prev, service];\n        });\n\n        // Auto-remove after 30 seconds if not responded\n        setTimeout(() => {\n          setIncomingRequests(prev => prev.filter(req => req.id !== service.id));\n        }, 30000);\n      }\n    };\n    const handleServiceStatusUpdate = data => {\n      const {\n        service_id,\n        status,\n        service\n      } = data;\n      if (activeService && activeService.id === service_id) {\n        setActiveService(prev => prev ? Object.assign({}, prev, {\n          status\n        }, service) : null);\n      }\n    };\n    const handleServiceOffer = offer => {\n      // Only show to clients\n      if (user?.role === 'client') {\n        setReceivedOffers(prev => {\n          // Avoid duplicates\n          if (prev.find(o => o.id === offer.id)) {\n            return prev;\n          }\n          return [...prev, offer];\n        });\n      }\n    };\n    const handleProviderStatusChange = data => {\n      const {\n        provider_id,\n        is_online\n      } = data;\n      setNearbyProviders(prev => prev.map(provider => provider.id === provider_id ? Object.assign({}, provider, {\n        is_online\n      }) : provider));\n    };\n    const handleLocationUpdate = data => {\n      const {\n        user_id,\n        latitude,\n        longitude\n      } = data;\n\n      // Update provider location if tracking active service\n      if (activeService && activeService.provider_id === user_id) {\n        setActiveService(prev => prev ? Object.assign({}, prev, {\n          provider_location: {\n            latitude,\n            longitude\n          }\n        }) : null);\n      }\n    };\n\n    // Client functions\n    const createServiceRequest = async serviceData => {\n      try {\n        const response = await _api.apiService.post('/services/requests', serviceData);\n        const newService = response.data;\n        setActiveService(newService);\n        return newService;\n      } catch (error) {\n        console.error('Error creating service request:', error);\n        throw error;\n      }\n    };\n    const acceptOffer = async offerId => {\n      try {\n        const response = await _api.apiService.post(`/services/offers/${offerId}/accept`);\n        const acceptedService = response.data;\n        setActiveService(acceptedService);\n\n        // Clear other offers\n        setReceivedOffers([]);\n        return acceptedService;\n      } catch (error) {\n        console.error('Error accepting offer:', error);\n        throw error;\n      }\n    };\n    const cancelService = async () => {\n      if (!activeService) return;\n      try {\n        await _api.apiService.put(`/services/requests/${activeService.id}/status`, {\n          status: 'cancelled'\n        });\n        setActiveService(null);\n      } catch (error) {\n        console.error('Error cancelling service:', error);\n        throw error;\n      }\n    };\n\n    // Provider functions\n    const toggleProviderStatus = async online => {\n      try {\n        await _api.apiService.put('/providers/status', {\n          is_online: online\n        });\n        setIsProviderOnline(online);\n        updateProviderStatus(online);\n      } catch (error) {\n        console.error('Error updating provider status:', error);\n        throw error;\n      }\n    };\n    const acceptServiceRequest = async serviceId => {\n      try {\n        respondToService(serviceId, 'accept');\n\n        // Remove from incoming requests\n        setIncomingRequests(prev => prev.filter(req => req.id !== serviceId));\n\n        // Set as active service\n        const service = incomingRequests.find(req => req.id === serviceId);\n        if (service) {\n          setActiveService(Object.assign({}, service, {\n            status: 'accepted',\n            provider_id: user?.id\n          }));\n        }\n      } catch (error) {\n        console.error('Error accepting service request:', error);\n        throw error;\n      }\n    };\n    const rejectServiceRequest = async serviceId => {\n      try {\n        respondToService(serviceId, 'reject');\n\n        // Remove from incoming requests\n        setIncomingRequests(prev => prev.filter(req => req.id !== serviceId));\n      } catch (error) {\n        console.error('Error rejecting service request:', error);\n        throw error;\n      }\n    };\n    const updateServiceStatus = async status => {\n      if (!activeService) return;\n      try {\n        await _api.apiService.put(`/services/requests/${activeService.id}/status`, {\n          status\n        });\n        setActiveService(prev => prev ? Object.assign({}, prev, {\n          status\n        }) : null);\n\n        // Clear active service if completed or cancelled\n        if (status === 'completed' || status === 'cancelled') {\n          setTimeout(() => setActiveService(null), 2000);\n        }\n      } catch (error) {\n        console.error('Error updating service status:', error);\n        throw error;\n      }\n    };\n\n    // Location tracking\n    const startLocationTracking = (0, _react.useCallback)(() => {\n      if (!navigator.geolocation) return;\n      const watchId = navigator.geolocation.watchPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        sendLocationUpdate(latitude, longitude);\n      }, error => {\n        console.error('Location tracking error:', error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n      return () => {\n        navigator.geolocation.clearWatch(watchId);\n      };\n    }, [sendLocationUpdate]);\n\n    // Load nearby providers for clients\n    const loadNearbyProviders = async (latitude, longitude) => {\n      try {\n        const params = new URLSearchParams();\n        if (latitude) params.append('latitude', latitude.toString());\n        if (longitude) params.append('longitude', longitude.toString());\n        const response = await _api.apiService.get(`/providers/nearby?${params.toString()}`);\n        setNearbyProviders(response.data.providers || []);\n      } catch (error) {\n        console.error('Error loading nearby providers:', error);\n      }\n    };\n    return {\n      // State\n      activeService,\n      incomingRequests,\n      receivedOffers,\n      isProviderOnline,\n      nearbyProviders,\n      isConnected,\n      // Client functions\n      createServiceRequest,\n      acceptOffer,\n      cancelService,\n      loadNearbyProviders,\n      // Provider functions\n      toggleProviderStatus,\n      acceptServiceRequest,\n      rejectServiceRequest,\n      updateServiceStatus,\n      // Location tracking\n      startLocationTracking\n    };\n  };\n  exports.useRealTimeService = useRealTimeService;\n  _s(useRealTimeService, \"i8lc8jTC+wD80V/gJZ8MoBlPtng=\", false, function () {\n    return [_AuthContext.useAuth, _WebSocketContext.useWebSocket];\n  });\n});","lineCount":287,"map":[[6,2,1,0],[6,6,1,0,"_react"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_WebSocketContext"],[7,23,2,0],[7,26,2,0,"require"],[7,33,2,0],[7,34,2,0,"_dependencyMap"],[7,48,2,0],[8,2,3,0],[8,6,3,0,"_AuthContext"],[8,18,3,0],[8,21,3,0,"require"],[8,28,3,0],[8,29,3,0,"_dependencyMap"],[8,43,3,0],[9,2,4,0],[9,6,4,0,"_api"],[9,10,4,0],[9,13,4,0,"require"],[9,20,4,0],[9,21,4,0,"_dependencyMap"],[9,35,4,0],[10,2,4,45],[10,6,4,45,"_s"],[10,8,4,45],[10,11,4,45,"$RefreshSig$"],[10,23,4,45],[11,2,36,7],[11,8,36,13,"useRealTimeService"],[11,26,36,31],[11,29,36,34,"useRealTimeService"],[11,30,36,34],[11,35,36,40],[12,4,36,40,"_s"],[12,6,36,40],[13,4,37,2],[13,10,37,8],[14,6,37,10,"user"],[15,4,37,15],[15,5,37,16],[15,8,37,19],[15,12,37,19,"useAuth"],[15,32,37,26],[15,34,37,27],[15,35,37,28],[16,4,38,2],[16,10,38,8],[17,6,38,10,"isConnected"],[17,17,38,21],[18,6,38,23,"onMessage"],[18,15,38,32],[19,6,38,34,"sendMessage"],[19,17,38,45],[20,6,38,47,"sendLocationUpdate"],[20,24,38,65],[21,6,38,67,"updateProviderStatus"],[21,26,38,87],[22,6,38,89,"respondToService"],[23,4,38,106],[23,5,38,107],[23,8,38,110],[23,12,38,110,"useWebSocket"],[23,42,38,122],[23,44,38,123],[23,45,38,124],[24,4,40,2],[24,10,40,8],[24,11,40,9,"activeService"],[24,24,40,22],[24,26,40,24,"setActiveService"],[24,42,40,40],[24,43,40,41],[24,46,40,44],[24,50,40,44,"useState"],[24,65,40,52],[24,67,40,76],[24,71,40,80],[24,72,40,81],[25,4,41,2],[25,10,41,8],[25,11,41,9,"incomingRequests"],[25,27,41,25],[25,29,41,27,"setIncomingRequests"],[25,48,41,46],[25,49,41,47],[25,52,41,50],[25,56,41,50,"useState"],[25,71,41,58],[25,73,41,77],[25,75,41,79],[25,76,41,80],[26,4,42,2],[26,10,42,8],[26,11,42,9,"receivedOffers"],[26,25,42,23],[26,27,42,25,"setReceivedOffers"],[26,44,42,42],[26,45,42,43],[26,48,42,46],[26,52,42,46,"useState"],[26,67,42,54],[26,69,42,71],[26,71,42,73],[26,72,42,74],[27,4,43,2],[27,10,43,8],[27,11,43,9,"isProviderOnline"],[27,27,43,25],[27,29,43,27,"setIsProviderOnline"],[27,48,43,46],[27,49,43,47],[27,52,43,50],[27,56,43,50,"useState"],[27,71,43,58],[27,73,43,59],[27,78,43,64],[27,79,43,65],[28,4,44,2],[28,10,44,8],[28,11,44,9,"nearbyProviders"],[28,26,44,24],[28,28,44,26,"setNearbyProviders"],[28,46,44,44],[28,47,44,45],[28,50,44,48],[28,54,44,48,"useState"],[28,69,44,56],[28,71,44,64],[28,73,44,66],[28,74,44,67],[30,4,46,2],[31,4,47,2],[31,8,47,2,"useEffect"],[31,24,47,11],[31,26,47,12],[31,32,47,18],[32,6,48,4],[32,10,48,8],[32,11,48,9,"isConnected"],[32,22,48,20],[32,24,48,22],[33,6,50,4],[33,12,50,10,"unsubscribe"],[33,23,50,21],[33,26,50,24,"onMessage"],[33,35,50,33],[33,36,50,35,"message"],[33,43,50,60],[33,47,50,65],[34,8,51,6,"console"],[34,15,51,13],[34,16,51,14,"log"],[34,19,51,17],[34,20,51,18],[34,51,51,49],[34,53,51,51,"message"],[34,60,51,58],[34,61,51,59],[35,8,53,6],[35,16,53,14,"message"],[35,23,53,21],[35,24,53,22,"type"],[35,28,53,26],[36,10,54,8],[36,15,54,13],[36,36,54,34],[37,12,55,10,"handleNewServiceRequest"],[37,35,55,33],[37,36,55,34,"message"],[37,43,55,41],[37,44,55,42,"data"],[37,48,55,46],[37,49,55,47,"service"],[37,56,55,54],[37,57,55,55],[38,12,56,10],[39,10,58,8],[39,15,58,13],[39,38,58,36],[40,12,59,10,"handleServiceStatusUpdate"],[40,37,59,35],[40,38,59,36,"message"],[40,45,59,43],[40,46,59,44,"data"],[40,50,59,48],[40,51,59,49],[41,12,60,10],[42,10,62,8],[42,15,62,13],[42,30,62,28],[43,12,63,10,"handleServiceOffer"],[43,30,63,28],[43,31,63,29,"message"],[43,38,63,36],[43,39,63,37,"data"],[43,43,63,41],[43,44,63,42],[44,12,64,10],[45,10,66,8],[45,15,66,13],[45,39,66,37],[46,12,67,10,"handleProviderStatusChange"],[46,38,67,36],[46,39,67,37,"message"],[46,46,67,44],[46,47,67,45,"data"],[46,51,67,49],[46,52,67,50],[47,12,68,10],[48,10,70,8],[48,15,70,13],[48,32,70,30],[49,12,71,10,"handleLocationUpdate"],[49,32,71,30],[49,33,71,31,"message"],[49,40,71,38],[49,41,71,39,"data"],[49,45,71,43],[49,46,71,44],[50,12,72,10],[51,10,74,8],[52,12,75,10,"console"],[52,19,75,17],[52,20,75,18,"log"],[52,23,75,21],[52,24,75,22],[52,49,75,47],[52,51,75,49,"message"],[52,58,75,56],[52,59,75,57,"type"],[52,63,75,61],[52,64,75,62],[53,8,76,6],[54,6,77,4],[54,7,77,5],[54,8,77,6],[55,6,79,4],[55,13,79,11,"unsubscribe"],[55,24,79,22],[56,4,80,2],[56,5,80,3],[56,7,80,5],[56,8,80,6,"isConnected"],[56,19,80,17],[56,20,80,18],[56,21,80,19],[57,4,82,2],[57,10,82,8,"handleNewServiceRequest"],[57,33,82,31],[57,36,82,35,"service"],[57,43,82,58],[57,47,82,63],[58,6,83,4],[59,6,84,4],[59,10,84,8,"user"],[59,14,84,12],[59,16,84,14,"role"],[59,20,84,18],[59,25,84,23],[59,35,84,33],[59,39,84,37,"isProviderOnline"],[59,55,84,53],[59,57,84,55],[60,8,85,6,"setIncomingRequests"],[60,27,85,25],[60,28,85,26,"prev"],[60,32,85,30],[60,36,85,34],[61,10,86,8],[62,10,87,8],[62,14,87,12,"prev"],[62,18,87,16],[62,19,87,17,"find"],[62,23,87,21],[62,24,87,22,"req"],[62,27,87,25],[62,31,87,29,"req"],[62,34,87,32],[62,35,87,33,"id"],[62,37,87,35],[62,42,87,40,"service"],[62,49,87,47],[62,50,87,48,"id"],[62,52,87,50],[62,53,87,51],[62,55,87,53],[63,12,88,10],[63,19,88,17,"prev"],[63,23,88,21],[64,10,89,8],[65,10,90,8],[65,17,90,15],[65,18,90,16],[65,21,90,19,"prev"],[65,25,90,23],[65,27,90,25,"service"],[65,34,90,32],[65,35,90,33],[66,8,91,6],[66,9,91,7],[66,10,91,8],[68,8,93,6],[69,8,94,6,"setTimeout"],[69,18,94,16],[69,19,94,17],[69,25,94,23],[70,10,95,8,"setIncomingRequests"],[70,29,95,27],[70,30,95,28,"prev"],[70,34,95,32],[70,38,95,36,"prev"],[70,42,95,40],[70,43,95,41,"filter"],[70,49,95,47],[70,50,95,48,"req"],[70,53,95,51],[70,57,95,55,"req"],[70,60,95,58],[70,61,95,59,"id"],[70,63,95,61],[70,68,95,66,"service"],[70,75,95,73],[70,76,95,74,"id"],[70,78,95,76],[70,79,95,77],[70,80,95,78],[71,8,96,6],[71,9,96,7],[71,11,96,9],[71,16,96,14],[71,17,96,15],[72,6,97,4],[73,4,98,2],[73,5,98,3],[74,4,100,2],[74,10,100,8,"handleServiceStatusUpdate"],[74,35,100,33],[74,38,100,37,"data"],[74,42,100,46],[74,46,100,51],[75,6,101,4],[75,12,101,10],[76,8,101,12,"service_id"],[76,18,101,22],[77,8,101,24,"status"],[77,14,101,30],[78,8,101,32,"service"],[79,6,101,40],[79,7,101,41],[79,10,101,44,"data"],[79,14,101,48],[80,6,103,4],[80,10,103,8,"activeService"],[80,23,103,21],[80,27,103,25,"activeService"],[80,40,103,38],[80,41,103,39,"id"],[80,43,103,41],[80,48,103,46,"service_id"],[80,58,103,56],[80,60,103,58],[81,8,104,6,"setActiveService"],[81,24,104,22],[81,25,104,23,"prev"],[81,29,104,27],[81,33,104,31,"prev"],[81,37,104,35],[81,40,104,35,"Object"],[81,46,104,35],[81,47,104,35,"assign"],[81,53,104,35],[81,58,104,43,"prev"],[81,62,104,47],[82,10,104,49,"status"],[83,8,104,55],[83,11,104,60,"service"],[83,18,104,67],[83,22,104,72],[83,26,104,76],[83,27,104,77],[84,6,105,4],[85,4,106,2],[85,5,106,3],[86,4,108,2],[86,10,108,8,"handleServiceOffer"],[86,28,108,26],[86,31,108,30,"offer"],[86,36,108,49],[86,40,108,54],[87,6,109,4],[88,6,110,4],[88,10,110,8,"user"],[88,14,110,12],[88,16,110,14,"role"],[88,20,110,18],[88,25,110,23],[88,33,110,31],[88,35,110,33],[89,8,111,6,"setReceivedOffers"],[89,25,111,23],[89,26,111,24,"prev"],[89,30,111,28],[89,34,111,32],[90,10,112,8],[91,10,113,8],[91,14,113,12,"prev"],[91,18,113,16],[91,19,113,17,"find"],[91,23,113,21],[91,24,113,22,"o"],[91,25,113,23],[91,29,113,27,"o"],[91,30,113,28],[91,31,113,29,"id"],[91,33,113,31],[91,38,113,36,"offer"],[91,43,113,41],[91,44,113,42,"id"],[91,46,113,44],[91,47,113,45],[91,49,113,47],[92,12,114,10],[92,19,114,17,"prev"],[92,23,114,21],[93,10,115,8],[94,10,116,8],[94,17,116,15],[94,18,116,16],[94,21,116,19,"prev"],[94,25,116,23],[94,27,116,25,"offer"],[94,32,116,30],[94,33,116,31],[95,8,117,6],[95,9,117,7],[95,10,117,8],[96,6,118,4],[97,4,119,2],[97,5,119,3],[98,4,121,2],[98,10,121,8,"handleProviderStatusChange"],[98,36,121,34],[98,39,121,38,"data"],[98,43,121,47],[98,47,121,52],[99,6,122,4],[99,12,122,10],[100,8,122,12,"provider_id"],[100,19,122,23],[101,8,122,25,"is_online"],[102,6,122,35],[102,7,122,36],[102,10,122,39,"data"],[102,14,122,43],[103,6,124,4,"setNearbyProviders"],[103,24,124,22],[103,25,124,23,"prev"],[103,29,124,27],[103,33,125,6,"prev"],[103,37,125,10],[103,38,125,11,"map"],[103,41,125,14],[103,42,125,15,"provider"],[103,50,125,23],[103,54,126,8,"provider"],[103,62,126,16],[103,63,126,17,"id"],[103,65,126,19],[103,70,126,24,"provider_id"],[103,81,126,35],[103,84,126,35,"Object"],[103,90,126,35],[103,91,126,35,"assign"],[103,97,126,35],[103,102,127,17,"provider"],[103,110,127,25],[104,8,127,27,"is_online"],[105,6,127,36],[105,11,128,12,"provider"],[105,19,129,6],[105,20,130,4],[105,21,130,5],[106,4,131,2],[106,5,131,3],[107,4,133,2],[107,10,133,8,"handleLocationUpdate"],[107,30,133,28],[107,33,133,32,"data"],[107,37,133,41],[107,41,133,46],[108,6,134,4],[108,12,134,10],[109,8,134,12,"user_id"],[109,15,134,19],[110,8,134,21,"latitude"],[110,16,134,29],[111,8,134,31,"longitude"],[112,6,134,41],[112,7,134,42],[112,10,134,45,"data"],[112,14,134,49],[114,6,136,4],[115,6,137,4],[115,10,137,8,"activeService"],[115,23,137,21],[115,27,137,25,"activeService"],[115,40,137,38],[115,41,137,39,"provider_id"],[115,52,137,50],[115,57,137,55,"user_id"],[115,64,137,62],[115,66,137,64],[116,8,138,6,"setActiveService"],[116,24,138,22],[116,25,138,23,"prev"],[116,29,138,27],[116,33,138,31,"prev"],[116,37,138,35],[116,40,138,35,"Object"],[116,46,138,35],[116,47,138,35,"assign"],[116,53,138,35],[116,58,139,11,"prev"],[116,62,139,15],[117,10,140,8,"provider_location"],[117,27,140,25],[117,29,140,27],[118,12,140,29,"latitude"],[118,20,140,37],[119,12,140,39,"longitude"],[120,10,140,49],[121,8,140,50],[121,13,141,10],[121,17,141,14],[121,18,141,15],[122,6,142,4],[123,4,143,2],[123,5,143,3],[125,4,145,2],[126,4,146,2],[126,10,146,8,"createServiceRequest"],[126,30,146,28],[126,33,146,31],[126,39,146,38,"serviceData"],[126,50,150,3],[126,54,150,8],[127,6,151,4],[127,10,151,8],[128,8,152,6],[128,14,152,12,"response"],[128,22,152,20],[128,25,152,23],[128,31,152,29,"apiService"],[128,46,152,39],[128,47,152,40,"post"],[128,51,152,44],[128,52,152,45],[128,72,152,65],[128,74,152,67,"serviceData"],[128,85,152,78],[128,86,152,79],[129,8,153,6],[129,14,153,12,"newService"],[129,24,153,22],[129,27,153,25,"response"],[129,35,153,33],[129,36,153,34,"data"],[129,40,153,38],[130,8,154,6,"setActiveService"],[130,24,154,22],[130,25,154,23,"newService"],[130,35,154,33],[130,36,154,34],[131,8,155,6],[131,15,155,13,"newService"],[131,25,155,23],[132,6,156,4],[132,7,156,5],[132,8,156,6],[132,15,156,13,"error"],[132,20,156,18],[132,22,156,20],[133,8,157,6,"console"],[133,15,157,13],[133,16,157,14,"error"],[133,21,157,19],[133,22,157,20],[133,55,157,53],[133,57,157,55,"error"],[133,62,157,60],[133,63,157,61],[134,8,158,6],[134,14,158,12,"error"],[134,19,158,17],[135,6,159,4],[136,4,160,2],[136,5,160,3],[137,4,162,2],[137,10,162,8,"acceptOffer"],[137,21,162,19],[137,24,162,22],[137,30,162,29,"offerId"],[137,37,162,44],[137,41,162,49],[138,6,163,4],[138,10,163,8],[139,8,164,6],[139,14,164,12,"response"],[139,22,164,20],[139,25,164,23],[139,31,164,29,"apiService"],[139,46,164,39],[139,47,164,40,"post"],[139,51,164,44],[139,52,164,45],[139,72,164,65,"offerId"],[139,79,164,72],[139,88,164,81],[139,89,164,82],[140,8,165,6],[140,14,165,12,"acceptedService"],[140,29,165,27],[140,32,165,30,"response"],[140,40,165,38],[140,41,165,39,"data"],[140,45,165,43],[141,8,166,6,"setActiveService"],[141,24,166,22],[141,25,166,23,"acceptedService"],[141,40,166,38],[141,41,166,39],[143,8,168,6],[144,8,169,6,"setReceivedOffers"],[144,25,169,23],[144,26,169,24],[144,28,169,26],[144,29,169,27],[145,8,171,6],[145,15,171,13,"acceptedService"],[145,30,171,28],[146,6,172,4],[146,7,172,5],[146,8,172,6],[146,15,172,13,"error"],[146,20,172,18],[146,22,172,20],[147,8,173,6,"console"],[147,15,173,13],[147,16,173,14,"error"],[147,21,173,19],[147,22,173,20],[147,46,173,44],[147,48,173,46,"error"],[147,53,173,51],[147,54,173,52],[148,8,174,6],[148,14,174,12,"error"],[148,19,174,17],[149,6,175,4],[150,4,176,2],[150,5,176,3],[151,4,178,2],[151,10,178,8,"cancelService"],[151,23,178,21],[151,26,178,24],[151,32,178,24,"cancelService"],[151,33,178,24],[151,38,178,36],[152,6,179,4],[152,10,179,8],[152,11,179,9,"activeService"],[152,24,179,22],[152,26,179,24],[153,6,181,4],[153,10,181,8],[154,8,182,6],[154,14,182,12,"apiService"],[154,29,182,22],[154,30,182,23,"put"],[154,33,182,26],[154,34,182,27],[154,56,182,49,"activeService"],[154,69,182,62],[154,70,182,63,"id"],[154,72,182,65],[154,81,182,74],[154,83,182,76],[155,10,183,8,"status"],[155,16,183,14],[155,18,183,16],[156,8,184,6],[156,9,184,7],[156,10,184,8],[157,8,186,6,"setActiveService"],[157,24,186,22],[157,25,186,23],[157,29,186,27],[157,30,186,28],[158,6,187,4],[158,7,187,5],[158,8,187,6],[158,15,187,13,"error"],[158,20,187,18],[158,22,187,20],[159,8,188,6,"console"],[159,15,188,13],[159,16,188,14,"error"],[159,21,188,19],[159,22,188,20],[159,49,188,47],[159,51,188,49,"error"],[159,56,188,54],[159,57,188,55],[160,8,189,6],[160,14,189,12,"error"],[160,19,189,17],[161,6,190,4],[162,4,191,2],[162,5,191,3],[164,4,193,2],[165,4,194,2],[165,10,194,8,"toggleProviderStatus"],[165,30,194,28],[165,33,194,31],[165,39,194,38,"online"],[165,45,194,53],[165,49,194,58],[166,6,195,4],[166,10,195,8],[167,8,196,6],[167,14,196,12,"apiService"],[167,29,196,22],[167,30,196,23,"put"],[167,33,196,26],[167,34,196,27],[167,53,196,46],[167,55,196,48],[168,10,196,50,"is_online"],[168,19,196,59],[168,21,196,61,"online"],[169,8,196,68],[169,9,196,69],[169,10,196,70],[170,8,197,6,"setIsProviderOnline"],[170,27,197,25],[170,28,197,26,"online"],[170,34,197,32],[170,35,197,33],[171,8,198,6,"updateProviderStatus"],[171,28,198,26],[171,29,198,27,"online"],[171,35,198,33],[171,36,198,34],[172,6,199,4],[172,7,199,5],[172,8,199,6],[172,15,199,13,"error"],[172,20,199,18],[172,22,199,20],[173,8,200,6,"console"],[173,15,200,13],[173,16,200,14,"error"],[173,21,200,19],[173,22,200,20],[173,55,200,53],[173,57,200,55,"error"],[173,62,200,60],[173,63,200,61],[174,8,201,6],[174,14,201,12,"error"],[174,19,201,17],[175,6,202,4],[176,4,203,2],[176,5,203,3],[177,4,205,2],[177,10,205,8,"acceptServiceRequest"],[177,30,205,28],[177,33,205,31],[177,39,205,38,"serviceId"],[177,48,205,55],[177,52,205,60],[178,6,206,4],[178,10,206,8],[179,8,207,6,"respondToService"],[179,24,207,22],[179,25,207,23,"serviceId"],[179,34,207,32],[179,36,207,34],[179,44,207,42],[179,45,207,43],[181,8,209,6],[182,8,210,6,"setIncomingRequests"],[182,27,210,25],[182,28,210,26,"prev"],[182,32,210,30],[182,36,210,34,"prev"],[182,40,210,38],[182,41,210,39,"filter"],[182,47,210,45],[182,48,210,46,"req"],[182,51,210,49],[182,55,210,53,"req"],[182,58,210,56],[182,59,210,57,"id"],[182,61,210,59],[182,66,210,64,"serviceId"],[182,75,210,73],[182,76,210,74],[182,77,210,75],[184,8,212,6],[185,8,213,6],[185,14,213,12,"service"],[185,21,213,19],[185,24,213,22,"incomingRequests"],[185,40,213,38],[185,41,213,39,"find"],[185,45,213,43],[185,46,213,44,"req"],[185,49,213,47],[185,53,213,51,"req"],[185,56,213,54],[185,57,213,55,"id"],[185,59,213,57],[185,64,213,62,"serviceId"],[185,73,213,71],[185,74,213,72],[186,8,214,6],[186,12,214,10,"service"],[186,19,214,17],[186,21,214,19],[187,10,215,8,"setActiveService"],[187,26,215,24],[187,27,215,24,"Object"],[187,33,215,24],[187,34,215,24,"assign"],[187,40,215,24],[187,45,215,30,"service"],[187,52,215,37],[188,12,215,39,"status"],[188,18,215,45],[188,20,215,47],[188,30,215,57],[189,12,215,59,"provider_id"],[189,23,215,70],[189,25,215,72,"user"],[189,29,215,76],[189,31,215,78,"id"],[190,10,215,80],[190,12,215,82],[190,13,215,83],[191,8,216,6],[192,6,217,4],[192,7,217,5],[192,8,217,6],[192,15,217,13,"error"],[192,20,217,18],[192,22,217,20],[193,8,218,6,"console"],[193,15,218,13],[193,16,218,14,"error"],[193,21,218,19],[193,22,218,20],[193,56,218,54],[193,58,218,56,"error"],[193,63,218,61],[193,64,218,62],[194,8,219,6],[194,14,219,12,"error"],[194,19,219,17],[195,6,220,4],[196,4,221,2],[196,5,221,3],[197,4,223,2],[197,10,223,8,"rejectServiceRequest"],[197,30,223,28],[197,33,223,31],[197,39,223,38,"serviceId"],[197,48,223,55],[197,52,223,60],[198,6,224,4],[198,10,224,8],[199,8,225,6,"respondToService"],[199,24,225,22],[199,25,225,23,"serviceId"],[199,34,225,32],[199,36,225,34],[199,44,225,42],[199,45,225,43],[201,8,227,6],[202,8,228,6,"setIncomingRequests"],[202,27,228,25],[202,28,228,26,"prev"],[202,32,228,30],[202,36,228,34,"prev"],[202,40,228,38],[202,41,228,39,"filter"],[202,47,228,45],[202,48,228,46,"req"],[202,51,228,49],[202,55,228,53,"req"],[202,58,228,56],[202,59,228,57,"id"],[202,61,228,59],[202,66,228,64,"serviceId"],[202,75,228,73],[202,76,228,74],[202,77,228,75],[203,6,229,4],[203,7,229,5],[203,8,229,6],[203,15,229,13,"error"],[203,20,229,18],[203,22,229,20],[204,8,230,6,"console"],[204,15,230,13],[204,16,230,14,"error"],[204,21,230,19],[204,22,230,20],[204,56,230,54],[204,58,230,56,"error"],[204,63,230,61],[204,64,230,62],[205,8,231,6],[205,14,231,12,"error"],[205,19,231,17],[206,6,232,4],[207,4,233,2],[207,5,233,3],[208,4,235,2],[208,10,235,8,"updateServiceStatus"],[208,29,235,27],[208,32,235,30],[208,38,235,37,"status"],[208,44,235,69],[208,48,235,74],[209,6,236,4],[209,10,236,8],[209,11,236,9,"activeService"],[209,24,236,22],[209,26,236,24],[210,6,238,4],[210,10,238,8],[211,8,239,6],[211,14,239,12,"apiService"],[211,29,239,22],[211,30,239,23,"put"],[211,33,239,26],[211,34,239,27],[211,56,239,49,"activeService"],[211,69,239,62],[211,70,239,63,"id"],[211,72,239,65],[211,81,239,74],[211,83,239,76],[212,10,239,78,"status"],[213,8,239,85],[213,9,239,86],[213,10,239,87],[214,8,241,6,"setActiveService"],[214,24,241,22],[214,25,241,23,"prev"],[214,29,241,27],[214,33,241,31,"prev"],[214,37,241,35],[214,40,241,35,"Object"],[214,46,241,35],[214,47,241,35,"assign"],[214,53,241,35],[214,58,241,43,"prev"],[214,62,241,47],[215,10,241,49,"status"],[216,8,241,55],[216,13,241,60],[216,17,241,64],[216,18,241,65],[218,8,243,6],[219,8,244,6],[219,12,244,10,"status"],[219,18,244,16],[219,23,244,21],[219,34,244,32],[219,38,244,36,"status"],[219,44,244,42],[219,49,244,47],[219,60,244,58],[219,62,244,60],[220,10,245,8,"setTimeout"],[220,20,245,18],[220,21,245,19],[220,27,245,25,"setActiveService"],[220,43,245,41],[220,44,245,42],[220,48,245,46],[220,49,245,47],[220,51,245,49],[220,55,245,53],[220,56,245,54],[221,8,246,6],[222,6,247,4],[222,7,247,5],[222,8,247,6],[222,15,247,13,"error"],[222,20,247,18],[222,22,247,20],[223,8,248,6,"console"],[223,15,248,13],[223,16,248,14,"error"],[223,21,248,19],[223,22,248,20],[223,54,248,52],[223,56,248,54,"error"],[223,61,248,59],[223,62,248,60],[224,8,249,6],[224,14,249,12,"error"],[224,19,249,17],[225,6,250,4],[226,4,251,2],[226,5,251,3],[228,4,253,2],[229,4,254,2],[229,10,254,8,"startLocationTracking"],[229,31,254,29],[229,34,254,32],[229,38,254,32,"useCallback"],[229,56,254,43],[229,58,254,44],[229,64,254,50],[230,6,255,4],[230,10,255,8],[230,11,255,9,"navigator"],[230,20,255,18],[230,21,255,19,"geolocation"],[230,32,255,30],[230,34,255,32],[231,6,257,4],[231,12,257,10,"watchId"],[231,19,257,17],[231,22,257,20,"navigator"],[231,31,257,29],[231,32,257,30,"geolocation"],[231,43,257,41],[231,44,257,42,"watchPosition"],[231,57,257,55],[231,58,258,7,"position"],[231,66,258,15],[231,70,258,20],[232,8,259,8],[232,14,259,14],[233,10,259,16,"latitude"],[233,18,259,24],[234,10,259,26,"longitude"],[235,8,259,36],[235,9,259,37],[235,12,259,40,"position"],[235,20,259,48],[235,21,259,49,"coords"],[235,27,259,55],[236,8,260,8,"sendLocationUpdate"],[236,26,260,26],[236,27,260,27,"latitude"],[236,35,260,35],[236,37,260,37,"longitude"],[236,46,260,46],[236,47,260,47],[237,6,261,6],[237,7,261,7],[237,9,262,7,"error"],[237,14,262,12],[237,18,262,17],[238,8,263,8,"console"],[238,15,263,15],[238,16,263,16,"error"],[238,21,263,21],[238,22,263,22],[238,48,263,48],[238,50,263,50,"error"],[238,55,263,55],[238,56,263,56],[239,6,264,6],[239,7,264,7],[239,9,265,6],[240,8,266,8,"enableHighAccuracy"],[240,26,266,26],[240,28,266,28],[240,32,266,32],[241,8,267,8,"timeout"],[241,15,267,15],[241,17,267,17],[241,22,267,22],[242,8,268,8,"maximumAge"],[242,18,268,18],[242,20,268,20],[243,6,269,6],[243,7,270,4],[243,8,270,5],[244,6,272,4],[244,13,272,11],[244,19,272,17],[245,8,273,6,"navigator"],[245,17,273,15],[245,18,273,16,"geolocation"],[245,29,273,27],[245,30,273,28,"clearWatch"],[245,40,273,38],[245,41,273,39,"watchId"],[245,48,273,46],[245,49,273,47],[246,6,274,4],[246,7,274,5],[247,4,275,2],[247,5,275,3],[247,7,275,5],[247,8,275,6,"sendLocationUpdate"],[247,26,275,24],[247,27,275,25],[247,28,275,26],[249,4,277,2],[250,4,278,2],[250,10,278,8,"loadNearbyProviders"],[250,29,278,27],[250,32,278,30],[250,38,278,30,"loadNearbyProviders"],[250,39,278,37,"latitude"],[250,47,278,54],[250,49,278,56,"longitude"],[250,58,278,74],[250,63,278,79],[251,6,279,4],[251,10,279,8],[252,8,280,6],[252,14,280,12,"params"],[252,20,280,18],[252,23,280,21],[252,27,280,25,"URLSearchParams"],[252,42,280,40],[252,43,280,41],[252,44,280,42],[253,8,281,6],[253,12,281,10,"latitude"],[253,20,281,18],[253,22,281,20,"params"],[253,28,281,26],[253,29,281,27,"append"],[253,35,281,33],[253,36,281,34],[253,46,281,44],[253,48,281,46,"latitude"],[253,56,281,54],[253,57,281,55,"toString"],[253,65,281,63],[253,66,281,64],[253,67,281,65],[253,68,281,66],[254,8,282,6],[254,12,282,10,"longitude"],[254,21,282,19],[254,23,282,21,"params"],[254,29,282,27],[254,30,282,28,"append"],[254,36,282,34],[254,37,282,35],[254,48,282,46],[254,50,282,48,"longitude"],[254,59,282,57],[254,60,282,58,"toString"],[254,68,282,66],[254,69,282,67],[254,70,282,68],[254,71,282,69],[255,8,284,6],[255,14,284,12,"response"],[255,22,284,20],[255,25,284,23],[255,31,284,29,"apiService"],[255,46,284,39],[255,47,284,40,"get"],[255,50,284,43],[255,51,284,44],[255,72,284,65,"params"],[255,78,284,71],[255,79,284,72,"toString"],[255,87,284,80],[255,88,284,81],[255,89,284,82],[255,91,284,84],[255,92,284,85],[256,8,285,6,"setNearbyProviders"],[256,26,285,24],[256,27,285,25,"response"],[256,35,285,33],[256,36,285,34,"data"],[256,40,285,38],[256,41,285,39,"providers"],[256,50,285,48],[256,54,285,52],[256,56,285,54],[256,57,285,55],[257,6,286,4],[257,7,286,5],[257,8,286,6],[257,15,286,13,"error"],[257,20,286,18],[257,22,286,20],[258,8,287,6,"console"],[258,15,287,13],[258,16,287,14,"error"],[258,21,287,19],[258,22,287,20],[258,55,287,53],[258,57,287,55,"error"],[258,62,287,60],[258,63,287,61],[259,6,288,4],[260,4,289,2],[260,5,289,3],[261,4,291,2],[261,11,291,9],[262,6,292,4],[263,6,293,4,"activeService"],[263,19,293,17],[264,6,294,4,"incomingRequests"],[264,22,294,20],[265,6,295,4,"receivedOffers"],[265,20,295,18],[266,6,296,4,"isProviderOnline"],[266,22,296,20],[267,6,297,4,"nearbyProviders"],[267,21,297,19],[268,6,298,4,"isConnected"],[268,17,298,15],[269,6,300,4],[270,6,301,4,"createServiceRequest"],[270,26,301,24],[271,6,302,4,"acceptOffer"],[271,17,302,15],[272,6,303,4,"cancelService"],[272,19,303,17],[273,6,304,4,"loadNearbyProviders"],[273,25,304,23],[274,6,306,4],[275,6,307,4,"toggleProviderStatus"],[275,26,307,24],[276,6,308,4,"acceptServiceRequest"],[276,26,308,24],[277,6,309,4,"rejectServiceRequest"],[277,26,309,24],[278,6,310,4,"updateServiceStatus"],[278,25,310,23],[279,6,312,4],[280,6,313,4,"startLocationTracking"],[281,4,314,2],[281,5,314,3],[282,2,315,0],[282,3,315,1],[283,2,315,2,"exports"],[283,9,315,2],[283,10,315,2,"useRealTimeService"],[283,28,315,2],[283,31,315,2,"useRealTimeService"],[283,49,315,2],[284,2,315,2,"_s"],[284,4,315,2],[284,5,36,13,"useRealTimeService"],[284,23,36,31],[285,4,36,31],[285,12,37,19,"useAuth"],[285,32,37,26],[285,34,38,110,"useWebSocket"],[285,64,38,122],[286,2,38,122],[287,0,38,122],[287,3]],"functionMap":{"names":["<global>","useRealTimeService","useEffect$argument_0","onMessage$argument_0","handleNewServiceRequest","setIncomingRequests$argument_0","prev.find$argument_0","setTimeout$argument_0","prev.filter$argument_0","handleServiceStatusUpdate","setActiveService$argument_0","handleServiceOffer","setReceivedOffers$argument_0","handleProviderStatusChange","setNearbyProviders$argument_0","prev.map$argument_0","handleLocationUpdate","createServiceRequest","acceptOffer","cancelService","toggleProviderStatus","acceptServiceRequest","incomingRequests.find$argument_0","rejectServiceRequest","updateServiceStatus","startLocationTracking","navigator.geolocation.watchPosition$argument_0","navigator.geolocation.watchPosition$argument_1","<anonymous>","loadNearbyProviders"],"mappings":"AAA;kCCmC;YCW;kCCG;KD2B;GDG;kCGE;0BCG;sBCE,4BD;ODI;iBGG;4BFC,oBG,4BH,CE;OHC;GHE;oCQE;uBCI,qDD;GRE;6BUE;wBCG;sBNE,sBM;ODI;GVE;qCYE;uBCG;eCC;oBDG;ODC;GZE;+BeE;uBNK;cMG;GfE;+BgBG;GhBc;sBiBE;GjBc;wBkBE;GlBa;+BmBG;GnBS;+BoBE;0BhBK,oBG,2BH,CgB;4CCG,2BD;GpBQ;+BsBE;0BlBK,oBG,2BH,CkB;GtBK;8BuBE;uBdM,yCc;mBjBI,4BiB;GvBM;4CwBG;MCI;ODG;MEC;OFE;WGQ;KHE;GxBC;8B4BG;G5BW;CD0B"}},"type":"js/module"}]}