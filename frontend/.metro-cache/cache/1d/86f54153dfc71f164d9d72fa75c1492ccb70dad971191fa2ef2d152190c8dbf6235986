{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"]}},{"name":"./handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":92},"end":{"line":4,"column":52,"index":144}}],"key":"icHMSVIKxbHLSdF6K64ideInyBg=","exportNames":["*"]}},{"name":"../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":145},"end":{"line":5,"column":35,"index":180}}],"key":"mL7nJyZhzUYx+zMcIt1cBzVuRps=","exportNames":["*"]}},{"name":"../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":181},"end":{"line":6,"column":63,"index":244}}],"key":"bY7FGgfi8WGOEKHKyXsenNEOYXM=","exportNames":["*"]}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":245},"end":{"line":7,"column":55,"index":300}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.filterConfig = filterConfig;\n  exports.findNodeHandle = findNodeHandle;\n  exports.scheduleFlushOperations = scheduleFlushOperations;\n  exports.transformIntoHandlerTags = transformIntoHandlerTags;\n  var _Platform = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\"));\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/findNodeHandle\"));\n  var _handlersRegistry = require(_dependencyMap[3], \"./handlersRegistry\");\n  var _utils = require(_dependencyMap[4], \"../utils\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[5], \"../RNGestureHandlerModule\"));\n  var _ghQueueMicrotask = require(_dependencyMap[6], \"../ghQueueMicrotask\");\n  function isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n  }\n  function filterConfig(props, validProps, defaults = {}) {\n    const filteredConfig = {\n      ...defaults\n    };\n    for (const key of validProps) {\n      let value = props[key];\n      if (isConfigParam(value, key)) {\n        if (key === 'simultaneousHandlers' || key === 'waitFor') {\n          value = transformIntoHandlerTags(props[key]);\n        } else if (key === 'hitSlop' && typeof value !== 'object') {\n          value = {\n            top: value,\n            left: value,\n            bottom: value,\n            right: value\n          };\n        }\n        filteredConfig[key] = value;\n      }\n    }\n    return filteredConfig;\n  }\n  function transformIntoHandlerTags(handlerIDs) {\n    handlerIDs = (0, _utils.toArray)(handlerIDs);\n    if (_Platform.default.OS === 'web') {\n      return handlerIDs.map(({\n        current\n      }) => current).filter(handle => handle);\n    }\n    // converts handler string IDs into their numeric tags\n    return handlerIDs.map(handlerID => _handlersRegistry.handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1).filter(handlerTag => handlerTag > 0);\n  }\n  function findNodeHandle(node) {\n    if (_Platform.default.OS === 'web') {\n      return node;\n    }\n    return (0, _findNodeHandle.default)(node) ?? null;\n  }\n  let flushOperationsScheduled = false;\n  function scheduleFlushOperations() {\n    if (!flushOperationsScheduled) {\n      flushOperationsScheduled = true;\n      (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n        _RNGestureHandlerModule.default.flushOperations();\n        flushOperationsScheduled = false;\n      });\n    }\n  }\n});","lineCount":71,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"filterConfig"],[8,22,1,13],[8,25,1,13,"filterConfig"],[8,37,1,13],[9,2,1,13,"exports"],[9,9,1,13],[9,10,1,13,"findNodeHandle"],[9,24,1,13],[9,27,1,13,"findNodeHandle"],[9,41,1,13],[10,2,1,13,"exports"],[10,9,1,13],[10,10,1,13,"scheduleFlushOperations"],[10,33,1,13],[10,36,1,13,"scheduleFlushOperations"],[10,59,1,13],[11,2,1,13,"exports"],[11,9,1,13],[11,10,1,13,"transformIntoHandlerTags"],[11,34,1,13],[11,37,1,13,"transformIntoHandlerTags"],[11,61,1,13],[12,2,1,13],[12,6,1,13,"_Platform"],[12,15,1,13],[12,18,1,13,"_interopRequireDefault"],[12,40,1,13],[12,41,1,13,"require"],[12,48,1,13],[12,49,1,13,"_dependencyMap"],[12,63,1,13],[13,2,1,13],[13,6,1,13,"_findNodeHandle"],[13,21,1,13],[13,24,1,13,"_interopRequireDefault"],[13,46,1,13],[13,47,1,13,"require"],[13,54,1,13],[13,55,1,13,"_dependencyMap"],[13,69,1,13],[14,2,4,0],[14,6,4,0,"_handlersRegistry"],[14,23,4,0],[14,26,4,0,"require"],[14,33,4,0],[14,34,4,0,"_dependencyMap"],[14,48,4,0],[15,2,5,0],[15,6,5,0,"_utils"],[15,12,5,0],[15,15,5,0,"require"],[15,22,5,0],[15,23,5,0,"_dependencyMap"],[15,37,5,0],[16,2,6,0],[16,6,6,0,"_RNGestureHandlerModule"],[16,29,6,0],[16,32,6,0,"_interopRequireDefault"],[16,54,6,0],[16,55,6,0,"require"],[16,62,6,0],[16,63,6,0,"_dependencyMap"],[16,77,6,0],[17,2,7,0],[17,6,7,0,"_ghQueueMicrotask"],[17,23,7,0],[17,26,7,0,"require"],[17,33,7,0],[17,34,7,0,"_dependencyMap"],[17,48,7,0],[18,2,8,0],[18,11,8,9,"isConfigParam"],[18,24,8,22,"isConfigParam"],[18,25,8,23,"param"],[18,30,8,28],[18,32,8,30,"name"],[18,36,8,34],[18,38,8,36],[19,4,9,2],[20,4,10,2],[21,4,11,2],[21,11,11,9,"param"],[21,16,11,14],[21,21,11,19,"undefined"],[21,30,11,28],[21,35,11,33,"param"],[21,40,11,38],[21,45,11,43,"Object"],[21,51,11,49],[21,52,11,50,"param"],[21,57,11,55],[21,58,11,56],[21,62,11,60],[21,64,11,62],[21,76,11,74],[21,80,11,78,"param"],[21,85,11,83],[21,86,11,84],[21,87,11,85],[21,91,11,89,"name"],[21,95,11,93],[21,100,11,98],[21,122,11,120],[21,126,11,124,"name"],[21,130,11,128],[21,135,11,133],[21,151,11,149],[22,2,12,0],[23,2,13,7],[23,11,13,16,"filterConfig"],[23,23,13,28,"filterConfig"],[23,24,13,29,"props"],[23,29,13,34],[23,31,13,36,"validProps"],[23,41,13,46],[23,43,13,48,"defaults"],[23,51,13,56],[23,54,13,59],[23,55,13,60],[23,56,13,61],[23,58,13,63],[24,4,14,2],[24,10,14,8,"filteredConfig"],[24,24,14,22],[24,27,14,25],[25,6,15,4],[25,9,15,7,"defaults"],[26,4,16,2],[26,5,16,3],[27,4,17,2],[27,9,17,7],[27,15,17,13,"key"],[27,18,17,16],[27,22,17,20,"validProps"],[27,32,17,30],[27,34,17,32],[28,6,18,4],[28,10,18,8,"value"],[28,15,18,13],[28,18,18,16,"props"],[28,23,18,21],[28,24,18,22,"key"],[28,27,18,25],[28,28,18,26],[29,6,19,4],[29,10,19,8,"isConfigParam"],[29,23,19,21],[29,24,19,22,"value"],[29,29,19,27],[29,31,19,29,"key"],[29,34,19,32],[29,35,19,33],[29,37,19,35],[30,8,20,6],[30,12,20,10,"key"],[30,15,20,13],[30,20,20,18],[30,42,20,40],[30,46,20,44,"key"],[30,49,20,47],[30,54,20,52],[30,63,20,61],[30,65,20,63],[31,10,21,8,"value"],[31,15,21,13],[31,18,21,16,"transformIntoHandlerTags"],[31,42,21,40],[31,43,21,41,"props"],[31,48,21,46],[31,49,21,47,"key"],[31,52,21,50],[31,53,21,51],[31,54,21,52],[32,8,22,6],[32,9,22,7],[32,15,22,13],[32,19,22,17,"key"],[32,22,22,20],[32,27,22,25],[32,36,22,34],[32,40,22,38],[32,47,22,45,"value"],[32,52,22,50],[32,57,22,55],[32,65,22,63],[32,67,22,65],[33,10,23,8,"value"],[33,15,23,13],[33,18,23,16],[34,12,24,10,"top"],[34,15,24,13],[34,17,24,15,"value"],[34,22,24,20],[35,12,25,10,"left"],[35,16,25,14],[35,18,25,16,"value"],[35,23,25,21],[36,12,26,10,"bottom"],[36,18,26,16],[36,20,26,18,"value"],[36,25,26,23],[37,12,27,10,"right"],[37,17,27,15],[37,19,27,17,"value"],[38,10,28,8],[38,11,28,9],[39,8,29,6],[40,8,30,6,"filteredConfig"],[40,22,30,20],[40,23,30,21,"key"],[40,26,30,24],[40,27,30,25],[40,30,30,28,"value"],[40,35,30,33],[41,6,31,4],[42,4,32,2],[43,4,33,2],[43,11,33,9,"filteredConfig"],[43,25,33,23],[44,2,34,0],[45,2,35,7],[45,11,35,16,"transformIntoHandlerTags"],[45,35,35,40,"transformIntoHandlerTags"],[45,36,35,41,"handlerIDs"],[45,46,35,51],[45,48,35,53],[46,4,36,2,"handlerIDs"],[46,14,36,12],[46,17,36,15],[46,21,36,15,"toArray"],[46,35,36,22],[46,37,36,23,"handlerIDs"],[46,47,36,33],[46,48,36,34],[47,4,37,2],[47,8,37,6,"Platform"],[47,25,37,14],[47,26,37,15,"OS"],[47,28,37,17],[47,33,37,22],[47,38,37,27],[47,40,37,29],[48,6,38,4],[48,13,38,11,"handlerIDs"],[48,23,38,21],[48,24,38,22,"map"],[48,27,38,25],[48,28,38,26],[48,29,38,27],[49,8,39,6,"current"],[50,6,40,4],[50,7,40,5],[50,12,40,10,"current"],[50,19,40,17],[50,20,40,18],[50,21,40,19,"filter"],[50,27,40,25],[50,28,40,26,"handle"],[50,34,40,32],[50,38,40,36,"handle"],[50,44,40,42],[50,45,40,43],[51,4,41,2],[52,4,42,2],[53,4,43,2],[53,11,43,9,"handlerIDs"],[53,21,43,19],[53,22,43,20,"map"],[53,25,43,23],[53,26,43,24,"handlerID"],[53,35,43,33],[53,39,43,37,"handlerIDToTag"],[53,71,43,51],[53,72,43,52,"handlerID"],[53,81,43,61],[53,82,43,62],[53,86,43,66,"handlerID"],[53,95,43,75],[53,96,43,76,"current"],[53,103,43,83],[53,105,43,85,"handlerTag"],[53,115,43,95],[53,119,43,99],[53,120,43,100],[53,121,43,101],[53,122,43,102],[53,123,43,103,"filter"],[53,129,43,109],[53,130,43,110,"handlerTag"],[53,140,43,120],[53,144,43,124,"handlerTag"],[53,154,43,134],[53,157,43,137],[53,158,43,138],[53,159,43,139],[54,2,44,0],[55,2,45,7],[55,11,45,16,"findNodeHandle"],[55,25,45,30,"findNodeHandle"],[55,26,45,31,"node"],[55,30,45,35],[55,32,45,37],[56,4,46,2],[56,8,46,6,"Platform"],[56,25,46,14],[56,26,46,15,"OS"],[56,28,46,17],[56,33,46,22],[56,38,46,27],[56,40,46,29],[57,6,47,4],[57,13,47,11,"node"],[57,17,47,15],[58,4,48,2],[59,4,49,2],[59,11,49,9],[59,15,49,9,"findNodeHandleRN"],[59,38,49,25],[59,40,49,26,"node"],[59,44,49,30],[59,45,49,31],[59,49,49,35],[59,53,49,39],[60,2,50,0],[61,2,51,0],[61,6,51,4,"flushOperationsScheduled"],[61,30,51,28],[61,33,51,31],[61,38,51,36],[62,2,52,7],[62,11,52,16,"scheduleFlushOperations"],[62,34,52,39,"scheduleFlushOperations"],[62,35,52,39],[62,37,52,42],[63,4,53,2],[63,8,53,6],[63,9,53,7,"flushOperationsScheduled"],[63,33,53,31],[63,35,53,33],[64,6,54,4,"flushOperationsScheduled"],[64,30,54,28],[64,33,54,31],[64,37,54,35],[65,6,55,4],[65,10,55,4,"ghQueueMicrotask"],[65,44,55,20],[65,46,55,21],[65,52,55,27],[66,8,56,6,"RNGestureHandlerModule"],[66,39,56,28],[66,40,56,29,"flushOperations"],[66,55,56,44],[66,56,56,45],[66,57,56,46],[67,8,57,6,"flushOperationsScheduled"],[67,32,57,30],[67,35,57,33],[67,40,57,38],[68,6,58,4],[68,7,58,5],[68,8,58,6],[69,4,59,2],[70,2,60,0],[71,0,60,1],[71,3]],"functionMap":{"names":["<global>","isConfigParam","filterConfig","transformIntoHandlerTags","handlerIDs.map$argument_0","handlerIDs.map.filter$argument_0","findNodeHandle","scheduleFlushOperations","ghQueueMicrotask$argument_0"],"mappings":"AAA;ACO;CDI;OEC;CFqB;OGC;0BCG;iBDE,SE,gBF;wBCG,6ED,SE,4BF;CHC;OMC;CNK;OOE;qBCG;KDG;CPE"}},"type":"js/module"}]}