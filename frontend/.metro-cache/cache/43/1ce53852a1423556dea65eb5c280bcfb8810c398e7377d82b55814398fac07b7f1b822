{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":57,"index":72}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"]}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":73},"end":{"line":4,"column":69,"index":142}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"]}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":143},"end":{"line":5,"column":68,"index":211}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"]}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":212},"end":{"line":6,"column":61,"index":273}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"]}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":274},"end":{"line":7,"column":99,"index":373}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[1], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[2], \"../../../RNGestureHandlerModule\"));\n  var _utils = require(_dependencyMap[3], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[4], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[5], \"./utils\");\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Store attached gestures to avoid crash when gestures changed after queueing micro task\n    const attachedGestures = preparedGesture.attachedGestures;\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // Stop if attached gestures changed after queueing micro task\n      if (attachedGestures !== preparedGesture.attachedGestures) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      let shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;\n      for (let i = 0; i < newGestures.length; i++) {\n        const handler = attachedGestures[i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        handler.config = newGestures[i].config;\n        handler.handlers = newGestures[i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(handler)));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        const newHandlersValue = attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":67,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"updateHandlers"],[8,24,1,13],[8,27,1,13,"updateHandlers"],[8,41,1,13],[9,2,3,0],[9,6,3,0,"_handlersRegistry"],[9,23,3,0],[9,26,3,0,"require"],[9,33,3,0],[9,34,3,0,"_dependencyMap"],[9,48,3,0],[10,2,4,0],[10,6,4,0,"_RNGestureHandlerModule"],[10,29,4,0],[10,32,4,0,"_interopRequireDefault"],[10,54,4,0],[10,55,4,0,"require"],[10,62,4,0],[10,63,4,0,"_dependencyMap"],[10,77,4,0],[11,2,5,0],[11,6,5,0,"_utils"],[11,12,5,0],[11,15,5,0,"require"],[11,22,5,0],[11,23,5,0,"_dependencyMap"],[11,37,5,0],[12,2,6,0],[12,6,6,0,"_ghQueueMicrotask"],[12,23,6,0],[12,26,6,0,"require"],[12,33,6,0],[12,34,6,0,"_dependencyMap"],[12,48,6,0],[13,2,7,0],[13,6,7,0,"_utils2"],[13,13,7,0],[13,16,7,0,"require"],[13,23,7,0],[13,24,7,0,"_dependencyMap"],[13,38,7,0],[14,2,8,7],[14,11,8,16,"updateHandlers"],[14,25,8,30,"updateHandlers"],[14,26,8,31,"preparedGesture"],[14,41,8,46],[14,43,8,48,"gestureConfig"],[14,56,8,61],[14,58,8,63,"newGestures"],[14,69,8,74],[14,71,8,76],[15,4,9,2,"gestureConfig"],[15,17,9,15],[15,18,9,16,"prepare"],[15,25,9,23],[15,26,9,24],[15,27,9,25],[16,4,10,2],[16,9,10,7],[16,13,10,11,"i"],[16,14,10,12],[16,17,10,15],[16,18,10,16],[16,20,10,18,"i"],[16,21,10,19],[16,24,10,22,"newGestures"],[16,35,10,33],[16,36,10,34,"length"],[16,42,10,40],[16,44,10,42,"i"],[16,45,10,43],[16,47,10,45],[16,49,10,47],[17,6,11,4],[17,12,11,10,"handler"],[17,19,11,17],[17,22,11,20,"preparedGesture"],[17,37,11,35],[17,38,11,36,"attachedGestures"],[17,54,11,52],[17,55,11,53,"i"],[17,56,11,54],[17,57,11,55],[18,6,12,4],[18,10,12,4,"checkGestureCallbacksForWorklets"],[18,50,12,36],[18,52,12,37,"handler"],[18,59,12,44],[18,60,12,45],[20,6,14,4],[21,6,15,4],[22,6,16,4],[22,10,16,8,"newGestures"],[22,21,16,19],[22,22,16,20,"i"],[22,23,16,21],[22,24,16,22],[22,25,16,23,"handlerTag"],[22,35,16,33],[22,40,16,38,"handler"],[22,47,16,45],[22,48,16,46,"handlerTag"],[22,58,16,56],[22,60,16,58],[23,8,17,6,"newGestures"],[23,19,17,17],[23,20,17,18,"i"],[23,21,17,19],[23,22,17,20],[23,23,17,21,"handlerTag"],[23,33,17,31],[23,36,17,34,"handler"],[23,43,17,41],[23,44,17,42,"handlerTag"],[23,54,17,52],[24,8,18,6,"newGestures"],[24,19,18,17],[24,20,18,18,"i"],[24,21,18,19],[24,22,18,20],[24,23,18,21,"handlers"],[24,31,18,29],[24,32,18,30,"handlerTag"],[24,42,18,40],[24,45,18,43,"handler"],[24,52,18,50],[24,53,18,51,"handlerTag"],[24,63,18,61],[25,6,19,4],[26,4,20,2],[28,4,22,2],[29,4,23,2],[29,10,23,8,"attachedGestures"],[29,26,23,24],[29,29,23,27,"preparedGesture"],[29,44,23,42],[29,45,23,43,"attachedGestures"],[29,61,23,59],[31,4,25,2],[32,4,26,2],[33,4,27,2],[34,4,28,2],[34,8,28,2,"ghQueueMicrotask"],[34,42,28,18],[34,44,28,19],[34,50,28,25],[35,6,29,4],[35,10,29,8],[35,11,29,9,"preparedGesture"],[35,26,29,24],[35,27,29,25,"isMounted"],[35,36,29,34],[35,38,29,36],[36,8,30,6],[37,6,31,4],[39,6,33,4],[40,6,34,4],[40,10,34,8,"attachedGestures"],[40,26,34,24],[40,31,34,29,"preparedGesture"],[40,46,34,44],[40,47,34,45,"attachedGestures"],[40,63,34,61],[40,65,34,63],[41,8,35,6],[42,6,36,4],[44,6,38,4],[45,6,39,4],[45,10,39,8,"shouldUpdateSharedValueIfUsed"],[45,39,39,37],[45,42,39,40,"attachedGestures"],[45,58,39,56],[45,59,39,57,"length"],[45,65,39,63],[45,70,39,68,"newGestures"],[45,81,39,79],[45,82,39,80,"length"],[45,88,39,86],[46,6,40,4],[46,11,40,9],[46,15,40,13,"i"],[46,16,40,14],[46,19,40,17],[46,20,40,18],[46,22,40,20,"i"],[46,23,40,21],[46,26,40,24,"newGestures"],[46,37,40,35],[46,38,40,36,"length"],[46,44,40,42],[46,46,40,44,"i"],[46,47,40,45],[46,49,40,47],[46,51,40,49],[47,8,41,6],[47,14,41,12,"handler"],[47,21,41,19],[47,24,41,22,"attachedGestures"],[47,40,41,38],[47,41,41,39,"i"],[47,42,41,40],[47,43,41,41],[49,8,43,6],[50,8,44,6],[51,8,45,6],[51,12,45,10,"handler"],[51,19,45,17],[51,20,45,18,"handlers"],[51,28,45,26],[51,29,45,27,"gestureId"],[51,38,45,36],[51,43,45,41,"newGestures"],[51,54,45,52],[51,55,45,53,"i"],[51,56,45,54],[51,57,45,55],[51,58,45,56,"handlers"],[51,66,45,64],[51,67,45,65,"gestureId"],[51,76,45,74],[51,81,45,79,"newGestures"],[51,92,45,90],[51,93,45,91,"i"],[51,94,45,92],[51,95,45,93],[51,96,45,94,"shouldUseReanimated"],[51,115,45,113],[51,119,45,117,"handler"],[51,126,45,124],[51,127,45,125,"shouldUseReanimated"],[51,146,45,144],[51,147,45,145],[51,149,45,147],[52,10,46,8,"shouldUpdateSharedValueIfUsed"],[52,39,46,37],[52,42,46,40],[52,46,46,44],[53,8,47,6],[54,8,48,6,"handler"],[54,15,48,13],[54,16,48,14,"config"],[54,22,48,20],[54,25,48,23,"newGestures"],[54,36,48,34],[54,37,48,35,"i"],[54,38,48,36],[54,39,48,37],[54,40,48,38,"config"],[54,46,48,44],[55,8,49,6,"handler"],[55,15,49,13],[55,16,49,14,"handlers"],[55,24,49,22],[55,27,49,25,"newGestures"],[55,38,49,36],[55,39,49,37,"i"],[55,40,49,38],[55,41,49,39],[55,42,49,40,"handlers"],[55,50,49,48],[56,8,50,6,"RNGestureHandlerModule"],[56,39,50,28],[56,40,50,29,"updateGestureHandler"],[56,60,50,49],[56,61,50,50,"handler"],[56,68,50,57],[56,69,50,58,"handlerTag"],[56,79,50,68],[56,81,50,70],[56,85,50,70,"filterConfig"],[56,104,50,82],[56,106,50,83,"handler"],[56,113,50,90],[56,114,50,91,"config"],[56,120,50,97],[56,122,50,99,"ALLOWED_PROPS"],[56,143,50,112],[56,145,50,114],[56,149,50,114,"extractGestureRelations"],[56,180,50,137],[56,182,50,138,"handler"],[56,189,50,145],[56,190,50,146],[56,191,50,147],[56,192,50,148],[57,8,51,6],[57,12,51,6,"registerHandler"],[57,45,51,21],[57,47,51,22,"handler"],[57,54,51,29],[57,55,51,30,"handlerTag"],[57,65,51,40],[57,67,51,42,"handler"],[57,74,51,49],[57,76,51,51,"handler"],[57,83,51,58],[57,84,51,59,"config"],[57,90,51,65],[57,91,51,66,"testId"],[57,97,51,72],[57,98,51,73],[58,6,52,4],[59,6,53,4],[59,10,53,8,"preparedGesture"],[59,25,53,23],[59,26,53,24,"animatedHandlers"],[59,42,53,40],[59,46,53,44,"shouldUpdateSharedValueIfUsed"],[59,75,53,73],[59,77,53,75],[60,8,54,6],[60,14,54,12,"newHandlersValue"],[60,30,54,28],[60,33,54,31,"attachedGestures"],[60,49,54,47],[60,50,54,48,"filter"],[60,56,54,54],[60,57,54,55,"g"],[60,58,54,56],[60,62,54,60,"g"],[60,63,54,61],[60,64,54,62,"shouldUseReanimated"],[60,83,54,81],[60,84,54,82],[60,85,54,83],[61,8,54,83],[61,9,55,7,"map"],[61,12,55,10],[61,13,55,11,"g"],[61,14,55,12],[61,18,55,16,"g"],[61,19,55,17],[61,20,55,18,"handlers"],[61,28,55,26],[61,29,55,27],[62,8,56,6,"preparedGesture"],[62,23,56,21],[62,24,56,22,"animatedHandlers"],[62,40,56,38],[62,41,56,39,"value"],[62,46,56,44],[62,49,56,47,"newHandlersValue"],[62,65,56,63],[63,6,57,4],[64,6,58,4],[64,10,58,4,"scheduleFlushOperations"],[64,40,58,27],[64,42,58,28],[64,43,58,29],[65,4,59,2],[65,5,59,3],[65,6,59,4],[66,2,60,0],[67,0,60,1],[67,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","attachedGestures.filter$argument_0","attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCO;mBCoB;uDC0B,0BD;WEC,eF;GDI;CDC"}},"type":"js/module"}]}