{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.googleDirectionsService = void 0;\n  var _env2 = require(_dependencyMap[0], \"expo/virtual/env\");\n  class GoogleDirectionsService {\n    apiKey = null;\n    baseUrl = 'https://maps.googleapis.com/maps/api/directions/json';\n    constructor() {\n      // Initialize with API key from environment variables\n      this.apiKey = _env2.env.EXPO_PUBLIC_GOOGLE_DIRECTIONS_API_KEY || null;\n      console.log('üó∫Ô∏è GoogleDirectionsService initialized', this.apiKey ? 'with real API key' : 'with mock data');\n    }\n    setApiKey(apiKey) {\n      this.apiKey = apiKey;\n    }\n\n    /**\n     * Get directions between two points\n     */\n    async getDirections(origin, destination, waypoints, options) {\n      try {\n        if (!this.apiKey) {\n          console.log('‚ö†Ô∏è Google Directions API key not set, using mock data');\n          return this.getMockDirections(origin, destination);\n        }\n        const params = new URLSearchParams();\n\n        // Format origin and destination\n        const formattedOrigin = typeof origin === 'string' ? origin : `${origin.latitude},${origin.longitude}`;\n        const formattedDestination = typeof destination === 'string' ? destination : `${destination.latitude},${destination.longitude}`;\n        params.append('origin', formattedOrigin);\n        params.append('destination', formattedDestination);\n        params.append('key', this.apiKey);\n        params.append('mode', options?.mode || 'driving');\n        params.append('language', 'pt-BR');\n        params.append('units', 'metric');\n\n        // Add waypoints if provided\n        if (waypoints && waypoints.length > 0) {\n          const waypointsStr = waypoints.map(wp => `${wp.latitude},${wp.longitude}`).join('|');\n          params.append('waypoints', waypointsStr);\n          if (options?.optimize) {\n            params.append('waypoints', `optimize:true|${waypointsStr}`);\n          }\n        }\n\n        // Add avoid options\n        const avoid = [];\n        if (options?.avoidTolls) avoid.push('tolls');\n        if (options?.avoidHighways) avoid.push('highways');\n        if (options?.avoidFerries) avoid.push('ferries');\n        if (avoid.length > 0) {\n          params.append('avoid', avoid.join('|'));\n        }\n        const url = `${this.baseUrl}?${params.toString()}`;\n        console.log('üó∫Ô∏è Requesting directions from Google API');\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.status !== 'OK') {\n          throw new Error(`Google Directions API error: ${data.status} - ${data.error_message}`);\n        }\n        return data;\n      } catch (error) {\n        console.error('‚ùå Error fetching directions:', error);\n        // Fallback to mock data on error\n        return this.getMockDirections(origin, destination);\n      }\n    }\n\n    /**\n     * Mock directions for development/testing\n     */\n    getMockDirections(origin, destination) {\n      // Create realistic mock data based on origin/destination\n      const mockDistance = Math.random() * 15000 + 1000; // 1-16km\n      const mockDuration = mockDistance / 1000 * 3 * 60; // Approximate driving time\n\n      const originCoord = typeof origin === 'string' ? {\n        lat: -23.5505,\n        lng: -46.6333\n      } // S√£o Paulo default\n      : {\n        lat: origin.latitude,\n        lng: origin.longitude\n      };\n      const destCoord = typeof destination === 'string' ? {\n        lat: -23.5505 + (Math.random() - 0.5) * 0.1,\n        lng: -46.6333 + (Math.random() - 0.5) * 0.1\n      } : {\n        lat: destination.latitude,\n        lng: destination.longitude\n      };\n\n      // Generate a simple polyline path\n      const steps = this.generateMockSteps(originCoord, destCoord, 5);\n      return {\n        routes: [{\n          distance: {\n            text: `${(mockDistance / 1000).toFixed(1)} km`,\n            value: Math.round(mockDistance)\n          },\n          duration: {\n            text: `${Math.round(mockDuration / 60)} min`,\n            value: Math.round(mockDuration)\n          },\n          overview_polyline: {\n            points: this.encodePath([originCoord, destCoord]) // Simplified\n          },\n          legs: [{\n            distance: {\n              text: `${(mockDistance / 1000).toFixed(1)} km`,\n              value: Math.round(mockDistance)\n            },\n            duration: {\n              text: `${Math.round(mockDuration / 60)} min`,\n              value: Math.round(mockDuration)\n            },\n            start_address: 'Origem',\n            end_address: 'Destino',\n            start_location: originCoord,\n            end_location: destCoord,\n            steps: steps\n          }]\n        }],\n        status: 'OK'\n      };\n    }\n\n    /**\n     * Generate mock steps for directions\n     */\n    generateMockSteps(origin, destination, numSteps) {\n      const steps = [];\n      const latStep = (destination.lat - origin.lat) / numSteps;\n      const lngStep = (destination.lng - origin.lng) / numSteps;\n      for (let i = 0; i < numSteps; i++) {\n        const stepDistance = Math.random() * 1000 + 200; // 200m - 1.2km per step\n        const stepDuration = stepDistance / 1000 * 2 * 60; // ~2 min per km\n\n        steps.push({\n          distance: {\n            text: `${Math.round(stepDistance)}m`,\n            value: Math.round(stepDistance)\n          },\n          duration: {\n            text: `${Math.round(stepDuration / 60)} min`,\n            value: Math.round(stepDuration)\n          },\n          html_instructions: this.getMockInstruction(i, numSteps),\n          polyline: {\n            points: 'mock_polyline'\n          },\n          start_location: {\n            lat: origin.lat + latStep * i,\n            lng: origin.lng + lngStep * i\n          },\n          end_location: {\n            lat: origin.lat + latStep * (i + 1),\n            lng: origin.lng + lngStep * (i + 1)\n          },\n          maneuver: i === 0 ? 'depart' : i === numSteps - 1 ? 'arrive' : this.getRandomManeuver()\n        });\n      }\n      return steps;\n    }\n\n    /**\n     * Get mock instruction based on step\n     */\n    getMockInstruction(step, totalSteps) {\n      if (step === 0) return 'Siga pela rua principal';\n      if (step === totalSteps - 1) return 'Chegue ao destino';\n      const instructions = ['Continue em frente', 'Vire √† direita', 'Vire √† esquerda', 'Entre na rotat√≥ria', 'Saia na 2¬™ sa√≠da', 'Continue pela avenida'];\n      return instructions[Math.floor(Math.random() * instructions.length)];\n    }\n\n    /**\n     * Get random maneuver type\n     */\n    getRandomManeuver() {\n      const maneuvers = ['turn-right', 'turn-left', 'straight', 'ramp-right', 'ramp-left'];\n      return maneuvers[Math.floor(Math.random() * maneuvers.length)];\n    }\n\n    /**\n     * Simple polyline encoding (mock implementation)\n     */\n    encodePath(path) {\n      // This is a simplified mock - real implementation would use Google's polyline encoding\n      return 'mock_encoded_polyline_' + path.length;\n    }\n\n    /**\n     * Decode polyline points to coordinates\n     */\n    decodePolyline(encoded) {\n      // Mock implementation - in production you'd use Google's polyline decoding\n      if (encoded.startsWith('mock_encoded_polyline_')) {\n        const numPoints = parseInt(encoded.split('_').pop() || '2');\n        const points = [];\n        for (let i = 0; i < numPoints; i++) {\n          points.push({\n            latitude: -23.5505 + (Math.random() - 0.5) * 0.01,\n            longitude: -46.6333 + (Math.random() - 0.5) * 0.01\n          });\n        }\n        return points;\n      }\n\n      // For real polylines, implement proper decoding\n      return [];\n    }\n\n    /**\n     * Calculate estimated arrival time\n     */\n    calculateETA(durationSeconds) {\n      const now = new Date();\n      const eta = new Date(now.getTime() + durationSeconds * 1000);\n      return eta.toLocaleTimeString('pt-BR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n\n    /**\n     * Format distance for display\n     */\n    formatDistance(meters) {\n      if (meters < 1000) {\n        return `${Math.round(meters)}m`;\n      } else {\n        return `${(meters / 1000).toFixed(1)}km`;\n      }\n    }\n\n    /**\n     * Format duration for display\n     */\n    formatDuration(seconds) {\n      const minutes = Math.round(seconds / 60);\n      if (minutes < 60) {\n        return `${minutes} min`;\n      } else {\n        const hours = Math.floor(minutes / 60);\n        const remainingMinutes = minutes % 60;\n        return `${hours}h ${remainingMinutes}min`;\n      }\n    }\n  }\n  const googleDirectionsService = exports.googleDirectionsService = new GoogleDirectionsService();\n});","lineCount":254,"map":[[7,2,71,0],[7,8,71,6,"GoogleDirectionsService"],[7,31,71,29],[7,32,71,30],[8,4,72,10,"apiKey"],[8,10,72,16],[8,13,72,34],[8,17,72,38],[9,4,73,10,"baseUrl"],[9,11,73,17],[9,14,73,20],[9,68,73,74],[10,4,75,2,"constructor"],[10,15,75,13,"constructor"],[10,16,75,13],[10,18,75,16],[11,6,76,4],[12,6,77,4],[12,10,77,8],[12,11,77,9,"apiKey"],[12,17,77,15],[12,20,77,18,"_env2"],[12,25,77,18],[12,26,77,18,"env"],[12,29,77,18],[12,30,77,18,"EXPO_PUBLIC_GOOGLE_DIRECTIONS_API_KEY"],[12,67,77,18],[12,71,77,71],[12,75,77,75],[13,6,78,4,"console"],[13,13,78,11],[13,14,78,12,"log"],[13,17,78,15],[13,18,78,16],[13,59,78,57],[13,61,78,59],[13,65,78,63],[13,66,78,64,"apiKey"],[13,72,78,70],[13,75,78,73],[13,94,78,92],[13,97,78,95],[13,113,78,111],[13,114,78,112],[14,4,79,2],[15,4,81,2,"setApiKey"],[15,13,81,11,"setApiKey"],[15,14,81,12,"apiKey"],[15,20,81,26],[15,22,81,28],[16,6,82,4],[16,10,82,8],[16,11,82,9,"apiKey"],[16,17,82,15],[16,20,82,18,"apiKey"],[16,26,82,24],[17,4,83,2],[19,4,85,2],[20,0,86,0],[21,0,87,0],[22,4,88,2],[22,10,88,8,"getDirections"],[22,23,88,21,"getDirections"],[22,24,89,4,"origin"],[22,30,89,31],[22,32,90,4,"destination"],[22,43,90,36],[22,45,91,4,"waypoints"],[22,54,91,28],[22,56,92,4,"options"],[22,63,98,5],[22,65,99,33],[23,6,100,4],[23,10,100,8],[24,8,101,6],[24,12,101,10],[24,13,101,11],[24,17,101,15],[24,18,101,16,"apiKey"],[24,24,101,22],[24,26,101,24],[25,10,102,8,"console"],[25,17,102,15],[25,18,102,16,"log"],[25,21,102,19],[25,22,102,20],[25,77,102,75],[25,78,102,76],[26,10,103,8],[26,17,103,15],[26,21,103,19],[26,22,103,20,"getMockDirections"],[26,39,103,37],[26,40,103,38,"origin"],[26,46,103,44],[26,48,103,46,"destination"],[26,59,103,57],[26,60,103,58],[27,8,104,6],[28,8,106,6],[28,14,106,12,"params"],[28,20,106,18],[28,23,106,21],[28,27,106,25,"URLSearchParams"],[28,42,106,40],[28,43,106,41],[28,44,106,42],[30,8,108,6],[31,8,109,6],[31,14,109,12,"formattedOrigin"],[31,29,109,27],[31,32,109,30],[31,39,109,37,"origin"],[31,45,109,43],[31,50,109,48],[31,58,109,56],[31,61,110,10,"origin"],[31,67,110,16],[31,70,111,10],[31,73,111,13,"origin"],[31,79,111,19],[31,80,111,20,"latitude"],[31,88,111,28],[31,92,111,32,"origin"],[31,98,111,38],[31,99,111,39,"longitude"],[31,108,111,48],[31,110,111,50],[32,8,112,6],[32,14,112,12,"formattedDestination"],[32,34,112,32],[32,37,112,35],[32,44,112,42,"destination"],[32,55,112,53],[32,60,112,58],[32,68,112,66],[32,71,113,10,"destination"],[32,82,113,21],[32,85,114,10],[32,88,114,13,"destination"],[32,99,114,24],[32,100,114,25,"latitude"],[32,108,114,33],[32,112,114,37,"destination"],[32,123,114,48],[32,124,114,49,"longitude"],[32,133,114,58],[32,135,114,60],[33,8,116,6,"params"],[33,14,116,12],[33,15,116,13,"append"],[33,21,116,19],[33,22,116,20],[33,30,116,28],[33,32,116,30,"formattedOrigin"],[33,47,116,45],[33,48,116,46],[34,8,117,6,"params"],[34,14,117,12],[34,15,117,13,"append"],[34,21,117,19],[34,22,117,20],[34,35,117,33],[34,37,117,35,"formattedDestination"],[34,57,117,55],[34,58,117,56],[35,8,118,6,"params"],[35,14,118,12],[35,15,118,13,"append"],[35,21,118,19],[35,22,118,20],[35,27,118,25],[35,29,118,27],[35,33,118,31],[35,34,118,32,"apiKey"],[35,40,118,38],[35,41,118,39],[36,8,119,6,"params"],[36,14,119,12],[36,15,119,13,"append"],[36,21,119,19],[36,22,119,20],[36,28,119,26],[36,30,119,28,"options"],[36,37,119,35],[36,39,119,37,"mode"],[36,43,119,41],[36,47,119,45],[36,56,119,54],[36,57,119,55],[37,8,120,6,"params"],[37,14,120,12],[37,15,120,13,"append"],[37,21,120,19],[37,22,120,20],[37,32,120,30],[37,34,120,32],[37,41,120,39],[37,42,120,40],[38,8,121,6,"params"],[38,14,121,12],[38,15,121,13,"append"],[38,21,121,19],[38,22,121,20],[38,29,121,27],[38,31,121,29],[38,39,121,37],[38,40,121,38],[40,8,123,6],[41,8,124,6],[41,12,124,10,"waypoints"],[41,21,124,19],[41,25,124,23,"waypoints"],[41,34,124,32],[41,35,124,33,"length"],[41,41,124,39],[41,44,124,42],[41,45,124,43],[41,47,124,45],[42,10,125,8],[42,16,125,14,"waypointsStr"],[42,28,125,26],[42,31,125,29,"waypoints"],[42,40,125,38],[42,41,126,11,"map"],[42,44,126,14],[42,45,126,15,"wp"],[42,47,126,17],[42,51,126,21],[42,54,126,24,"wp"],[42,56,126,26],[42,57,126,27,"latitude"],[42,65,126,35],[42,69,126,39,"wp"],[42,71,126,41],[42,72,126,42,"longitude"],[42,81,126,51],[42,83,126,53],[42,84,126,54],[42,85,127,11,"join"],[42,89,127,15],[42,90,127,16],[42,93,127,19],[42,94,127,20],[43,10,128,8,"params"],[43,16,128,14],[43,17,128,15,"append"],[43,23,128,21],[43,24,128,22],[43,35,128,33],[43,37,128,35,"waypointsStr"],[43,49,128,47],[43,50,128,48],[44,10,130,8],[44,14,130,12,"options"],[44,21,130,19],[44,23,130,21,"optimize"],[44,31,130,29],[44,33,130,31],[45,12,131,10,"params"],[45,18,131,16],[45,19,131,17,"append"],[45,25,131,23],[45,26,131,24],[45,37,131,35],[45,39,131,37],[45,56,131,54,"waypointsStr"],[45,68,131,66],[45,70,131,68],[45,71,131,69],[46,10,132,8],[47,8,133,6],[49,8,135,6],[50,8,136,6],[50,14,136,12,"avoid"],[50,19,136,17],[50,22,136,20],[50,24,136,22],[51,8,137,6],[51,12,137,10,"options"],[51,19,137,17],[51,21,137,19,"avoidTolls"],[51,31,137,29],[51,33,137,31,"avoid"],[51,38,137,36],[51,39,137,37,"push"],[51,43,137,41],[51,44,137,42],[51,51,137,49],[51,52,137,50],[52,8,138,6],[52,12,138,10,"options"],[52,19,138,17],[52,21,138,19,"avoidHighways"],[52,34,138,32],[52,36,138,34,"avoid"],[52,41,138,39],[52,42,138,40,"push"],[52,46,138,44],[52,47,138,45],[52,57,138,55],[52,58,138,56],[53,8,139,6],[53,12,139,10,"options"],[53,19,139,17],[53,21,139,19,"avoidFerries"],[53,33,139,31],[53,35,139,33,"avoid"],[53,40,139,38],[53,41,139,39,"push"],[53,45,139,43],[53,46,139,44],[53,55,139,53],[53,56,139,54],[54,8,140,6],[54,12,140,10,"avoid"],[54,17,140,15],[54,18,140,16,"length"],[54,24,140,22],[54,27,140,25],[54,28,140,26],[54,30,140,28],[55,10,141,8,"params"],[55,16,141,14],[55,17,141,15,"append"],[55,23,141,21],[55,24,141,22],[55,31,141,29],[55,33,141,31,"avoid"],[55,38,141,36],[55,39,141,37,"join"],[55,43,141,41],[55,44,141,42],[55,47,141,45],[55,48,141,46],[55,49,141,47],[56,8,142,6],[57,8,144,6],[57,14,144,12,"url"],[57,17,144,15],[57,20,144,18],[57,23,144,21],[57,27,144,25],[57,28,144,26,"baseUrl"],[57,35,144,33],[57,39,144,37,"params"],[57,45,144,43],[57,46,144,44,"toString"],[57,54,144,52],[57,55,144,53],[57,56,144,54],[57,58,144,56],[58,8,145,6,"console"],[58,15,145,13],[58,16,145,14,"log"],[58,19,145,17],[58,20,145,18],[58,63,145,61],[58,64,145,62],[59,8,147,6],[59,14,147,12,"response"],[59,22,147,20],[59,25,147,23],[59,31,147,29,"fetch"],[59,36,147,34],[59,37,147,35,"url"],[59,40,147,38],[59,41,147,39],[60,8,148,6],[60,14,148,12,"data"],[60,18,148,16],[60,21,148,19],[60,27,148,25,"response"],[60,35,148,33],[60,36,148,34,"json"],[60,40,148,38],[60,41,148,39],[60,42,148,40],[61,8,150,6],[61,12,150,10,"data"],[61,16,150,14],[61,17,150,15,"status"],[61,23,150,21],[61,28,150,26],[61,32,150,30],[61,34,150,32],[62,10,151,8],[62,16,151,14],[62,20,151,18,"Error"],[62,25,151,23],[62,26,151,24],[62,58,151,56,"data"],[62,62,151,60],[62,63,151,61,"status"],[62,69,151,67],[62,75,151,73,"data"],[62,79,151,77],[62,80,151,78,"error_message"],[62,93,151,91],[62,95,151,93],[62,96,151,94],[63,8,152,6],[64,8,154,6],[64,15,154,13,"data"],[64,19,154,17],[65,6,155,4],[65,7,155,5],[65,8,155,6],[65,15,155,13,"error"],[65,20,155,18],[65,22,155,20],[66,8,156,6,"console"],[66,15,156,13],[66,16,156,14,"error"],[66,21,156,19],[66,22,156,20],[66,52,156,50],[66,54,156,52,"error"],[66,59,156,57],[66,60,156,58],[67,8,157,6],[68,8,158,6],[68,15,158,13],[68,19,158,17],[68,20,158,18,"getMockDirections"],[68,37,158,35],[68,38,158,36,"origin"],[68,44,158,42],[68,46,158,44,"destination"],[68,57,158,55],[68,58,158,56],[69,6,159,4],[70,4,160,2],[72,4,162,2],[73,0,163,0],[74,0,164,0],[75,4,165,10,"getMockDirections"],[75,21,165,27,"getMockDirections"],[75,22,166,4,"origin"],[75,28,166,31],[75,30,167,4,"destination"],[75,41,167,36],[75,43,168,24],[76,6,169,4],[77,6,170,4],[77,12,170,10,"mockDistance"],[77,24,170,22],[77,27,170,25,"Math"],[77,31,170,29],[77,32,170,30,"random"],[77,38,170,36],[77,39,170,37],[77,40,170,38],[77,43,170,41],[77,48,170,46],[77,51,170,49],[77,55,170,53],[77,56,170,54],[77,57,170,55],[78,6,171,4],[78,12,171,10,"mockDuration"],[78,24,171,22],[78,27,171,25,"mockDistance"],[78,39,171,37],[78,42,171,40],[78,46,171,44],[78,49,171,47],[78,50,171,48],[78,53,171,51],[78,55,171,53],[78,56,171,54],[78,57,171,55],[80,6,173,4],[80,12,173,10,"originCoord"],[80,23,173,21],[80,26,173,24],[80,33,173,31,"origin"],[80,39,173,37],[80,44,173,42],[80,52,173,50],[80,55,174,8],[81,8,174,10,"lat"],[81,11,174,13],[81,13,174,15],[81,14,174,16],[81,21,174,23],[82,8,174,25,"lng"],[82,11,174,28],[82,13,174,30],[82,14,174,31],[83,6,174,39],[83,7,174,40],[83,8,174,41],[84,6,174,41],[84,8,175,8],[85,8,175,10,"lat"],[85,11,175,13],[85,13,175,15,"origin"],[85,19,175,21],[85,20,175,22,"latitude"],[85,28,175,30],[86,8,175,32,"lng"],[86,11,175,35],[86,13,175,37,"origin"],[86,19,175,43],[86,20,175,44,"longitude"],[87,6,175,54],[87,7,175,55],[88,6,177,4],[88,12,177,10,"destCoord"],[88,21,177,19],[88,24,177,22],[88,31,177,29,"destination"],[88,42,177,40],[88,47,177,45],[88,55,177,53],[88,58,178,8],[89,8,178,10,"lat"],[89,11,178,13],[89,13,178,15],[89,14,178,16],[89,21,178,23],[89,24,178,26],[89,25,178,27,"Math"],[89,29,178,31],[89,30,178,32,"random"],[89,36,178,38],[89,37,178,39],[89,38,178,40],[89,41,178,43],[89,44,178,46],[89,48,178,50],[89,51,178,53],[90,8,178,55,"lng"],[90,11,178,58],[90,13,178,60],[90,14,178,61],[90,21,178,68],[90,24,178,71],[90,25,178,72,"Math"],[90,29,178,76],[90,30,178,77,"random"],[90,36,178,83],[90,37,178,84],[90,38,178,85],[90,41,178,88],[90,44,178,91],[90,48,178,95],[91,6,178,99],[91,7,178,100],[91,10,179,8],[92,8,179,10,"lat"],[92,11,179,13],[92,13,179,15,"destination"],[92,24,179,26],[92,25,179,27,"latitude"],[92,33,179,35],[93,8,179,37,"lng"],[93,11,179,40],[93,13,179,42,"destination"],[93,24,179,53],[93,25,179,54,"longitude"],[94,6,179,64],[94,7,179,65],[96,6,181,4],[97,6,182,4],[97,12,182,10,"steps"],[97,17,182,15],[97,20,182,18],[97,24,182,22],[97,25,182,23,"generateMockSteps"],[97,42,182,40],[97,43,182,41,"originCoord"],[97,54,182,52],[97,56,182,54,"destCoord"],[97,65,182,63],[97,67,182,65],[97,68,182,66],[97,69,182,67],[98,6,184,4],[98,13,184,11],[99,8,185,6,"routes"],[99,14,185,12],[99,16,185,14],[99,17,185,15],[100,10,186,8,"distance"],[100,18,186,16],[100,20,186,18],[101,12,187,10,"text"],[101,16,187,14],[101,18,187,16],[101,21,187,19],[101,22,187,20,"mockDistance"],[101,34,187,32],[101,37,187,35],[101,41,187,39],[101,43,187,41,"toFixed"],[101,50,187,48],[101,51,187,49],[101,52,187,50],[101,53,187,51],[101,58,187,56],[102,12,188,10,"value"],[102,17,188,15],[102,19,188,17,"Math"],[102,23,188,21],[102,24,188,22,"round"],[102,29,188,27],[102,30,188,28,"mockDistance"],[102,42,188,40],[103,10,189,8],[103,11,189,9],[104,10,190,8,"duration"],[104,18,190,16],[104,20,190,18],[105,12,191,10,"text"],[105,16,191,14],[105,18,191,16],[105,21,191,19,"Math"],[105,25,191,23],[105,26,191,24,"round"],[105,31,191,29],[105,32,191,30,"mockDuration"],[105,44,191,42],[105,47,191,45],[105,49,191,47],[105,50,191,48],[105,56,191,54],[106,12,192,10,"value"],[106,17,192,15],[106,19,192,17,"Math"],[106,23,192,21],[106,24,192,22,"round"],[106,29,192,27],[106,30,192,28,"mockDuration"],[106,42,192,40],[107,10,193,8],[107,11,193,9],[108,10,194,8,"overview_polyline"],[108,27,194,25],[108,29,194,27],[109,12,195,10,"points"],[109,18,195,16],[109,20,195,18],[109,24,195,22],[109,25,195,23,"encodePath"],[109,35,195,33],[109,36,195,34],[109,37,195,35,"originCoord"],[109,48,195,46],[109,50,195,48,"destCoord"],[109,59,195,57],[109,60,195,58],[109,61,195,59],[109,62,195,61],[110,10,196,8],[110,11,196,9],[111,10,197,8,"legs"],[111,14,197,12],[111,16,197,14],[111,17,197,15],[112,12,198,10,"distance"],[112,20,198,18],[112,22,198,20],[113,14,199,12,"text"],[113,18,199,16],[113,20,199,18],[113,23,199,21],[113,24,199,22,"mockDistance"],[113,36,199,34],[113,39,199,37],[113,43,199,41],[113,45,199,43,"toFixed"],[113,52,199,50],[113,53,199,51],[113,54,199,52],[113,55,199,53],[113,60,199,58],[114,14,200,12,"value"],[114,19,200,17],[114,21,200,19,"Math"],[114,25,200,23],[114,26,200,24,"round"],[114,31,200,29],[114,32,200,30,"mockDistance"],[114,44,200,42],[115,12,201,10],[115,13,201,11],[116,12,202,10,"duration"],[116,20,202,18],[116,22,202,20],[117,14,203,12,"text"],[117,18,203,16],[117,20,203,18],[117,23,203,21,"Math"],[117,27,203,25],[117,28,203,26,"round"],[117,33,203,31],[117,34,203,32,"mockDuration"],[117,46,203,44],[117,49,203,47],[117,51,203,49],[117,52,203,50],[117,58,203,56],[118,14,204,12,"value"],[118,19,204,17],[118,21,204,19,"Math"],[118,25,204,23],[118,26,204,24,"round"],[118,31,204,29],[118,32,204,30,"mockDuration"],[118,44,204,42],[119,12,205,10],[119,13,205,11],[120,12,206,10,"start_address"],[120,25,206,23],[120,27,206,25],[120,35,206,33],[121,12,207,10,"end_address"],[121,23,207,21],[121,25,207,23],[121,34,207,32],[122,12,208,10,"start_location"],[122,26,208,24],[122,28,208,26,"originCoord"],[122,39,208,37],[123,12,209,10,"end_location"],[123,24,209,22],[123,26,209,24,"destCoord"],[123,35,209,33],[124,12,210,10,"steps"],[124,17,210,15],[124,19,210,17,"steps"],[125,10,211,8],[125,11,211,9],[126,8,212,6],[126,9,212,7],[126,10,212,8],[127,8,213,6,"status"],[127,14,213,12],[127,16,213,14],[128,6,214,4],[128,7,214,5],[129,4,215,2],[131,4,217,2],[132,0,218,0],[133,0,219,0],[134,4,220,10,"generateMockSteps"],[134,21,220,27,"generateMockSteps"],[134,22,221,4,"origin"],[134,28,221,40],[134,30,222,4,"destination"],[134,41,222,45],[134,43,223,4,"numSteps"],[134,51,223,20],[134,53,224,4],[135,6,225,4],[135,12,225,10,"steps"],[135,17,225,15],[135,20,225,18],[135,22,225,20],[136,6,226,4],[136,12,226,10,"latStep"],[136,19,226,17],[136,22,226,20],[136,23,226,21,"destination"],[136,34,226,32],[136,35,226,33,"lat"],[136,38,226,36],[136,41,226,39,"origin"],[136,47,226,45],[136,48,226,46,"lat"],[136,51,226,49],[136,55,226,53,"numSteps"],[136,63,226,61],[137,6,227,4],[137,12,227,10,"lngStep"],[137,19,227,17],[137,22,227,20],[137,23,227,21,"destination"],[137,34,227,32],[137,35,227,33,"lng"],[137,38,227,36],[137,41,227,39,"origin"],[137,47,227,45],[137,48,227,46,"lng"],[137,51,227,49],[137,55,227,53,"numSteps"],[137,63,227,61],[138,6,229,4],[138,11,229,9],[138,15,229,13,"i"],[138,16,229,14],[138,19,229,17],[138,20,229,18],[138,22,229,20,"i"],[138,23,229,21],[138,26,229,24,"numSteps"],[138,34,229,32],[138,36,229,34,"i"],[138,37,229,35],[138,39,229,37],[138,41,229,39],[139,8,230,6],[139,14,230,12,"stepDistance"],[139,26,230,24],[139,29,230,27,"Math"],[139,33,230,31],[139,34,230,32,"random"],[139,40,230,38],[139,41,230,39],[139,42,230,40],[139,45,230,43],[139,49,230,47],[139,52,230,50],[139,55,230,53],[139,56,230,54],[139,57,230,55],[140,8,231,6],[140,14,231,12,"stepDuration"],[140,26,231,24],[140,29,231,27,"stepDistance"],[140,41,231,39],[140,44,231,42],[140,48,231,46],[140,51,231,49],[140,52,231,50],[140,55,231,53],[140,57,231,55],[140,58,231,56],[140,59,231,57],[142,8,233,6,"steps"],[142,13,233,11],[142,14,233,12,"push"],[142,18,233,16],[142,19,233,17],[143,10,234,8,"distance"],[143,18,234,16],[143,20,234,18],[144,12,235,10,"text"],[144,16,235,14],[144,18,235,16],[144,21,235,19,"Math"],[144,25,235,23],[144,26,235,24,"round"],[144,31,235,29],[144,32,235,30,"stepDistance"],[144,44,235,42],[144,45,235,43],[144,48,235,46],[145,12,236,10,"value"],[145,17,236,15],[145,19,236,17,"Math"],[145,23,236,21],[145,24,236,22,"round"],[145,29,236,27],[145,30,236,28,"stepDistance"],[145,42,236,40],[146,10,237,8],[146,11,237,9],[147,10,238,8,"duration"],[147,18,238,16],[147,20,238,18],[148,12,239,10,"text"],[148,16,239,14],[148,18,239,16],[148,21,239,19,"Math"],[148,25,239,23],[148,26,239,24,"round"],[148,31,239,29],[148,32,239,30,"stepDuration"],[148,44,239,42],[148,47,239,45],[148,49,239,47],[148,50,239,48],[148,56,239,54],[149,12,240,10,"value"],[149,17,240,15],[149,19,240,17,"Math"],[149,23,240,21],[149,24,240,22,"round"],[149,29,240,27],[149,30,240,28,"stepDuration"],[149,42,240,40],[150,10,241,8],[150,11,241,9],[151,10,242,8,"html_instructions"],[151,27,242,25],[151,29,242,27],[151,33,242,31],[151,34,242,32,"getMockInstruction"],[151,52,242,50],[151,53,242,51,"i"],[151,54,242,52],[151,56,242,54,"numSteps"],[151,64,242,62],[151,65,242,63],[152,10,243,8,"polyline"],[152,18,243,16],[152,20,243,18],[153,12,244,10,"points"],[153,18,244,16],[153,20,244,18],[154,10,245,8],[154,11,245,9],[155,10,246,8,"start_location"],[155,24,246,22],[155,26,246,24],[156,12,247,10,"lat"],[156,15,247,13],[156,17,247,15,"origin"],[156,23,247,21],[156,24,247,22,"lat"],[156,27,247,25],[156,30,247,28,"latStep"],[156,37,247,35],[156,40,247,38,"i"],[156,41,247,39],[157,12,248,10,"lng"],[157,15,248,13],[157,17,248,15,"origin"],[157,23,248,21],[157,24,248,22,"lng"],[157,27,248,25],[157,30,248,28,"lngStep"],[157,37,248,35],[157,40,248,38,"i"],[158,10,249,8],[158,11,249,9],[159,10,250,8,"end_location"],[159,22,250,20],[159,24,250,22],[160,12,251,10,"lat"],[160,15,251,13],[160,17,251,15,"origin"],[160,23,251,21],[160,24,251,22,"lat"],[160,27,251,25],[160,30,251,28,"latStep"],[160,37,251,35],[160,41,251,39,"i"],[160,42,251,40],[160,45,251,43],[160,46,251,44],[160,47,251,45],[161,12,252,10,"lng"],[161,15,252,13],[161,17,252,15,"origin"],[161,23,252,21],[161,24,252,22,"lng"],[161,27,252,25],[161,30,252,28,"lngStep"],[161,37,252,35],[161,41,252,39,"i"],[161,42,252,40],[161,45,252,43],[161,46,252,44],[162,10,253,8],[162,11,253,9],[163,10,254,8,"maneuver"],[163,18,254,16],[163,20,254,18,"i"],[163,21,254,19],[163,26,254,24],[163,27,254,25],[163,30,254,28],[163,38,254,36],[163,41,254,40,"i"],[163,42,254,41],[163,47,254,46,"numSteps"],[163,55,254,54],[163,58,254,57],[163,59,254,58],[163,62,254,61],[163,70,254,69],[163,73,254,72],[163,77,254,76],[163,78,254,77,"getRandomManeuver"],[163,95,254,94],[163,96,254,95],[164,8,255,6],[164,9,255,7],[164,10,255,8],[165,6,256,4],[166,6,258,4],[166,13,258,11,"steps"],[166,18,258,16],[167,4,259,2],[169,4,261,2],[170,0,262,0],[171,0,263,0],[172,4,264,10,"getMockInstruction"],[172,22,264,28,"getMockInstruction"],[172,23,264,29,"step"],[172,27,264,41],[172,29,264,43,"totalSteps"],[172,39,264,61],[172,41,264,71],[173,6,265,4],[173,10,265,8,"step"],[173,14,265,12],[173,19,265,17],[173,20,265,18],[173,22,265,20],[173,29,265,27],[173,54,265,52],[174,6,266,4],[174,10,266,8,"step"],[174,14,266,12],[174,19,266,17,"totalSteps"],[174,29,266,27],[174,32,266,30],[174,33,266,31],[174,35,266,33],[174,42,266,40],[174,61,266,59],[175,6,268,4],[175,12,268,10,"instructions"],[175,24,268,22],[175,27,268,25],[175,28,269,6],[175,48,269,26],[175,50,270,6],[175,66,270,22],[175,68,271,6],[175,85,271,23],[175,87,272,6],[175,107,272,26],[175,109,273,6],[175,127,273,24],[175,129,274,6],[175,152,274,29],[175,153,275,5],[176,6,277,4],[176,13,277,11,"instructions"],[176,25,277,23],[176,26,277,24,"Math"],[176,30,277,28],[176,31,277,29,"floor"],[176,36,277,34],[176,37,277,35,"Math"],[176,41,277,39],[176,42,277,40,"random"],[176,48,277,46],[176,49,277,47],[176,50,277,48],[176,53,277,51,"instructions"],[176,65,277,63],[176,66,277,64,"length"],[176,72,277,70],[176,73,277,71],[176,74,277,72],[177,4,278,2],[179,4,280,2],[180,0,281,0],[181,0,282,0],[182,4,283,10,"getRandomManeuver"],[182,21,283,27,"getRandomManeuver"],[182,22,283,27],[182,24,283,38],[183,6,284,4],[183,12,284,10,"maneuvers"],[183,21,284,19],[183,24,284,22],[183,25,284,23],[183,37,284,35],[183,39,284,37],[183,50,284,48],[183,52,284,50],[183,62,284,60],[183,64,284,62],[183,76,284,74],[183,78,284,76],[183,89,284,87],[183,90,284,88],[184,6,285,4],[184,13,285,11,"maneuvers"],[184,22,285,20],[184,23,285,21,"Math"],[184,27,285,25],[184,28,285,26,"floor"],[184,33,285,31],[184,34,285,32,"Math"],[184,38,285,36],[184,39,285,37,"random"],[184,45,285,43],[184,46,285,44],[184,47,285,45],[184,50,285,48,"maneuvers"],[184,59,285,57],[184,60,285,58,"length"],[184,66,285,64],[184,67,285,65],[184,68,285,66],[185,4,286,2],[187,4,288,2],[188,0,289,0],[189,0,290,0],[190,4,291,10,"encodePath"],[190,14,291,20,"encodePath"],[190,15,291,21,"path"],[190,19,291,62],[190,21,291,72],[191,6,292,4],[192,6,293,4],[192,13,293,11],[192,37,293,35],[192,40,293,38,"path"],[192,44,293,42],[192,45,293,43,"length"],[192,51,293,49],[193,4,294,2],[195,4,296,2],[196,0,297,0],[197,0,298,0],[198,4,299,2,"decodePolyline"],[198,18,299,16,"decodePolyline"],[198,19,299,17,"encoded"],[198,26,299,32],[198,28,299,48],[199,6,300,4],[200,6,301,4],[200,10,301,8,"encoded"],[200,17,301,15],[200,18,301,16,"startsWith"],[200,28,301,26],[200,29,301,27],[200,53,301,51],[200,54,301,52],[200,56,301,54],[201,8,302,6],[201,14,302,12,"numPoints"],[201,23,302,21],[201,26,302,24,"parseInt"],[201,34,302,32],[201,35,302,33,"encoded"],[201,42,302,40],[201,43,302,41,"split"],[201,48,302,46],[201,49,302,47],[201,52,302,50],[201,53,302,51],[201,54,302,52,"pop"],[201,57,302,55],[201,58,302,56],[201,59,302,57],[201,63,302,61],[201,66,302,64],[201,67,302,65],[202,8,303,6],[202,14,303,12,"points"],[202,20,303,32],[202,23,303,35],[202,25,303,37],[203,8,305,6],[203,13,305,11],[203,17,305,15,"i"],[203,18,305,16],[203,21,305,19],[203,22,305,20],[203,24,305,22,"i"],[203,25,305,23],[203,28,305,26,"numPoints"],[203,37,305,35],[203,39,305,37,"i"],[203,40,305,38],[203,42,305,40],[203,44,305,42],[204,10,306,8,"points"],[204,16,306,14],[204,17,306,15,"push"],[204,21,306,19],[204,22,306,20],[205,12,307,10,"latitude"],[205,20,307,18],[205,22,307,20],[205,23,307,21],[205,30,307,28],[205,33,307,31],[205,34,307,32,"Math"],[205,38,307,36],[205,39,307,37,"random"],[205,45,307,43],[205,46,307,44],[205,47,307,45],[205,50,307,48],[205,53,307,51],[205,57,307,55],[205,61,307,59],[206,12,308,10,"longitude"],[206,21,308,19],[206,23,308,21],[206,24,308,22],[206,31,308,29],[206,34,308,32],[206,35,308,33,"Math"],[206,39,308,37],[206,40,308,38,"random"],[206,46,308,44],[206,47,308,45],[206,48,308,46],[206,51,308,49],[206,54,308,52],[206,58,308,56],[207,10,309,8],[207,11,309,9],[207,12,309,10],[208,8,310,6],[209,8,312,6],[209,15,312,13,"points"],[209,21,312,19],[210,6,313,4],[212,6,315,4],[213,6,316,4],[213,13,316,11],[213,15,316,13],[214,4,317,2],[216,4,319,2],[217,0,320,0],[218,0,321,0],[219,4,322,2,"calculateETA"],[219,16,322,14,"calculateETA"],[219,17,322,15,"durationSeconds"],[219,32,322,38],[219,34,322,48],[220,6,323,4],[220,12,323,10,"now"],[220,15,323,13],[220,18,323,16],[220,22,323,20,"Date"],[220,26,323,24],[220,27,323,25],[220,28,323,26],[221,6,324,4],[221,12,324,10,"eta"],[221,15,324,13],[221,18,324,16],[221,22,324,20,"Date"],[221,26,324,24],[221,27,324,25,"now"],[221,30,324,28],[221,31,324,29,"getTime"],[221,38,324,36],[221,39,324,37],[221,40,324,38],[221,43,324,41,"durationSeconds"],[221,58,324,56],[221,61,324,59],[221,65,324,63],[221,66,324,64],[222,6,326,4],[222,13,326,11,"eta"],[222,16,326,14],[222,17,326,15,"toLocaleTimeString"],[222,35,326,33],[222,36,326,34],[222,43,326,41],[222,45,326,43],[223,8,327,6,"hour"],[223,12,327,10],[223,14,327,12],[223,23,327,21],[224,8,328,6,"minute"],[224,14,328,12],[224,16,328,14],[225,6,329,4],[225,7,329,5],[225,8,329,6],[226,4,330,2],[228,4,332,2],[229,0,333,0],[230,0,334,0],[231,4,335,2,"formatDistance"],[231,18,335,16,"formatDistance"],[231,19,335,17,"meters"],[231,25,335,31],[231,27,335,41],[232,6,336,4],[232,10,336,8,"meters"],[232,16,336,14],[232,19,336,17],[232,23,336,21],[232,25,336,23],[233,8,337,6],[233,15,337,13],[233,18,337,16,"Math"],[233,22,337,20],[233,23,337,21,"round"],[233,28,337,26],[233,29,337,27,"meters"],[233,35,337,33],[233,36,337,34],[233,39,337,37],[234,6,338,4],[234,7,338,5],[234,13,338,11],[235,8,339,6],[235,15,339,13],[235,18,339,16],[235,19,339,17,"meters"],[235,25,339,23],[235,28,339,26],[235,32,339,30],[235,34,339,32,"toFixed"],[235,41,339,39],[235,42,339,40],[235,43,339,41],[235,44,339,42],[235,48,339,46],[236,6,340,4],[237,4,341,2],[239,4,343,2],[240,0,344,0],[241,0,345,0],[242,4,346,2,"formatDuration"],[242,18,346,16,"formatDuration"],[242,19,346,17,"seconds"],[242,26,346,32],[242,28,346,42],[243,6,347,4],[243,12,347,10,"minutes"],[243,19,347,17],[243,22,347,20,"Math"],[243,26,347,24],[243,27,347,25,"round"],[243,32,347,30],[243,33,347,31,"seconds"],[243,40,347,38],[243,43,347,41],[243,45,347,43],[243,46,347,44],[244,6,348,4],[244,10,348,8,"minutes"],[244,17,348,15],[244,20,348,18],[244,22,348,20],[244,24,348,22],[245,8,349,6],[245,15,349,13],[245,18,349,16,"minutes"],[245,25,349,23],[245,31,349,29],[246,6,350,4],[246,7,350,5],[246,13,350,11],[247,8,351,6],[247,14,351,12,"hours"],[247,19,351,17],[247,22,351,20,"Math"],[247,26,351,24],[247,27,351,25,"floor"],[247,32,351,30],[247,33,351,31,"minutes"],[247,40,351,38],[247,43,351,41],[247,45,351,43],[247,46,351,44],[248,8,352,6],[248,14,352,12,"remainingMinutes"],[248,30,352,28],[248,33,352,31,"minutes"],[248,40,352,38],[248,43,352,41],[248,45,352,43],[249,8,353,6],[249,15,353,13],[249,18,353,16,"hours"],[249,23,353,21],[249,28,353,26,"remainingMinutes"],[249,44,353,42],[249,49,353,47],[250,6,354,4],[251,4,355,2],[252,2,356,0],[253,2,358,7],[253,8,358,13,"googleDirectionsService"],[253,31,358,36],[253,34,358,36,"exports"],[253,41,358,36],[253,42,358,36,"googleDirectionsService"],[253,65,358,36],[253,68,358,39],[253,72,358,43,"GoogleDirectionsService"],[253,95,358,66],[253,96,358,67],[253,97,358,68],[254,0,358,69],[254,3]],"functionMap":{"names":["<global>","GoogleDirectionsService","GoogleDirectionsService#constructor","GoogleDirectionsService#setApiKey","GoogleDirectionsService#getDirections","waypoints.map$argument_0","GoogleDirectionsService#getMockDirections","GoogleDirectionsService#generateMockSteps","GoogleDirectionsService#getMockInstruction","GoogleDirectionsService#getRandomManeuver","GoogleDirectionsService#encodePath","GoogleDirectionsService#decodePolyline","GoogleDirectionsService#calculateETA","GoogleDirectionsService#formatDistance","GoogleDirectionsService#formatDuration"],"mappings":"AAA;ACsE;ECI;GDI;EEE;GFE;EGK;eCsC,sCD;GHkC;EKK;GLkD;EMK;GNuC;EOK;GPc;EQK;GRG;ESK;GTG;EUK;GVkB;EWK;GXQ;EYK;GZM;EaK;GbS;CDC"}},"type":"js/module"}]}