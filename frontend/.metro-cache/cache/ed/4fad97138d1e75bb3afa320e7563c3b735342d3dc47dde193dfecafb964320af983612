{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../contexts/WebSocketContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":78,"index":136}}],"key":"RXtWqdqDCzQ/KmE1Xu4nrP0NWpQ=","exportNames":["*"]}},{"name":"../contexts/AuthContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":50,"index":187}}],"key":"oNCgyH4yx4pAIVZXLqqRGB2kuCY=","exportNames":["*"]}},{"name":"../services/api","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":45,"index":233}}],"key":"Pr5/EB33W7mJGi+ygccy+pUf1E8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useRealTimeService = void 0;\n  var _react = require(_dependencyMap[0], \"react\");\n  var _WebSocketContext = require(_dependencyMap[1], \"../contexts/WebSocketContext\");\n  var _AuthContext = require(_dependencyMap[2], \"../contexts/AuthContext\");\n  var _api = require(_dependencyMap[3], \"../services/api\");\n  const useRealTimeService = () => {\n    const {\n      user\n    } = (0, _AuthContext.useAuth)();\n    const {\n      isConnected,\n      onMessage,\n      sendMessage,\n      sendLocationUpdate,\n      updateProviderStatus,\n      respondToService\n    } = (0, _WebSocketContext.useWebSocket)();\n    const [activeService, setActiveService] = (0, _react.useState)(null);\n    const [incomingRequests, setIncomingRequests] = (0, _react.useState)([]);\n    const [receivedOffers, setReceivedOffers] = (0, _react.useState)([]);\n    const [isProviderOnline, setIsProviderOnline] = (0, _react.useState)(false);\n    const [nearbyProviders, setNearbyProviders] = (0, _react.useState)([]);\n\n    // Handle incoming WebSocket messages\n    (0, _react.useEffect)(() => {\n      if (!isConnected) return;\n      const unsubscribe = onMessage(message => {\n        console.log('ðŸ”” Real-time service message:', message);\n        switch (message.type) {\n          case 'new_service_request':\n            handleNewServiceRequest(message.data.service);\n            break;\n          case 'service_status_update':\n            handleServiceStatusUpdate(message.data);\n            break;\n          case 'service_offer':\n            handleServiceOffer(message.data);\n            break;\n          case 'provider_status_change':\n            handleProviderStatusChange(message.data);\n            break;\n          case 'location_update':\n            handleLocationUpdate(message.data);\n            break;\n          default:\n            console.log('Unhandled message type:', message.type);\n        }\n      });\n      return unsubscribe;\n    }, [isConnected]);\n    const handleNewServiceRequest = service => {\n      // Only show to providers\n      if (user?.role === 'provider' && isProviderOnline) {\n        setIncomingRequests(prev => {\n          // Avoid duplicates\n          if (prev.find(req => req.id === service.id)) {\n            return prev;\n          }\n          return [...prev, service];\n        });\n\n        // Auto-remove after 30 seconds if not responded\n        setTimeout(() => {\n          setIncomingRequests(prev => prev.filter(req => req.id !== service.id));\n        }, 30000);\n      }\n    };\n    const handleServiceStatusUpdate = data => {\n      const {\n        service_id,\n        status,\n        service\n      } = data;\n      if (activeService && activeService.id === service_id) {\n        setActiveService(prev => prev ? {\n          ...prev,\n          status,\n          ...service\n        } : null);\n      }\n    };\n    const handleServiceOffer = offer => {\n      // Only show to clients\n      if (user?.role === 'client') {\n        setReceivedOffers(prev => {\n          // Avoid duplicates\n          if (prev.find(o => o.id === offer.id)) {\n            return prev;\n          }\n          return [...prev, offer];\n        });\n      }\n    };\n    const handleProviderStatusChange = data => {\n      const {\n        provider_id,\n        is_online\n      } = data;\n      setNearbyProviders(prev => prev.map(provider => provider.id === provider_id ? {\n        ...provider,\n        is_online\n      } : provider));\n    };\n    const handleLocationUpdate = data => {\n      const {\n        user_id,\n        latitude,\n        longitude\n      } = data;\n\n      // Update provider location if tracking active service\n      if (activeService && activeService.provider_id === user_id) {\n        setActiveService(prev => prev ? {\n          ...prev,\n          provider_location: {\n            latitude,\n            longitude\n          }\n        } : null);\n      }\n    };\n\n    // Client functions\n    const createServiceRequest = async serviceData => {\n      try {\n        const response = await _api.apiService.post('/services/requests', serviceData);\n        const newService = response.data;\n        setActiveService(newService);\n        return newService;\n      } catch (error) {\n        console.error('Error creating service request:', error);\n        throw error;\n      }\n    };\n    const acceptOffer = async offerId => {\n      try {\n        const response = await _api.apiService.post(`/services/offers/${offerId}/accept`);\n        const acceptedService = response.data;\n        setActiveService(acceptedService);\n\n        // Clear other offers\n        setReceivedOffers([]);\n        return acceptedService;\n      } catch (error) {\n        console.error('Error accepting offer:', error);\n        throw error;\n      }\n    };\n    const cancelService = async () => {\n      if (!activeService) return;\n      try {\n        await _api.apiService.put(`/services/requests/${activeService.id}/status`, {\n          status: 'cancelled'\n        });\n        setActiveService(null);\n      } catch (error) {\n        console.error('Error cancelling service:', error);\n        throw error;\n      }\n    };\n\n    // Provider functions\n    const toggleProviderStatus = async online => {\n      try {\n        await _api.apiService.put('/providers/status', {\n          is_online: online\n        });\n        setIsProviderOnline(online);\n        updateProviderStatus(online);\n      } catch (error) {\n        console.error('Error updating provider status:', error);\n        throw error;\n      }\n    };\n    const acceptServiceRequest = async serviceId => {\n      try {\n        respondToService(serviceId, 'accept');\n\n        // Remove from incoming requests\n        setIncomingRequests(prev => prev.filter(req => req.id !== serviceId));\n\n        // Set as active service\n        const service = incomingRequests.find(req => req.id === serviceId);\n        if (service) {\n          setActiveService({\n            ...service,\n            status: 'accepted',\n            provider_id: user?.id\n          });\n        }\n      } catch (error) {\n        console.error('Error accepting service request:', error);\n        throw error;\n      }\n    };\n    const rejectServiceRequest = async serviceId => {\n      try {\n        respondToService(serviceId, 'reject');\n\n        // Remove from incoming requests\n        setIncomingRequests(prev => prev.filter(req => req.id !== serviceId));\n      } catch (error) {\n        console.error('Error rejecting service request:', error);\n        throw error;\n      }\n    };\n    const updateServiceStatus = async status => {\n      if (!activeService) return;\n      try {\n        await _api.apiService.put(`/services/requests/${activeService.id}/status`, {\n          status\n        });\n        setActiveService(prev => prev ? {\n          ...prev,\n          status\n        } : null);\n\n        // Clear active service if completed or cancelled\n        if (status === 'completed' || status === 'cancelled') {\n          setTimeout(() => setActiveService(null), 2000);\n        }\n      } catch (error) {\n        console.error('Error updating service status:', error);\n        throw error;\n      }\n    };\n\n    // Location tracking\n    const startLocationTracking = (0, _react.useCallback)(() => {\n      if (!navigator.geolocation) return;\n      const watchId = navigator.geolocation.watchPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        sendLocationUpdate(latitude, longitude);\n      }, error => {\n        console.error('Location tracking error:', error);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      });\n      return () => {\n        navigator.geolocation.clearWatch(watchId);\n      };\n    }, [sendLocationUpdate]);\n\n    // Load nearby providers for clients\n    const loadNearbyProviders = async (latitude, longitude) => {\n      try {\n        const params = new URLSearchParams();\n        if (latitude) params.append('latitude', latitude.toString());\n        if (longitude) params.append('longitude', longitude.toString());\n        const response = await _api.apiService.get(`/providers/nearby?${params.toString()}`);\n        setNearbyProviders(response.data.providers || []);\n      } catch (error) {\n        console.error('Error loading nearby providers:', error);\n      }\n    };\n    return {\n      // State\n      activeService,\n      incomingRequests,\n      receivedOffers,\n      isProviderOnline,\n      nearbyProviders,\n      isConnected,\n      // Client functions\n      createServiceRequest,\n      acceptOffer,\n      cancelService,\n      loadNearbyProviders,\n      // Provider functions\n      toggleProviderStatus,\n      acceptServiceRequest,\n      rejectServiceRequest,\n      updateServiceStatus,\n      // Location tracking\n      startLocationTracking\n    };\n  };\n  exports.useRealTimeService = useRealTimeService;\n});","lineCount":288,"map":[[6,2,1,0],[6,6,1,0,"_react"],[6,12,1,0],[6,15,1,0,"require"],[6,22,1,0],[6,23,1,0,"_dependencyMap"],[6,37,1,0],[7,2,2,0],[7,6,2,0,"_WebSocketContext"],[7,23,2,0],[7,26,2,0,"require"],[7,33,2,0],[7,34,2,0,"_dependencyMap"],[7,48,2,0],[8,2,3,0],[8,6,3,0,"_AuthContext"],[8,18,3,0],[8,21,3,0,"require"],[8,28,3,0],[8,29,3,0,"_dependencyMap"],[8,43,3,0],[9,2,4,0],[9,6,4,0,"_api"],[9,10,4,0],[9,13,4,0,"require"],[9,20,4,0],[9,21,4,0,"_dependencyMap"],[9,35,4,0],[10,2,36,7],[10,8,36,13,"useRealTimeService"],[10,26,36,31],[10,29,36,34,"useRealTimeService"],[10,30,36,34],[10,35,36,40],[11,4,37,2],[11,10,37,8],[12,6,37,10,"user"],[13,4,37,15],[13,5,37,16],[13,8,37,19],[13,12,37,19,"useAuth"],[13,32,37,26],[13,34,37,27],[13,35,37,28],[14,4,38,2],[14,10,38,8],[15,6,38,10,"isConnected"],[15,17,38,21],[16,6,38,23,"onMessage"],[16,15,38,32],[17,6,38,34,"sendMessage"],[17,17,38,45],[18,6,38,47,"sendLocationUpdate"],[18,24,38,65],[19,6,38,67,"updateProviderStatus"],[19,26,38,87],[20,6,38,89,"respondToService"],[21,4,38,106],[21,5,38,107],[21,8,38,110],[21,12,38,110,"useWebSocket"],[21,42,38,122],[21,44,38,123],[21,45,38,124],[22,4,40,2],[22,10,40,8],[22,11,40,9,"activeService"],[22,24,40,22],[22,26,40,24,"setActiveService"],[22,42,40,40],[22,43,40,41],[22,46,40,44],[22,50,40,44,"useState"],[22,65,40,52],[22,67,40,76],[22,71,40,80],[22,72,40,81],[23,4,41,2],[23,10,41,8],[23,11,41,9,"incomingRequests"],[23,27,41,25],[23,29,41,27,"setIncomingRequests"],[23,48,41,46],[23,49,41,47],[23,52,41,50],[23,56,41,50,"useState"],[23,71,41,58],[23,73,41,77],[23,75,41,79],[23,76,41,80],[24,4,42,2],[24,10,42,8],[24,11,42,9,"receivedOffers"],[24,25,42,23],[24,27,42,25,"setReceivedOffers"],[24,44,42,42],[24,45,42,43],[24,48,42,46],[24,52,42,46,"useState"],[24,67,42,54],[24,69,42,71],[24,71,42,73],[24,72,42,74],[25,4,43,2],[25,10,43,8],[25,11,43,9,"isProviderOnline"],[25,27,43,25],[25,29,43,27,"setIsProviderOnline"],[25,48,43,46],[25,49,43,47],[25,52,43,50],[25,56,43,50,"useState"],[25,71,43,58],[25,73,43,59],[25,78,43,64],[25,79,43,65],[26,4,44,2],[26,10,44,8],[26,11,44,9,"nearbyProviders"],[26,26,44,24],[26,28,44,26,"setNearbyProviders"],[26,46,44,44],[26,47,44,45],[26,50,44,48],[26,54,44,48,"useState"],[26,69,44,56],[26,71,44,64],[26,73,44,66],[26,74,44,67],[28,4,46,2],[29,4,47,2],[29,8,47,2,"useEffect"],[29,24,47,11],[29,26,47,12],[29,32,47,18],[30,6,48,4],[30,10,48,8],[30,11,48,9,"isConnected"],[30,22,48,20],[30,24,48,22],[31,6,50,4],[31,12,50,10,"unsubscribe"],[31,23,50,21],[31,26,50,24,"onMessage"],[31,35,50,33],[31,36,50,35,"message"],[31,43,50,60],[31,47,50,65],[32,8,51,6,"console"],[32,15,51,13],[32,16,51,14,"log"],[32,19,51,17],[32,20,51,18],[32,51,51,49],[32,53,51,51,"message"],[32,60,51,58],[32,61,51,59],[33,8,53,6],[33,16,53,14,"message"],[33,23,53,21],[33,24,53,22,"type"],[33,28,53,26],[34,10,54,8],[34,15,54,13],[34,36,54,34],[35,12,55,10,"handleNewServiceRequest"],[35,35,55,33],[35,36,55,34,"message"],[35,43,55,41],[35,44,55,42,"data"],[35,48,55,46],[35,49,55,47,"service"],[35,56,55,54],[35,57,55,55],[36,12,56,10],[37,10,58,8],[37,15,58,13],[37,38,58,36],[38,12,59,10,"handleServiceStatusUpdate"],[38,37,59,35],[38,38,59,36,"message"],[38,45,59,43],[38,46,59,44,"data"],[38,50,59,48],[38,51,59,49],[39,12,60,10],[40,10,62,8],[40,15,62,13],[40,30,62,28],[41,12,63,10,"handleServiceOffer"],[41,30,63,28],[41,31,63,29,"message"],[41,38,63,36],[41,39,63,37,"data"],[41,43,63,41],[41,44,63,42],[42,12,64,10],[43,10,66,8],[43,15,66,13],[43,39,66,37],[44,12,67,10,"handleProviderStatusChange"],[44,38,67,36],[44,39,67,37,"message"],[44,46,67,44],[44,47,67,45,"data"],[44,51,67,49],[44,52,67,50],[45,12,68,10],[46,10,70,8],[46,15,70,13],[46,32,70,30],[47,12,71,10,"handleLocationUpdate"],[47,32,71,30],[47,33,71,31,"message"],[47,40,71,38],[47,41,71,39,"data"],[47,45,71,43],[47,46,71,44],[48,12,72,10],[49,10,74,8],[50,12,75,10,"console"],[50,19,75,17],[50,20,75,18,"log"],[50,23,75,21],[50,24,75,22],[50,49,75,47],[50,51,75,49,"message"],[50,58,75,56],[50,59,75,57,"type"],[50,63,75,61],[50,64,75,62],[51,8,76,6],[52,6,77,4],[52,7,77,5],[52,8,77,6],[53,6,79,4],[53,13,79,11,"unsubscribe"],[53,24,79,22],[54,4,80,2],[54,5,80,3],[54,7,80,5],[54,8,80,6,"isConnected"],[54,19,80,17],[54,20,80,18],[54,21,80,19],[55,4,82,2],[55,10,82,8,"handleNewServiceRequest"],[55,33,82,31],[55,36,82,35,"service"],[55,43,82,58],[55,47,82,63],[56,6,83,4],[57,6,84,4],[57,10,84,8,"user"],[57,14,84,12],[57,16,84,14,"role"],[57,20,84,18],[57,25,84,23],[57,35,84,33],[57,39,84,37,"isProviderOnline"],[57,55,84,53],[57,57,84,55],[58,8,85,6,"setIncomingRequests"],[58,27,85,25],[58,28,85,26,"prev"],[58,32,85,30],[58,36,85,34],[59,10,86,8],[60,10,87,8],[60,14,87,12,"prev"],[60,18,87,16],[60,19,87,17,"find"],[60,23,87,21],[60,24,87,22,"req"],[60,27,87,25],[60,31,87,29,"req"],[60,34,87,32],[60,35,87,33,"id"],[60,37,87,35],[60,42,87,40,"service"],[60,49,87,47],[60,50,87,48,"id"],[60,52,87,50],[60,53,87,51],[60,55,87,53],[61,12,88,10],[61,19,88,17,"prev"],[61,23,88,21],[62,10,89,8],[63,10,90,8],[63,17,90,15],[63,18,90,16],[63,21,90,19,"prev"],[63,25,90,23],[63,27,90,25,"service"],[63,34,90,32],[63,35,90,33],[64,8,91,6],[64,9,91,7],[64,10,91,8],[66,8,93,6],[67,8,94,6,"setTimeout"],[67,18,94,16],[67,19,94,17],[67,25,94,23],[68,10,95,8,"setIncomingRequests"],[68,29,95,27],[68,30,95,28,"prev"],[68,34,95,32],[68,38,95,36,"prev"],[68,42,95,40],[68,43,95,41,"filter"],[68,49,95,47],[68,50,95,48,"req"],[68,53,95,51],[68,57,95,55,"req"],[68,60,95,58],[68,61,95,59,"id"],[68,63,95,61],[68,68,95,66,"service"],[68,75,95,73],[68,76,95,74,"id"],[68,78,95,76],[68,79,95,77],[68,80,95,78],[69,8,96,6],[69,9,96,7],[69,11,96,9],[69,16,96,14],[69,17,96,15],[70,6,97,4],[71,4,98,2],[71,5,98,3],[72,4,100,2],[72,10,100,8,"handleServiceStatusUpdate"],[72,35,100,33],[72,38,100,37,"data"],[72,42,100,46],[72,46,100,51],[73,6,101,4],[73,12,101,10],[74,8,101,12,"service_id"],[74,18,101,22],[75,8,101,24,"status"],[75,14,101,30],[76,8,101,32,"service"],[77,6,101,40],[77,7,101,41],[77,10,101,44,"data"],[77,14,101,48],[78,6,103,4],[78,10,103,8,"activeService"],[78,23,103,21],[78,27,103,25,"activeService"],[78,40,103,38],[78,41,103,39,"id"],[78,43,103,41],[78,48,103,46,"service_id"],[78,58,103,56],[78,60,103,58],[79,8,104,6,"setActiveService"],[79,24,104,22],[79,25,104,23,"prev"],[79,29,104,27],[79,33,104,31,"prev"],[79,37,104,35],[79,40,104,38],[80,10,104,40],[80,13,104,43,"prev"],[80,17,104,47],[81,10,104,49,"status"],[81,16,104,55],[82,10,104,57],[82,13,104,60,"service"],[83,8,104,68],[83,9,104,69],[83,12,104,72],[83,16,104,76],[83,17,104,77],[84,6,105,4],[85,4,106,2],[85,5,106,3],[86,4,108,2],[86,10,108,8,"handleServiceOffer"],[86,28,108,26],[86,31,108,30,"offer"],[86,36,108,49],[86,40,108,54],[87,6,109,4],[88,6,110,4],[88,10,110,8,"user"],[88,14,110,12],[88,16,110,14,"role"],[88,20,110,18],[88,25,110,23],[88,33,110,31],[88,35,110,33],[89,8,111,6,"setReceivedOffers"],[89,25,111,23],[89,26,111,24,"prev"],[89,30,111,28],[89,34,111,32],[90,10,112,8],[91,10,113,8],[91,14,113,12,"prev"],[91,18,113,16],[91,19,113,17,"find"],[91,23,113,21],[91,24,113,22,"o"],[91,25,113,23],[91,29,113,27,"o"],[91,30,113,28],[91,31,113,29,"id"],[91,33,113,31],[91,38,113,36,"offer"],[91,43,113,41],[91,44,113,42,"id"],[91,46,113,44],[91,47,113,45],[91,49,113,47],[92,12,114,10],[92,19,114,17,"prev"],[92,23,114,21],[93,10,115,8],[94,10,116,8],[94,17,116,15],[94,18,116,16],[94,21,116,19,"prev"],[94,25,116,23],[94,27,116,25,"offer"],[94,32,116,30],[94,33,116,31],[95,8,117,6],[95,9,117,7],[95,10,117,8],[96,6,118,4],[97,4,119,2],[97,5,119,3],[98,4,121,2],[98,10,121,8,"handleProviderStatusChange"],[98,36,121,34],[98,39,121,38,"data"],[98,43,121,47],[98,47,121,52],[99,6,122,4],[99,12,122,10],[100,8,122,12,"provider_id"],[100,19,122,23],[101,8,122,25,"is_online"],[102,6,122,35],[102,7,122,36],[102,10,122,39,"data"],[102,14,122,43],[103,6,124,4,"setNearbyProviders"],[103,24,124,22],[103,25,124,23,"prev"],[103,29,124,27],[103,33,125,6,"prev"],[103,37,125,10],[103,38,125,11,"map"],[103,41,125,14],[103,42,125,15,"provider"],[103,50,125,23],[103,54,126,8,"provider"],[103,62,126,16],[103,63,126,17,"id"],[103,65,126,19],[103,70,126,24,"provider_id"],[103,81,126,35],[103,84,127,12],[104,8,127,14],[104,11,127,17,"provider"],[104,19,127,25],[105,8,127,27,"is_online"],[106,6,127,37],[106,7,127,38],[106,10,128,12,"provider"],[106,18,129,6],[106,19,130,4],[106,20,130,5],[107,4,131,2],[107,5,131,3],[108,4,133,2],[108,10,133,8,"handleLocationUpdate"],[108,30,133,28],[108,33,133,32,"data"],[108,37,133,41],[108,41,133,46],[109,6,134,4],[109,12,134,10],[110,8,134,12,"user_id"],[110,15,134,19],[111,8,134,21,"latitude"],[111,16,134,29],[112,8,134,31,"longitude"],[113,6,134,41],[113,7,134,42],[113,10,134,45,"data"],[113,14,134,49],[115,6,136,4],[116,6,137,4],[116,10,137,8,"activeService"],[116,23,137,21],[116,27,137,25,"activeService"],[116,40,137,38],[116,41,137,39,"provider_id"],[116,52,137,50],[116,57,137,55,"user_id"],[116,64,137,62],[116,66,137,64],[117,8,138,6,"setActiveService"],[117,24,138,22],[117,25,138,23,"prev"],[117,29,138,27],[117,33,138,31,"prev"],[117,37,138,35],[117,40,138,38],[118,10,139,8],[118,13,139,11,"prev"],[118,17,139,15],[119,10,140,8,"provider_location"],[119,27,140,25],[119,29,140,27],[120,12,140,29,"latitude"],[120,20,140,37],[121,12,140,39,"longitude"],[122,10,140,49],[123,8,141,6],[123,9,141,7],[123,12,141,10],[123,16,141,14],[123,17,141,15],[124,6,142,4],[125,4,143,2],[125,5,143,3],[127,4,145,2],[128,4,146,2],[128,10,146,8,"createServiceRequest"],[128,30,146,28],[128,33,146,31],[128,39,146,38,"serviceData"],[128,50,150,3],[128,54,150,8],[129,6,151,4],[129,10,151,8],[130,8,152,6],[130,14,152,12,"response"],[130,22,152,20],[130,25,152,23],[130,31,152,29,"apiService"],[130,46,152,39],[130,47,152,40,"post"],[130,51,152,44],[130,52,152,45],[130,72,152,65],[130,74,152,67,"serviceData"],[130,85,152,78],[130,86,152,79],[131,8,153,6],[131,14,153,12,"newService"],[131,24,153,22],[131,27,153,25,"response"],[131,35,153,33],[131,36,153,34,"data"],[131,40,153,38],[132,8,154,6,"setActiveService"],[132,24,154,22],[132,25,154,23,"newService"],[132,35,154,33],[132,36,154,34],[133,8,155,6],[133,15,155,13,"newService"],[133,25,155,23],[134,6,156,4],[134,7,156,5],[134,8,156,6],[134,15,156,13,"error"],[134,20,156,18],[134,22,156,20],[135,8,157,6,"console"],[135,15,157,13],[135,16,157,14,"error"],[135,21,157,19],[135,22,157,20],[135,55,157,53],[135,57,157,55,"error"],[135,62,157,60],[135,63,157,61],[136,8,158,6],[136,14,158,12,"error"],[136,19,158,17],[137,6,159,4],[138,4,160,2],[138,5,160,3],[139,4,162,2],[139,10,162,8,"acceptOffer"],[139,21,162,19],[139,24,162,22],[139,30,162,29,"offerId"],[139,37,162,44],[139,41,162,49],[140,6,163,4],[140,10,163,8],[141,8,164,6],[141,14,164,12,"response"],[141,22,164,20],[141,25,164,23],[141,31,164,29,"apiService"],[141,46,164,39],[141,47,164,40,"post"],[141,51,164,44],[141,52,164,45],[141,72,164,65,"offerId"],[141,79,164,72],[141,88,164,81],[141,89,164,82],[142,8,165,6],[142,14,165,12,"acceptedService"],[142,29,165,27],[142,32,165,30,"response"],[142,40,165,38],[142,41,165,39,"data"],[142,45,165,43],[143,8,166,6,"setActiveService"],[143,24,166,22],[143,25,166,23,"acceptedService"],[143,40,166,38],[143,41,166,39],[145,8,168,6],[146,8,169,6,"setReceivedOffers"],[146,25,169,23],[146,26,169,24],[146,28,169,26],[146,29,169,27],[147,8,171,6],[147,15,171,13,"acceptedService"],[147,30,171,28],[148,6,172,4],[148,7,172,5],[148,8,172,6],[148,15,172,13,"error"],[148,20,172,18],[148,22,172,20],[149,8,173,6,"console"],[149,15,173,13],[149,16,173,14,"error"],[149,21,173,19],[149,22,173,20],[149,46,173,44],[149,48,173,46,"error"],[149,53,173,51],[149,54,173,52],[150,8,174,6],[150,14,174,12,"error"],[150,19,174,17],[151,6,175,4],[152,4,176,2],[152,5,176,3],[153,4,178,2],[153,10,178,8,"cancelService"],[153,23,178,21],[153,26,178,24],[153,32,178,24,"cancelService"],[153,33,178,24],[153,38,178,36],[154,6,179,4],[154,10,179,8],[154,11,179,9,"activeService"],[154,24,179,22],[154,26,179,24],[155,6,181,4],[155,10,181,8],[156,8,182,6],[156,14,182,12,"apiService"],[156,29,182,22],[156,30,182,23,"put"],[156,33,182,26],[156,34,182,27],[156,56,182,49,"activeService"],[156,69,182,62],[156,70,182,63,"id"],[156,72,182,65],[156,81,182,74],[156,83,182,76],[157,10,183,8,"status"],[157,16,183,14],[157,18,183,16],[158,8,184,6],[158,9,184,7],[158,10,184,8],[159,8,186,6,"setActiveService"],[159,24,186,22],[159,25,186,23],[159,29,186,27],[159,30,186,28],[160,6,187,4],[160,7,187,5],[160,8,187,6],[160,15,187,13,"error"],[160,20,187,18],[160,22,187,20],[161,8,188,6,"console"],[161,15,188,13],[161,16,188,14,"error"],[161,21,188,19],[161,22,188,20],[161,49,188,47],[161,51,188,49,"error"],[161,56,188,54],[161,57,188,55],[162,8,189,6],[162,14,189,12,"error"],[162,19,189,17],[163,6,190,4],[164,4,191,2],[164,5,191,3],[166,4,193,2],[167,4,194,2],[167,10,194,8,"toggleProviderStatus"],[167,30,194,28],[167,33,194,31],[167,39,194,38,"online"],[167,45,194,53],[167,49,194,58],[168,6,195,4],[168,10,195,8],[169,8,196,6],[169,14,196,12,"apiService"],[169,29,196,22],[169,30,196,23,"put"],[169,33,196,26],[169,34,196,27],[169,53,196,46],[169,55,196,48],[170,10,196,50,"is_online"],[170,19,196,59],[170,21,196,61,"online"],[171,8,196,68],[171,9,196,69],[171,10,196,70],[172,8,197,6,"setIsProviderOnline"],[172,27,197,25],[172,28,197,26,"online"],[172,34,197,32],[172,35,197,33],[173,8,198,6,"updateProviderStatus"],[173,28,198,26],[173,29,198,27,"online"],[173,35,198,33],[173,36,198,34],[174,6,199,4],[174,7,199,5],[174,8,199,6],[174,15,199,13,"error"],[174,20,199,18],[174,22,199,20],[175,8,200,6,"console"],[175,15,200,13],[175,16,200,14,"error"],[175,21,200,19],[175,22,200,20],[175,55,200,53],[175,57,200,55,"error"],[175,62,200,60],[175,63,200,61],[176,8,201,6],[176,14,201,12,"error"],[176,19,201,17],[177,6,202,4],[178,4,203,2],[178,5,203,3],[179,4,205,2],[179,10,205,8,"acceptServiceRequest"],[179,30,205,28],[179,33,205,31],[179,39,205,38,"serviceId"],[179,48,205,55],[179,52,205,60],[180,6,206,4],[180,10,206,8],[181,8,207,6,"respondToService"],[181,24,207,22],[181,25,207,23,"serviceId"],[181,34,207,32],[181,36,207,34],[181,44,207,42],[181,45,207,43],[183,8,209,6],[184,8,210,6,"setIncomingRequests"],[184,27,210,25],[184,28,210,26,"prev"],[184,32,210,30],[184,36,210,34,"prev"],[184,40,210,38],[184,41,210,39,"filter"],[184,47,210,45],[184,48,210,46,"req"],[184,51,210,49],[184,55,210,53,"req"],[184,58,210,56],[184,59,210,57,"id"],[184,61,210,59],[184,66,210,64,"serviceId"],[184,75,210,73],[184,76,210,74],[184,77,210,75],[186,8,212,6],[187,8,213,6],[187,14,213,12,"service"],[187,21,213,19],[187,24,213,22,"incomingRequests"],[187,40,213,38],[187,41,213,39,"find"],[187,45,213,43],[187,46,213,44,"req"],[187,49,213,47],[187,53,213,51,"req"],[187,56,213,54],[187,57,213,55,"id"],[187,59,213,57],[187,64,213,62,"serviceId"],[187,73,213,71],[187,74,213,72],[188,8,214,6],[188,12,214,10,"service"],[188,19,214,17],[188,21,214,19],[189,10,215,8,"setActiveService"],[189,26,215,24],[189,27,215,25],[190,12,215,27],[190,15,215,30,"service"],[190,22,215,37],[191,12,215,39,"status"],[191,18,215,45],[191,20,215,47],[191,30,215,57],[192,12,215,59,"provider_id"],[192,23,215,70],[192,25,215,72,"user"],[192,29,215,76],[192,31,215,78,"id"],[193,10,215,81],[193,11,215,82],[193,12,215,83],[194,8,216,6],[195,6,217,4],[195,7,217,5],[195,8,217,6],[195,15,217,13,"error"],[195,20,217,18],[195,22,217,20],[196,8,218,6,"console"],[196,15,218,13],[196,16,218,14,"error"],[196,21,218,19],[196,22,218,20],[196,56,218,54],[196,58,218,56,"error"],[196,63,218,61],[196,64,218,62],[197,8,219,6],[197,14,219,12,"error"],[197,19,219,17],[198,6,220,4],[199,4,221,2],[199,5,221,3],[200,4,223,2],[200,10,223,8,"rejectServiceRequest"],[200,30,223,28],[200,33,223,31],[200,39,223,38,"serviceId"],[200,48,223,55],[200,52,223,60],[201,6,224,4],[201,10,224,8],[202,8,225,6,"respondToService"],[202,24,225,22],[202,25,225,23,"serviceId"],[202,34,225,32],[202,36,225,34],[202,44,225,42],[202,45,225,43],[204,8,227,6],[205,8,228,6,"setIncomingRequests"],[205,27,228,25],[205,28,228,26,"prev"],[205,32,228,30],[205,36,228,34,"prev"],[205,40,228,38],[205,41,228,39,"filter"],[205,47,228,45],[205,48,228,46,"req"],[205,51,228,49],[205,55,228,53,"req"],[205,58,228,56],[205,59,228,57,"id"],[205,61,228,59],[205,66,228,64,"serviceId"],[205,75,228,73],[205,76,228,74],[205,77,228,75],[206,6,229,4],[206,7,229,5],[206,8,229,6],[206,15,229,13,"error"],[206,20,229,18],[206,22,229,20],[207,8,230,6,"console"],[207,15,230,13],[207,16,230,14,"error"],[207,21,230,19],[207,22,230,20],[207,56,230,54],[207,58,230,56,"error"],[207,63,230,61],[207,64,230,62],[208,8,231,6],[208,14,231,12,"error"],[208,19,231,17],[209,6,232,4],[210,4,233,2],[210,5,233,3],[211,4,235,2],[211,10,235,8,"updateServiceStatus"],[211,29,235,27],[211,32,235,30],[211,38,235,37,"status"],[211,44,235,69],[211,48,235,74],[212,6,236,4],[212,10,236,8],[212,11,236,9,"activeService"],[212,24,236,22],[212,26,236,24],[213,6,238,4],[213,10,238,8],[214,8,239,6],[214,14,239,12,"apiService"],[214,29,239,22],[214,30,239,23,"put"],[214,33,239,26],[214,34,239,27],[214,56,239,49,"activeService"],[214,69,239,62],[214,70,239,63,"id"],[214,72,239,65],[214,81,239,74],[214,83,239,76],[215,10,239,78,"status"],[216,8,239,85],[216,9,239,86],[216,10,239,87],[217,8,241,6,"setActiveService"],[217,24,241,22],[217,25,241,23,"prev"],[217,29,241,27],[217,33,241,31,"prev"],[217,37,241,35],[217,40,241,38],[218,10,241,40],[218,13,241,43,"prev"],[218,17,241,47],[219,10,241,49,"status"],[220,8,241,56],[220,9,241,57],[220,12,241,60],[220,16,241,64],[220,17,241,65],[222,8,243,6],[223,8,244,6],[223,12,244,10,"status"],[223,18,244,16],[223,23,244,21],[223,34,244,32],[223,38,244,36,"status"],[223,44,244,42],[223,49,244,47],[223,60,244,58],[223,62,244,60],[224,10,245,8,"setTimeout"],[224,20,245,18],[224,21,245,19],[224,27,245,25,"setActiveService"],[224,43,245,41],[224,44,245,42],[224,48,245,46],[224,49,245,47],[224,51,245,49],[224,55,245,53],[224,56,245,54],[225,8,246,6],[226,6,247,4],[226,7,247,5],[226,8,247,6],[226,15,247,13,"error"],[226,20,247,18],[226,22,247,20],[227,8,248,6,"console"],[227,15,248,13],[227,16,248,14,"error"],[227,21,248,19],[227,22,248,20],[227,54,248,52],[227,56,248,54,"error"],[227,61,248,59],[227,62,248,60],[228,8,249,6],[228,14,249,12,"error"],[228,19,249,17],[229,6,250,4],[230,4,251,2],[230,5,251,3],[232,4,253,2],[233,4,254,2],[233,10,254,8,"startLocationTracking"],[233,31,254,29],[233,34,254,32],[233,38,254,32,"useCallback"],[233,56,254,43],[233,58,254,44],[233,64,254,50],[234,6,255,4],[234,10,255,8],[234,11,255,9,"navigator"],[234,20,255,18],[234,21,255,19,"geolocation"],[234,32,255,30],[234,34,255,32],[235,6,257,4],[235,12,257,10,"watchId"],[235,19,257,17],[235,22,257,20,"navigator"],[235,31,257,29],[235,32,257,30,"geolocation"],[235,43,257,41],[235,44,257,42,"watchPosition"],[235,57,257,55],[235,58,258,7,"position"],[235,66,258,15],[235,70,258,20],[236,8,259,8],[236,14,259,14],[237,10,259,16,"latitude"],[237,18,259,24],[238,10,259,26,"longitude"],[239,8,259,36],[239,9,259,37],[239,12,259,40,"position"],[239,20,259,48],[239,21,259,49,"coords"],[239,27,259,55],[240,8,260,8,"sendLocationUpdate"],[240,26,260,26],[240,27,260,27,"latitude"],[240,35,260,35],[240,37,260,37,"longitude"],[240,46,260,46],[240,47,260,47],[241,6,261,6],[241,7,261,7],[241,9,262,7,"error"],[241,14,262,12],[241,18,262,17],[242,8,263,8,"console"],[242,15,263,15],[242,16,263,16,"error"],[242,21,263,21],[242,22,263,22],[242,48,263,48],[242,50,263,50,"error"],[242,55,263,55],[242,56,263,56],[243,6,264,6],[243,7,264,7],[243,9,265,6],[244,8,266,8,"enableHighAccuracy"],[244,26,266,26],[244,28,266,28],[244,32,266,32],[245,8,267,8,"timeout"],[245,15,267,15],[245,17,267,17],[245,22,267,22],[246,8,268,8,"maximumAge"],[246,18,268,18],[246,20,268,20],[247,6,269,6],[247,7,270,4],[247,8,270,5],[248,6,272,4],[248,13,272,11],[248,19,272,17],[249,8,273,6,"navigator"],[249,17,273,15],[249,18,273,16,"geolocation"],[249,29,273,27],[249,30,273,28,"clearWatch"],[249,40,273,38],[249,41,273,39,"watchId"],[249,48,273,46],[249,49,273,47],[250,6,274,4],[250,7,274,5],[251,4,275,2],[251,5,275,3],[251,7,275,5],[251,8,275,6,"sendLocationUpdate"],[251,26,275,24],[251,27,275,25],[251,28,275,26],[253,4,277,2],[254,4,278,2],[254,10,278,8,"loadNearbyProviders"],[254,29,278,27],[254,32,278,30],[254,38,278,30,"loadNearbyProviders"],[254,39,278,37,"latitude"],[254,47,278,54],[254,49,278,56,"longitude"],[254,58,278,74],[254,63,278,79],[255,6,279,4],[255,10,279,8],[256,8,280,6],[256,14,280,12,"params"],[256,20,280,18],[256,23,280,21],[256,27,280,25,"URLSearchParams"],[256,42,280,40],[256,43,280,41],[256,44,280,42],[257,8,281,6],[257,12,281,10,"latitude"],[257,20,281,18],[257,22,281,20,"params"],[257,28,281,26],[257,29,281,27,"append"],[257,35,281,33],[257,36,281,34],[257,46,281,44],[257,48,281,46,"latitude"],[257,56,281,54],[257,57,281,55,"toString"],[257,65,281,63],[257,66,281,64],[257,67,281,65],[257,68,281,66],[258,8,282,6],[258,12,282,10,"longitude"],[258,21,282,19],[258,23,282,21,"params"],[258,29,282,27],[258,30,282,28,"append"],[258,36,282,34],[258,37,282,35],[258,48,282,46],[258,50,282,48,"longitude"],[258,59,282,57],[258,60,282,58,"toString"],[258,68,282,66],[258,69,282,67],[258,70,282,68],[258,71,282,69],[259,8,284,6],[259,14,284,12,"response"],[259,22,284,20],[259,25,284,23],[259,31,284,29,"apiService"],[259,46,284,39],[259,47,284,40,"get"],[259,50,284,43],[259,51,284,44],[259,72,284,65,"params"],[259,78,284,71],[259,79,284,72,"toString"],[259,87,284,80],[259,88,284,81],[259,89,284,82],[259,91,284,84],[259,92,284,85],[260,8,285,6,"setNearbyProviders"],[260,26,285,24],[260,27,285,25,"response"],[260,35,285,33],[260,36,285,34,"data"],[260,40,285,38],[260,41,285,39,"providers"],[260,50,285,48],[260,54,285,52],[260,56,285,54],[260,57,285,55],[261,6,286,4],[261,7,286,5],[261,8,286,6],[261,15,286,13,"error"],[261,20,286,18],[261,22,286,20],[262,8,287,6,"console"],[262,15,287,13],[262,16,287,14,"error"],[262,21,287,19],[262,22,287,20],[262,55,287,53],[262,57,287,55,"error"],[262,62,287,60],[262,63,287,61],[263,6,288,4],[264,4,289,2],[264,5,289,3],[265,4,291,2],[265,11,291,9],[266,6,292,4],[267,6,293,4,"activeService"],[267,19,293,17],[268,6,294,4,"incomingRequests"],[268,22,294,20],[269,6,295,4,"receivedOffers"],[269,20,295,18],[270,6,296,4,"isProviderOnline"],[270,22,296,20],[271,6,297,4,"nearbyProviders"],[271,21,297,19],[272,6,298,4,"isConnected"],[272,17,298,15],[273,6,300,4],[274,6,301,4,"createServiceRequest"],[274,26,301,24],[275,6,302,4,"acceptOffer"],[275,17,302,15],[276,6,303,4,"cancelService"],[276,19,303,17],[277,6,304,4,"loadNearbyProviders"],[277,25,304,23],[278,6,306,4],[279,6,307,4,"toggleProviderStatus"],[279,26,307,24],[280,6,308,4,"acceptServiceRequest"],[280,26,308,24],[281,6,309,4,"rejectServiceRequest"],[281,26,309,24],[282,6,310,4,"updateServiceStatus"],[282,25,310,23],[283,6,312,4],[284,6,313,4,"startLocationTracking"],[285,4,314,2],[285,5,314,3],[286,2,315,0],[286,3,315,1],[287,2,315,2,"exports"],[287,9,315,2],[287,10,315,2,"useRealTimeService"],[287,28,315,2],[287,31,315,2,"useRealTimeService"],[287,49,315,2],[288,0,315,2],[288,3]],"functionMap":{"names":["<global>","useRealTimeService","useEffect$argument_0","onMessage$argument_0","handleNewServiceRequest","setIncomingRequests$argument_0","prev.find$argument_0","setTimeout$argument_0","prev.filter$argument_0","handleServiceStatusUpdate","setActiveService$argument_0","handleServiceOffer","setReceivedOffers$argument_0","handleProviderStatusChange","setNearbyProviders$argument_0","prev.map$argument_0","handleLocationUpdate","createServiceRequest","acceptOffer","cancelService","toggleProviderStatus","acceptServiceRequest","incomingRequests.find$argument_0","rejectServiceRequest","updateServiceStatus","startLocationTracking","navigator.geolocation.watchPosition$argument_0","navigator.geolocation.watchPosition$argument_1","<anonymous>","loadNearbyProviders"],"mappings":"AAA;kCCmC;YCW;kCCG;KD2B;GDG;kCGE;0BCG;sBCE,4BD;ODI;iBGG;4BFC,oBG,4BH,CE;OHC;GHE;oCQE;uBCI,qDD;GRE;6BUE;wBCG;sBNE,sBM;ODI;GVE;qCYE;uBCG;eCC;oBDG;ODC;GZE;+BeE;uBNK;cMG;GfE;+BgBG;GhBc;sBiBE;GjBc;wBkBE;GlBa;+BmBG;GnBS;+BoBE;0BhBK,oBG,2BH,CgB;4CCG,2BD;GpBQ;+BsBE;0BlBK,oBG,2BH,CkB;GtBK;8BuBE;uBdM,yCc;mBjBI,4BiB;GvBM;4CwBG;MCI;ODG;MEC;OFE;WGQ;KHE;GxBC;8B4BG;G5BW;CD0B"}},"type":"js/module"}]}