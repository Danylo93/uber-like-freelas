{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":35,"index":50}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var StreamReader = function () {\n    this._queue = [];\n    this._queueSize = 0;\n    this._offset = 0;\n  };\n  StreamReader.prototype.put = function (buffer) {\n    if (!buffer || buffer.length === 0) return;\n    if (!Buffer.isBuffer(buffer)) buffer = Buffer.from(buffer);\n    this._queue.push(buffer);\n    this._queueSize += buffer.length;\n  };\n  StreamReader.prototype.read = function (length) {\n    if (length > this._queueSize) return null;\n    if (length === 0) return Buffer.alloc(0);\n    this._queueSize -= length;\n    var queue = this._queue,\n      remain = length,\n      first = queue[0],\n      buffers,\n      buffer;\n    if (first.length >= length) {\n      if (first.length === length) {\n        return queue.shift();\n      } else {\n        buffer = first.slice(0, length);\n        queue[0] = first.slice(length);\n        return buffer;\n      }\n    }\n    for (var i = 0, n = queue.length; i < n; i++) {\n      if (remain < queue[i].length) break;\n      remain -= queue[i].length;\n    }\n    buffers = queue.splice(0, i);\n    if (remain > 0 && queue.length > 0) {\n      buffers.push(queue[0].slice(0, remain));\n      queue[0] = queue[0].slice(remain);\n    }\n    return Buffer.concat(buffers, length);\n  };\n  StreamReader.prototype.eachByte = function (callback, context) {\n    var buffer, n, index;\n    while (this._queue.length > 0) {\n      buffer = this._queue[0];\n      n = buffer.length;\n      while (this._offset < n) {\n        index = this._offset;\n        this._offset += 1;\n        callback.call(context, buffer[index]);\n      }\n      this._offset = 0;\n      this._queue.shift();\n    }\n  };\n  module.exports = StreamReader;\n});","lineCount":60,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"Buffer"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,55,3,34],[4,56,3,35],[4,57,3,36,"Buffer"],[4,63,3,42],[5,2,5,0],[5,6,5,4,"StreamReader"],[5,18,5,16],[5,21,5,19],[5,30,5,19,"StreamReader"],[5,31,5,19],[5,33,5,30],[6,4,6,2],[6,8,6,6],[6,9,6,7,"_queue"],[6,15,6,13],[6,18,6,20],[6,20,6,22],[7,4,7,2],[7,8,7,6],[7,9,7,7,"_queueSize"],[7,19,7,17],[7,22,7,20],[7,23,7,21],[8,4,8,2],[8,8,8,6],[8,9,8,7,"_offset"],[8,16,8,14],[8,19,8,20],[8,20,8,21],[9,2,9,0],[9,3,9,1],[10,2,11,0,"StreamReader"],[10,14,11,12],[10,15,11,13,"prototype"],[10,24,11,22],[10,25,11,23,"put"],[10,28,11,26],[10,31,11,29],[10,41,11,38,"buffer"],[10,47,11,44],[10,49,11,46],[11,4,12,2],[11,8,12,6],[11,9,12,7,"buffer"],[11,15,12,13],[11,19,12,17,"buffer"],[11,25,12,23],[11,26,12,24,"length"],[11,32,12,30],[11,37,12,35],[11,38,12,36],[11,40,12,38],[12,4,13,2],[12,8,13,6],[12,9,13,7,"Buffer"],[12,15,13,13],[12,16,13,14,"isBuffer"],[12,24,13,22],[12,25,13,23,"buffer"],[12,31,13,29],[12,32,13,30],[12,34,13,32,"buffer"],[12,40,13,38],[12,43,13,41,"Buffer"],[12,49,13,47],[12,50,13,48,"from"],[12,54,13,52],[12,55,13,53,"buffer"],[12,61,13,59],[12,62,13,60],[13,4,14,2],[13,8,14,6],[13,9,14,7,"_queue"],[13,15,14,13],[13,16,14,14,"push"],[13,20,14,18],[13,21,14,19,"buffer"],[13,27,14,25],[13,28,14,26],[14,4,15,2],[14,8,15,6],[14,9,15,7,"_queueSize"],[14,19,15,17],[14,23,15,21,"buffer"],[14,29,15,27],[14,30,15,28,"length"],[14,36,15,34],[15,2,16,0],[15,3,16,1],[16,2,18,0,"StreamReader"],[16,14,18,12],[16,15,18,13,"prototype"],[16,24,18,22],[16,25,18,23,"read"],[16,29,18,27],[16,32,18,30],[16,42,18,39,"length"],[16,48,18,45],[16,50,18,47],[17,4,19,2],[17,8,19,6,"length"],[17,14,19,12],[17,17,19,15],[17,21,19,19],[17,22,19,20,"_queueSize"],[17,32,19,30],[17,34,19,32],[17,41,19,39],[17,45,19,43],[18,4,20,2],[18,8,20,6,"length"],[18,14,20,12],[18,19,20,17],[18,20,20,18],[18,22,20,20],[18,29,20,27,"Buffer"],[18,35,20,33],[18,36,20,34,"alloc"],[18,41,20,39],[18,42,20,40],[18,43,20,41],[18,44,20,42],[19,4,22,2],[19,8,22,6],[19,9,22,7,"_queueSize"],[19,19,22,17],[19,23,22,21,"length"],[19,29,22,27],[20,4,24,2],[20,8,24,6,"queue"],[20,13,24,11],[20,16,24,15],[20,20,24,19],[20,21,24,20,"_queue"],[20,27,24,26],[21,6,25,6,"remain"],[21,12,25,12],[21,15,25,15,"length"],[21,21,25,21],[22,6,26,6,"first"],[22,11,26,11],[22,14,26,15,"queue"],[22,19,26,20],[22,20,26,21],[22,21,26,22],[22,22,26,23],[23,6,27,6,"buffers"],[23,13,27,13],[24,6,27,15,"buffer"],[24,12,27,21],[25,4,29,2],[25,8,29,6,"first"],[25,13,29,11],[25,14,29,12,"length"],[25,20,29,18],[25,24,29,22,"length"],[25,30,29,28],[25,32,29,30],[26,6,30,4],[26,10,30,8,"first"],[26,15,30,13],[26,16,30,14,"length"],[26,22,30,20],[26,27,30,25,"length"],[26,33,30,31],[26,35,30,33],[27,8,31,6],[27,15,31,13,"queue"],[27,20,31,18],[27,21,31,19,"shift"],[27,26,31,24],[27,27,31,25],[27,28,31,26],[28,6,32,4],[28,7,32,5],[28,13,32,11],[29,8,33,6,"buffer"],[29,14,33,12],[29,17,33,15,"first"],[29,22,33,20],[29,23,33,21,"slice"],[29,28,33,26],[29,29,33,27],[29,30,33,28],[29,32,33,30,"length"],[29,38,33,36],[29,39,33,37],[30,8,34,6,"queue"],[30,13,34,11],[30,14,34,12],[30,15,34,13],[30,16,34,14],[30,19,34,17,"first"],[30,24,34,22],[30,25,34,23,"slice"],[30,30,34,28],[30,31,34,29,"length"],[30,37,34,35],[30,38,34,36],[31,8,35,6],[31,15,35,13,"buffer"],[31,21,35,19],[32,6,36,4],[33,4,37,2],[34,4,39,2],[34,9,39,7],[34,13,39,11,"i"],[34,14,39,12],[34,17,39,15],[34,18,39,16],[34,20,39,18,"n"],[34,21,39,19],[34,24,39,22,"queue"],[34,29,39,27],[34,30,39,28,"length"],[34,36,39,34],[34,38,39,36,"i"],[34,39,39,37],[34,42,39,40,"n"],[34,43,39,41],[34,45,39,43,"i"],[34,46,39,44],[34,48,39,46],[34,50,39,48],[35,6,40,4],[35,10,40,8,"remain"],[35,16,40,14],[35,19,40,17,"queue"],[35,24,40,22],[35,25,40,23,"i"],[35,26,40,24],[35,27,40,25],[35,28,40,26,"length"],[35,34,40,32],[35,36,40,34],[36,6,41,4,"remain"],[36,12,41,10],[36,16,41,14,"queue"],[36,21,41,19],[36,22,41,20,"i"],[36,23,41,21],[36,24,41,22],[36,25,41,23,"length"],[36,31,41,29],[37,4,42,2],[38,4,43,2,"buffers"],[38,11,43,9],[38,14,43,12,"queue"],[38,19,43,17],[38,20,43,18,"splice"],[38,26,43,24],[38,27,43,25],[38,28,43,26],[38,30,43,28,"i"],[38,31,43,29],[38,32,43,30],[39,4,45,2],[39,8,45,6,"remain"],[39,14,45,12],[39,17,45,15],[39,18,45,16],[39,22,45,20,"queue"],[39,27,45,25],[39,28,45,26,"length"],[39,34,45,32],[39,37,45,35],[39,38,45,36],[39,40,45,38],[40,6,46,4,"buffers"],[40,13,46,11],[40,14,46,12,"push"],[40,18,46,16],[40,19,46,17,"queue"],[40,24,46,22],[40,25,46,23],[40,26,46,24],[40,27,46,25],[40,28,46,26,"slice"],[40,33,46,31],[40,34,46,32],[40,35,46,33],[40,37,46,35,"remain"],[40,43,46,41],[40,44,46,42],[40,45,46,43],[41,6,47,4,"queue"],[41,11,47,9],[41,12,47,10],[41,13,47,11],[41,14,47,12],[41,17,47,15,"queue"],[41,22,47,20],[41,23,47,21],[41,24,47,22],[41,25,47,23],[41,26,47,24,"slice"],[41,31,47,29],[41,32,47,30,"remain"],[41,38,47,36],[41,39,47,37],[42,4,48,2],[43,4,49,2],[43,11,49,9,"Buffer"],[43,17,49,15],[43,18,49,16,"concat"],[43,24,49,22],[43,25,49,23,"buffers"],[43,32,49,30],[43,34,49,32,"length"],[43,40,49,38],[43,41,49,39],[44,2,50,0],[44,3,50,1],[45,2,52,0,"StreamReader"],[45,14,52,12],[45,15,52,13,"prototype"],[45,24,52,22],[45,25,52,23,"eachByte"],[45,33,52,31],[45,36,52,34],[45,46,52,43,"callback"],[45,54,52,51],[45,56,52,53,"context"],[45,63,52,60],[45,65,52,62],[46,4,53,2],[46,8,53,6,"buffer"],[46,14,53,12],[46,16,53,14,"n"],[46,17,53,15],[46,19,53,17,"index"],[46,24,53,22],[47,4,55,2],[47,11,55,9],[47,15,55,13],[47,16,55,14,"_queue"],[47,22,55,20],[47,23,55,21,"length"],[47,29,55,27],[47,32,55,30],[47,33,55,31],[47,35,55,33],[48,6,56,4,"buffer"],[48,12,56,10],[48,15,56,13],[48,19,56,17],[48,20,56,18,"_queue"],[48,26,56,24],[48,27,56,25],[48,28,56,26],[48,29,56,27],[49,6,57,4,"n"],[49,7,57,5],[49,10,57,8,"buffer"],[49,16,57,14],[49,17,57,15,"length"],[49,23,57,21],[50,6,59,4],[50,13,59,11],[50,17,59,15],[50,18,59,16,"_offset"],[50,25,59,23],[50,28,59,26,"n"],[50,29,59,27],[50,31,59,29],[51,8,60,6,"index"],[51,13,60,11],[51,16,60,14],[51,20,60,18],[51,21,60,19,"_offset"],[51,28,60,26],[52,8,61,6],[52,12,61,10],[52,13,61,11,"_offset"],[52,20,61,18],[52,24,61,22],[52,25,61,23],[53,8,62,6,"callback"],[53,16,62,14],[53,17,62,15,"call"],[53,21,62,19],[53,22,62,20,"context"],[53,29,62,27],[53,31,62,29,"buffer"],[53,37,62,35],[53,38,62,36,"index"],[53,43,62,41],[53,44,62,42],[53,45,62,43],[54,6,63,4],[55,6,64,4],[55,10,64,8],[55,11,64,9,"_offset"],[55,18,64,16],[55,21,64,19],[55,22,64,20],[56,6,65,4],[56,10,65,8],[56,11,65,9,"_queue"],[56,17,65,15],[56,18,65,16,"shift"],[56,23,65,21],[56,24,65,22],[56,25,65,23],[57,4,66,2],[58,2,67,0],[58,3,67,1],[59,2,69,0,"module"],[59,8,69,6],[59,9,69,7,"exports"],[59,16,69,14],[59,19,69,17,"StreamReader"],[59,31,69,29],[60,0,69,30],[60,3]],"functionMap":{"names":["<global>","StreamReader","StreamReader.prototype.put","StreamReader.prototype.read","StreamReader.prototype.eachByte"],"mappings":"AAA;mBCI;CDI;6BEE;CFK;8BGE;CHgC;kCIE;CJe"}},"type":"js/module"}]}