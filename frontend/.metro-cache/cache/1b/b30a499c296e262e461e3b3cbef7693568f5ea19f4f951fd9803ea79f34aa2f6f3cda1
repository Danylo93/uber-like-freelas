{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"]}},{"name":"./thenable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":20},"end":{"line":2,"column":47,"index":67}}],"key":"kKA5IQ5mf6XoWFagMsmQasyMyhE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultShouldDehydrateMutation = defaultShouldDehydrateMutation;\n  exports.defaultShouldDehydrateQuery = defaultShouldDehydrateQuery;\n  exports.dehydrate = dehydrate;\n  exports.hydrate = hydrate;\n  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n  var _thenable = require(_dependencyMap[2], \"./thenable.js\");\n  const _excluded = [\"state\"],\n    _excluded2 = [\"fetchStatus\"]; // src/hydration.ts\n  function defaultTransformerFn(data) {\n    return data;\n  }\n  function dehydrateMutation(mutation) {\n    return Object.assign({\n      mutationKey: mutation.options.mutationKey,\n      state: mutation.state\n    }, mutation.options.scope && {\n      scope: mutation.options.scope\n    }, mutation.meta && {\n      meta: mutation.meta\n    });\n  }\n  function dehydrateQuery(query, serializeData, shouldRedactErrors) {\n    return Object.assign({\n      dehydratedAt: Date.now(),\n      state: Object.assign({}, query.state, query.state.data !== void 0 && {\n        data: serializeData(query.state.data)\n      }),\n      queryKey: query.queryKey,\n      queryHash: query.queryHash\n    }, query.state.status === \"pending\" && {\n      promise: query.promise?.then(serializeData).catch(error => {\n        if (!shouldRedactErrors(error)) {\n          return Promise.reject(error);\n        }\n        if (process.env.NODE_ENV !== \"production\") {\n          console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n        }\n        return Promise.reject(new Error(\"redacted\"));\n      })\n    }, query.meta && {\n      meta: query.meta\n    });\n  }\n  function defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n  }\n  function defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n  }\n  function defaultShouldRedactErrors(_) {\n    return true;\n  }\n  function dehydrate(client, options = {}) {\n    const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n    const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n    const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n    const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n    const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n    const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n    return {\n      mutations,\n      queries\n    };\n  }\n  function hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n      return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache();\n    const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n    const mutations = dehydratedState.mutations || [];\n    const queries = dehydratedState.queries || [];\n    mutations.forEach(_ref => {\n      let {\n          state\n        } = _ref,\n        mutationOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n      mutationCache.build(client, Object.assign({}, client.getDefaultOptions().hydrate?.mutations, options?.defaultOptions?.mutations, mutationOptions), state);\n    });\n    queries.forEach(({\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise,\n      dehydratedAt\n    }) => {\n      const syncData = promise ? (0, _thenable.tryResolveSync)(promise) : void 0;\n      const rawData = state.data === void 0 ? syncData?.data : state.data;\n      const data = rawData === void 0 ? rawData : deserializeData(rawData);\n      let query = queryCache.get(queryHash);\n      const existingQueryIsPending = query?.state.status === \"pending\";\n      const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n      if (query) {\n        const hasNewerSyncData = syncData &&\n        // We only need this undefined check to handle older dehydration\n        // payloads that might not have dehydratedAt\n        dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n        if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n          const serializedState = (0, _objectWithoutPropertiesLoose2.default)(state, _excluded2);\n          query.setState(Object.assign({}, serializedState, {\n            data\n          }));\n        }\n      } else {\n        query = queryCache.build(client, Object.assign({}, client.getDefaultOptions().hydrate?.queries, options?.defaultOptions?.queries, {\n          queryKey,\n          queryHash,\n          meta\n        }), // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        Object.assign({}, state, {\n          data,\n          fetchStatus: \"idle\",\n          status: data !== void 0 ? \"success\" : state.status\n        }));\n      }\n      if (promise && !existingQueryIsPending && !existingQueryIsFetching && (\n      // Only hydrate if dehydration is newer than any existing data,\n      // this is always true for new queries\n      dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n        void query.fetch(void 0, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData)\n        });\n      }\n    });\n  }\n});","lineCount":135,"map":[[11,2,2,0],[11,6,2,0,"_thenable"],[11,15,2,0],[11,18,2,0,"require"],[11,25,2,0],[11,26,2,0,"_dependencyMap"],[11,40,2,0],[12,2,2,47],[12,8,2,47,"_excluded"],[12,17,2,47],[13,4,2,47,"_excluded2"],[13,14,2,47],[13,34,1,0],[14,2,3,0],[14,11,3,9,"defaultTransformerFn"],[14,31,3,29,"defaultTransformerFn"],[14,32,3,30,"data"],[14,36,3,34],[14,38,3,36],[15,4,4,2],[15,11,4,9,"data"],[15,15,4,13],[16,2,5,0],[17,2,6,0],[17,11,6,9,"dehydrateMutation"],[17,28,6,26,"dehydrateMutation"],[17,29,6,27,"mutation"],[17,37,6,35],[17,39,6,37],[18,4,7,2],[18,11,7,2,"Object"],[18,17,7,2],[18,18,7,2,"assign"],[18,24,7,2],[19,6,8,4,"mutationKey"],[19,17,8,15],[19,19,8,17,"mutation"],[19,27,8,25],[19,28,8,26,"options"],[19,35,8,33],[19,36,8,34,"mutationKey"],[19,47,8,45],[20,6,9,4,"state"],[20,11,9,9],[20,13,9,11,"mutation"],[20,21,9,19],[20,22,9,20,"state"],[21,4,9,25],[21,7,10,7,"mutation"],[21,15,10,15],[21,16,10,16,"options"],[21,23,10,23],[21,24,10,24,"scope"],[21,29,10,29],[21,33,10,33],[22,6,10,35,"scope"],[22,11,10,40],[22,13,10,42,"mutation"],[22,21,10,50],[22,22,10,51,"options"],[22,29,10,58],[22,30,10,59,"scope"],[23,4,10,65],[23,5,10,66],[23,7,11,7,"mutation"],[23,15,11,15],[23,16,11,16,"meta"],[23,20,11,20],[23,24,11,24],[24,6,11,26,"meta"],[24,10,11,30],[24,12,11,32,"mutation"],[24,20,11,40],[24,21,11,41,"meta"],[25,4,11,46],[25,5,11,47],[26,2,13,0],[27,2,14,0],[27,11,14,9,"dehydrateQuery"],[27,25,14,23,"dehydrateQuery"],[27,26,14,24,"query"],[27,31,14,29],[27,33,14,31,"serializeData"],[27,46,14,44],[27,48,14,46,"shouldRedactErrors"],[27,66,14,64],[27,68,14,66],[28,4,15,2],[28,11,15,2,"Object"],[28,17,15,2],[28,18,15,2,"assign"],[28,24,15,2],[29,6,16,4,"dehydratedAt"],[29,18,16,16],[29,20,16,18,"Date"],[29,24,16,22],[29,25,16,23,"now"],[29,28,16,26],[29,29,16,27],[29,30,16,28],[30,6,17,4,"state"],[30,11,17,9],[30,13,17,9,"Object"],[30,19,17,9],[30,20,17,9,"assign"],[30,26,17,9],[30,31,18,9,"query"],[30,36,18,14],[30,37,18,15,"state"],[30,42,18,20],[30,44,19,9,"query"],[30,49,19,14],[30,50,19,15,"state"],[30,55,19,20],[30,56,19,21,"data"],[30,60,19,25],[30,65,19,30],[30,70,19,35],[30,71,19,36],[30,75,19,40],[31,8,20,8,"data"],[31,12,20,12],[31,14,20,14,"serializeData"],[31,27,20,27],[31,28,20,28,"query"],[31,33,20,33],[31,34,20,34,"state"],[31,39,20,39],[31,40,20,40,"data"],[31,44,20,44],[32,6,21,6],[32,7,21,7],[32,8,22,5],[33,6,23,4,"queryKey"],[33,14,23,12],[33,16,23,14,"query"],[33,21,23,19],[33,22,23,20,"queryKey"],[33,30,23,28],[34,6,24,4,"queryHash"],[34,15,24,13],[34,17,24,15,"query"],[34,22,24,20],[34,23,24,21,"queryHash"],[35,4,24,30],[35,7,25,7,"query"],[35,12,25,12],[35,13,25,13,"state"],[35,18,25,18],[35,19,25,19,"status"],[35,25,25,25],[35,30,25,30],[35,39,25,39],[35,43,25,43],[36,6,26,6,"promise"],[36,13,26,13],[36,15,26,15,"query"],[36,20,26,20],[36,21,26,21,"promise"],[36,28,26,28],[36,30,26,30,"then"],[36,34,26,34],[36,35,26,35,"serializeData"],[36,48,26,48],[36,49,26,49],[36,50,26,50,"catch"],[36,55,26,55],[36,56,26,57,"error"],[36,61,26,62],[36,65,26,67],[37,8,27,8],[37,12,27,12],[37,13,27,13,"shouldRedactErrors"],[37,31,27,31],[37,32,27,32,"error"],[37,37,27,37],[37,38,27,38],[37,40,27,40],[38,10,28,10],[38,17,28,17,"Promise"],[38,24,28,24],[38,25,28,25,"reject"],[38,31,28,31],[38,32,28,32,"error"],[38,37,28,37],[38,38,28,38],[39,8,29,8],[40,8,30,8],[40,12,30,12,"process"],[40,19,30,19],[40,20,30,20,"env"],[40,23,30,23],[40,24,30,24,"NODE_ENV"],[40,32,30,32],[40,37,30,37],[40,49,30,49],[40,51,30,51],[41,10,31,10,"console"],[41,17,31,17],[41,18,31,18,"error"],[41,23,31,23],[41,24,32,12],[41,87,32,75,"query"],[41,92,32,80],[41,93,32,81,"queryHash"],[41,102,32,90],[41,108,32,96,"error"],[41,113,32,101],[41,164,33,10],[41,165,33,11],[42,8,34,8],[43,8,35,8],[43,15,35,15,"Promise"],[43,22,35,22],[43,23,35,23,"reject"],[43,29,35,29],[43,30,35,30],[43,34,35,34,"Error"],[43,39,35,39],[43,40,35,40],[43,50,35,50],[43,51,35,51],[43,52,35,52],[44,6,36,6],[44,7,36,7],[45,4,37,4],[45,5,37,5],[45,7,38,7,"query"],[45,12,38,12],[45,13,38,13,"meta"],[45,17,38,17],[45,21,38,21],[46,6,38,23,"meta"],[46,10,38,27],[46,12,38,29,"query"],[46,17,38,34],[46,18,38,35,"meta"],[47,4,38,40],[47,5,38,41],[48,2,40,0],[49,2,41,0],[49,11,41,9,"defaultShouldDehydrateMutation"],[49,41,41,39,"defaultShouldDehydrateMutation"],[49,42,41,40,"mutation"],[49,50,41,48],[49,52,41,50],[50,4,42,2],[50,11,42,9,"mutation"],[50,19,42,17],[50,20,42,18,"state"],[50,25,42,23],[50,26,42,24,"isPaused"],[50,34,42,32],[51,2,43,0],[52,2,44,0],[52,11,44,9,"defaultShouldDehydrateQuery"],[52,38,44,36,"defaultShouldDehydrateQuery"],[52,39,44,37,"query"],[52,44,44,42],[52,46,44,44],[53,4,45,2],[53,11,45,9,"query"],[53,16,45,14],[53,17,45,15,"state"],[53,22,45,20],[53,23,45,21,"status"],[53,29,45,27],[53,34,45,32],[53,43,45,41],[54,2,46,0],[55,2,47,0],[55,11,47,9,"defaultShouldRedactErrors"],[55,36,47,34,"defaultShouldRedactErrors"],[55,37,47,35,"_"],[55,38,47,36],[55,40,47,38],[56,4,48,2],[56,11,48,9],[56,15,48,13],[57,2,49,0],[58,2,50,0],[58,11,50,9,"dehydrate"],[58,20,50,18,"dehydrate"],[58,21,50,19,"client"],[58,27,50,25],[58,29,50,27,"options"],[58,36,50,34],[58,39,50,37],[58,40,50,38],[58,41,50,39],[58,43,50,41],[59,4,51,2],[59,10,51,8,"filterMutation"],[59,24,51,22],[59,27,51,25,"options"],[59,34,51,32],[59,35,51,33,"shouldDehydrateMutation"],[59,58,51,56],[59,62,51,60,"client"],[59,68,51,66],[59,69,51,67,"getDefaultOptions"],[59,86,51,84],[59,87,51,85],[59,88,51,86],[59,89,51,87,"dehydrate"],[59,98,51,96],[59,100,51,98,"shouldDehydrateMutation"],[59,123,51,121],[59,127,51,125,"defaultShouldDehydrateMutation"],[59,157,51,155],[60,4,52,2],[60,10,52,8,"mutations"],[60,19,52,17],[60,22,52,20,"client"],[60,28,52,26],[60,29,52,27,"getMutationCache"],[60,45,52,43],[60,46,52,44],[60,47,52,45],[60,48,52,46,"getAll"],[60,54,52,52],[60,55,52,53],[60,56,52,54],[60,57,52,55,"flatMap"],[60,64,52,62],[60,65,53,5,"mutation"],[60,73,53,13],[60,77,53,18,"filterMutation"],[60,91,53,32],[60,92,53,33,"mutation"],[60,100,53,41],[60,101,53,42],[60,104,53,45],[60,105,53,46,"dehydrateMutation"],[60,122,53,63],[60,123,53,64,"mutation"],[60,131,53,72],[60,132,53,73],[60,133,53,74],[60,136,53,77],[60,138,54,2],[60,139,54,3],[61,4,55,2],[61,10,55,8,"filterQuery"],[61,21,55,19],[61,24,55,22,"options"],[61,31,55,29],[61,32,55,30,"shouldDehydrateQuery"],[61,52,55,50],[61,56,55,54,"client"],[61,62,55,60],[61,63,55,61,"getDefaultOptions"],[61,80,55,78],[61,81,55,79],[61,82,55,80],[61,83,55,81,"dehydrate"],[61,92,55,90],[61,94,55,92,"shouldDehydrateQuery"],[61,114,55,112],[61,118,55,116,"defaultShouldDehydrateQuery"],[61,145,55,143],[62,4,56,2],[62,10,56,8,"shouldRedactErrors"],[62,28,56,26],[62,31,56,29,"options"],[62,38,56,36],[62,39,56,37,"shouldRedactErrors"],[62,57,56,55],[62,61,56,59,"client"],[62,67,56,65],[62,68,56,66,"getDefaultOptions"],[62,85,56,83],[62,86,56,84],[62,87,56,85],[62,88,56,86,"dehydrate"],[62,97,56,95],[62,99,56,97,"shouldRedactErrors"],[62,117,56,115],[62,121,56,119,"defaultShouldRedactErrors"],[62,146,56,144],[63,4,57,2],[63,10,57,8,"serializeData"],[63,23,57,21],[63,26,57,24,"options"],[63,33,57,31],[63,34,57,32,"serializeData"],[63,47,57,45],[63,51,57,49,"client"],[63,57,57,55],[63,58,57,56,"getDefaultOptions"],[63,75,57,73],[63,76,57,74],[63,77,57,75],[63,78,57,76,"dehydrate"],[63,87,57,85],[63,89,57,87,"serializeData"],[63,102,57,100],[63,106,57,104,"defaultTransformerFn"],[63,126,57,124],[64,4,58,2],[64,10,58,8,"queries"],[64,17,58,15],[64,20,58,18,"client"],[64,26,58,24],[64,27,58,25,"getQueryCache"],[64,40,58,38],[64,41,58,39],[64,42,58,40],[64,43,58,41,"getAll"],[64,49,58,47],[64,50,58,48],[64,51,58,49],[64,52,58,50,"flatMap"],[64,59,58,57],[64,60,59,5,"query"],[64,65,59,10],[64,69,59,15,"filterQuery"],[64,80,59,26],[64,81,59,27,"query"],[64,86,59,32],[64,87,59,33],[64,90,59,36],[64,91,59,37,"dehydrateQuery"],[64,105,59,51],[64,106,59,52,"query"],[64,111,59,57],[64,113,59,59,"serializeData"],[64,126,59,72],[64,128,59,74,"shouldRedactErrors"],[64,146,59,92],[64,147,59,93],[64,148,59,94],[64,151,59,97],[64,153,60,2],[64,154,60,3],[65,4,61,2],[65,11,61,9],[66,6,61,11,"mutations"],[66,15,61,20],[67,6,61,22,"queries"],[68,4,61,30],[68,5,61,31],[69,2,62,0],[70,2,63,0],[70,11,63,9,"hydrate"],[70,18,63,16,"hydrate"],[70,19,63,17,"client"],[70,25,63,23],[70,27,63,25,"dehydratedState"],[70,42,63,40],[70,44,63,42,"options"],[70,51,63,49],[70,53,63,51],[71,4,64,2],[71,8,64,6],[71,15,64,13,"dehydratedState"],[71,30,64,28],[71,35,64,33],[71,43,64,41],[71,47,64,45,"dehydratedState"],[71,62,64,60],[71,67,64,65],[71,71,64,69],[71,73,64,71],[72,6,65,4],[73,4,66,2],[74,4,67,2],[74,10,67,8,"mutationCache"],[74,23,67,21],[74,26,67,24,"client"],[74,32,67,30],[74,33,67,31,"getMutationCache"],[74,49,67,47],[74,50,67,48],[74,51,67,49],[75,4,68,2],[75,10,68,8,"queryCache"],[75,20,68,18],[75,23,68,21,"client"],[75,29,68,27],[75,30,68,28,"getQueryCache"],[75,43,68,41],[75,44,68,42],[75,45,68,43],[76,4,69,2],[76,10,69,8,"deserializeData"],[76,25,69,23],[76,28,69,26,"options"],[76,35,69,33],[76,37,69,35,"defaultOptions"],[76,51,69,49],[76,53,69,51,"deserializeData"],[76,68,69,66],[76,72,69,70,"client"],[76,78,69,76],[76,79,69,77,"getDefaultOptions"],[76,96,69,94],[76,97,69,95],[76,98,69,96],[76,99,69,97,"hydrate"],[76,106,69,104],[76,108,69,106,"deserializeData"],[76,123,69,121],[76,127,69,125,"defaultTransformerFn"],[76,147,69,145],[77,4,70,2],[77,10,70,8,"mutations"],[77,19,70,17],[77,22,70,20,"dehydratedState"],[77,37,70,35],[77,38,70,36,"mutations"],[77,47,70,45],[77,51,70,49],[77,53,70,51],[78,4,71,2],[78,10,71,8,"queries"],[78,17,71,15],[78,20,71,18,"dehydratedState"],[78,35,71,33],[78,36,71,34,"queries"],[78,43,71,41],[78,47,71,45],[78,49,71,47],[79,4,72,2,"mutations"],[79,13,72,11],[79,14,72,12,"forEach"],[79,21,72,19],[79,22,72,20,"_ref"],[79,26,72,20],[79,30,72,55],[80,6,72,55],[80,10,72,21],[81,10,72,23,"state"],[82,8,72,49],[82,9,72,50],[82,12,72,50,"_ref"],[82,16,72,50],[83,8,72,33,"mutationOptions"],[83,23,72,48],[83,30,72,48,"_objectWithoutPropertiesLoose2"],[83,60,72,48],[83,61,72,48,"default"],[83,68,72,48],[83,70,72,48,"_ref"],[83,74,72,48],[83,76,72,48,"_excluded"],[83,85,72,48],[84,6,73,4,"mutationCache"],[84,19,73,17],[84,20,73,18,"build"],[84,25,73,23],[84,26,74,6,"client"],[84,32,74,12],[84,34,74,12,"Object"],[84,40,74,12],[84,41,74,12,"assign"],[84,47,74,12],[84,52,76,11,"client"],[84,58,76,17],[84,59,76,18,"getDefaultOptions"],[84,76,76,35],[84,77,76,36],[84,78,76,37],[84,79,76,38,"hydrate"],[84,86,76,45],[84,88,76,47,"mutations"],[84,97,76,56],[84,99,77,11,"options"],[84,106,77,18],[84,108,77,20,"defaultOptions"],[84,122,77,34],[84,124,77,36,"mutations"],[84,133,77,45],[84,135,78,11,"mutationOptions"],[84,150,78,26],[84,153,80,6,"state"],[84,158,81,4],[84,159,81,5],[85,4,82,2],[85,5,82,3],[85,6,82,4],[86,4,83,2,"queries"],[86,11,83,9],[86,12,83,10,"forEach"],[86,19,83,17],[86,20,84,4],[86,21,84,5],[87,6,84,7,"queryKey"],[87,14,84,15],[88,6,84,17,"state"],[88,11,84,22],[89,6,84,24,"queryHash"],[89,15,84,33],[90,6,84,35,"meta"],[90,10,84,39],[91,6,84,41,"promise"],[91,13,84,48],[92,6,84,50,"dehydratedAt"],[93,4,84,63],[93,5,84,64],[93,10,84,69],[94,6,85,6],[94,12,85,12,"syncData"],[94,20,85,20],[94,23,85,23,"promise"],[94,30,85,30],[94,33,85,33],[94,37,85,33,"tryResolveSync"],[94,61,85,47],[94,63,85,48,"promise"],[94,70,85,55],[94,71,85,56],[94,74,85,59],[94,79,85,64],[94,80,85,65],[95,6,86,6],[95,12,86,12,"rawData"],[95,19,86,19],[95,22,86,22,"state"],[95,27,86,27],[95,28,86,28,"data"],[95,32,86,32],[95,37,86,37],[95,42,86,42],[95,43,86,43],[95,46,86,46,"syncData"],[95,54,86,54],[95,56,86,56,"data"],[95,60,86,60],[95,63,86,63,"state"],[95,68,86,68],[95,69,86,69,"data"],[95,73,86,73],[96,6,87,6],[96,12,87,12,"data"],[96,16,87,16],[96,19,87,19,"rawData"],[96,26,87,26],[96,31,87,31],[96,36,87,36],[96,37,87,37],[96,40,87,40,"rawData"],[96,47,87,47],[96,50,87,50,"deserializeData"],[96,65,87,65],[96,66,87,66,"rawData"],[96,73,87,73],[96,74,87,74],[97,6,88,6],[97,10,88,10,"query"],[97,15,88,15],[97,18,88,18,"queryCache"],[97,28,88,28],[97,29,88,29,"get"],[97,32,88,32],[97,33,88,33,"queryHash"],[97,42,88,42],[97,43,88,43],[98,6,89,6],[98,12,89,12,"existingQueryIsPending"],[98,34,89,34],[98,37,89,37,"query"],[98,42,89,42],[98,44,89,44,"state"],[98,49,89,49],[98,50,89,50,"status"],[98,56,89,56],[98,61,89,61],[98,70,89,70],[99,6,90,6],[99,12,90,12,"existingQueryIsFetching"],[99,35,90,35],[99,38,90,38,"query"],[99,43,90,43],[99,45,90,45,"state"],[99,50,90,50],[99,51,90,51,"fetchStatus"],[99,62,90,62],[99,67,90,67],[99,77,90,77],[100,6,91,6],[100,10,91,10,"query"],[100,15,91,15],[100,17,91,17],[101,8,92,8],[101,14,92,14,"hasNewerSyncData"],[101,30,92,30],[101,33,92,33,"syncData"],[101,41,92,41],[102,8,92,45],[103,8,93,8],[104,8,94,8,"dehydratedAt"],[104,20,94,20],[104,25,94,25],[104,30,94,30],[104,31,94,31],[104,35,94,35,"dehydratedAt"],[104,47,94,47],[104,50,94,50,"query"],[104,55,94,55],[104,56,94,56,"state"],[104,61,94,61],[104,62,94,62,"dataUpdatedAt"],[104,75,94,75],[105,8,95,8],[105,12,95,12,"state"],[105,17,95,17],[105,18,95,18,"dataUpdatedAt"],[105,31,95,31],[105,34,95,34,"query"],[105,39,95,39],[105,40,95,40,"state"],[105,45,95,45],[105,46,95,46,"dataUpdatedAt"],[105,59,95,59],[105,63,95,63,"hasNewerSyncData"],[105,79,95,79],[105,81,95,81],[106,10,96,10],[106,16,96,44,"serializedState"],[106,31,96,59],[106,38,96,59,"_objectWithoutPropertiesLoose2"],[106,68,96,59],[106,69,96,59,"default"],[106,76,96,59],[106,78,96,64,"state"],[106,83,96,69],[106,85,96,69,"_excluded2"],[106,95,96,69],[107,10,97,10,"query"],[107,15,97,15],[107,16,97,16,"setState"],[107,24,97,24],[107,25,97,24,"Object"],[107,31,97,24],[107,32,97,24,"assign"],[107,38,97,24],[107,43,98,15,"serializedState"],[107,58,98,30],[108,12,99,12,"data"],[109,10,99,16],[109,12,100,11],[109,13,100,12],[110,8,101,8],[111,6,102,6],[111,7,102,7],[111,13,102,13],[112,8,103,8,"query"],[112,13,103,13],[112,16,103,16,"queryCache"],[112,26,103,26],[112,27,103,27,"build"],[112,32,103,32],[112,33,104,10,"client"],[112,39,104,16],[112,41,104,16,"Object"],[112,47,104,16],[112,48,104,16,"assign"],[112,54,104,16],[112,59,106,15,"client"],[112,65,106,21],[112,66,106,22,"getDefaultOptions"],[112,83,106,39],[112,84,106,40],[112,85,106,41],[112,86,106,42,"hydrate"],[112,93,106,49],[112,95,106,51,"queries"],[112,102,106,58],[112,104,107,15,"options"],[112,111,107,22],[112,113,107,24,"defaultOptions"],[112,127,107,38],[112,129,107,40,"queries"],[112,136,107,47],[113,10,108,12,"queryKey"],[113,18,108,20],[114,10,109,12,"queryHash"],[114,19,109,21],[115,10,110,12,"meta"],[116,8,110,16],[116,12,112,10],[117,8,113,10],[118,8,113,10,"Object"],[118,14,113,10],[118,15,113,10,"assign"],[118,21,113,10],[118,26,115,15,"state"],[118,31,115,20],[119,10,116,12,"data"],[119,14,116,16],[120,10,117,12,"fetchStatus"],[120,21,117,23],[120,23,117,25],[120,29,117,31],[121,10,118,12,"status"],[121,16,118,18],[121,18,118,20,"data"],[121,22,118,24],[121,27,118,29],[121,32,118,34],[121,33,118,35],[121,36,118,38],[121,45,118,47],[121,48,118,50,"state"],[121,53,118,55],[121,54,118,56,"status"],[122,8,118,62],[122,10,120,8],[122,11,120,9],[123,6,121,6],[124,6,122,6],[124,10,122,10,"promise"],[124,17,122,17],[124,21,122,21],[124,22,122,22,"existingQueryIsPending"],[124,44,122,44],[124,48,122,48],[124,49,122,49,"existingQueryIsFetching"],[124,72,122,72],[125,6,122,76],[126,6,123,6],[127,6,124,7,"dehydratedAt"],[127,18,124,19],[127,23,124,24],[127,28,124,29],[127,29,124,30],[127,33,124,34,"dehydratedAt"],[127,45,124,46],[127,48,124,49,"query"],[127,53,124,54],[127,54,124,55,"state"],[127,59,124,60],[127,60,124,61,"dataUpdatedAt"],[127,73,124,74],[127,74,124,75],[127,76,124,77],[128,8,125,8],[128,13,125,13,"query"],[128,18,125,18],[128,19,125,19,"fetch"],[128,24,125,24],[128,25,125,25],[128,30,125,30],[128,31,125,31],[128,33,125,33],[129,10,126,10],[130,10,127,10,"initialPromise"],[130,24,127,24],[130,26,127,26,"Promise"],[130,33,127,33],[130,34,127,34,"resolve"],[130,41,127,41],[130,42,127,42,"promise"],[130,49,127,49],[130,50,127,50],[130,51,127,51,"then"],[130,55,127,55],[130,56,127,56,"deserializeData"],[130,71,127,71],[131,8,128,8],[131,9,128,9],[131,10,128,10],[132,6,129,6],[133,4,130,4],[133,5,131,2],[133,6,131,3],[134,2,132,0],[135,0,132,1],[135,3]],"functionMap":{"names":["<global>","defaultTransformerFn","dehydrateMutation","dehydrateQuery","query.promise.then._catch$argument_0","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","defaultShouldRedactErrors","dehydrate","client.getMutationCache.getAll.flatMap$argument_0","client.getQueryCache.getAll.flatMap$argument_0","hydrate","mutations.forEach$argument_0","queries.forEach$argument_0"],"mappings":"AAA;ACE;CDE;AEC;CFO;AGC;wDCY;ODU;CHI;AKC;CLE;AMC;CNE;AOC;CPE;AQC;ICG,2ED;IEM,+FF;CRG;AWC;oBCS;GDU;IEE;KF8C;CXE"}},"type":"js/module"}]}