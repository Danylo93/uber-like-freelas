{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"expo-location","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":42,"index":132}}],"key":"GNP7AGCKsBRUhlnTZ4lIPpbkT9E=","exportNames":["*"]}},{"name":"../services/api","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":133},"end":{"line":3,"column":45,"index":178}}],"key":"Pr5/EB33W7mJGi+ygccy+pUf1E8=","exportNames":["*"]}},{"name":"./AuthContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":179},"end":{"line":4,"column":40,"index":219}}],"key":"YmpzODa+dVz64UAAYTI+RwJeEt0=","exportNames":["*"]}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useMatching = exports.MatchingProvider = void 0;\n  var _react = _interopRequireWildcard(require(_dependencyMap[0], \"react\"));\n  var Location = _interopRequireWildcard(require(_dependencyMap[1], \"expo-location\"));\n  var _api = require(_dependencyMap[2], \"../services/api\");\n  var _AuthContext = require(_dependencyMap[3], \"./AuthContext\");\n  var _jsxDevRuntime = require(_dependencyMap[4], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/src/contexts/MatchingContext.tsx\"; // Service cancelled\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  const MatchingContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const MatchingProvider = ({\n    children\n  }) => {\n    const {\n      user\n    } = (0, _AuthContext.useAuth)();\n\n    // State\n    const [currentState, setCurrentState] = (0, _react.useState)('idle');\n    const [userLocation, setUserLocation] = (0, _react.useState)(null);\n    const [availableProviders, setAvailableProviders] = (0, _react.useState)([]);\n    const [selectedProvider, setSelectedProvider] = (0, _react.useState)(null);\n    const [currentMatch, setCurrentMatch] = (0, _react.useState)(null);\n    const [isLoading, setIsLoading] = (0, _react.useState)(false);\n    const [error, setError] = (0, _react.useState)(null);\n\n    // Initialize location\n    (0, _react.useEffect)(() => {\n      initializeLocation();\n    }, []);\n\n    // Auto-refresh providers when in searching state\n    (0, _react.useEffect)(() => {\n      let interval;\n      if (currentState === 'searching') {\n        interval = setInterval(() => {\n          refreshProviders();\n        }, 5000); // Refresh every 5 seconds\n      }\n      return () => {\n        if (interval) clearInterval(interval);\n      };\n    }, [currentState]);\n    const initializeLocation = async () => {\n      try {\n        const {\n          status\n        } = await Location.requestForegroundPermissionsAsync();\n        if (status !== 'granted') {\n          setError('Permissão de localização é necessária');\n          return;\n        }\n        const location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High\n        });\n        setUserLocation(location);\n        await updateLocationInBackend(location);\n      } catch (err) {\n        console.error('Error getting location:', err);\n        setError('Erro ao obter localização');\n      }\n    };\n    const updateLocationInBackend = async location => {\n      try {\n        await _api.apiService.updateLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude\n        });\n      } catch (err) {\n        console.error('Error updating location in backend:', err);\n      }\n    };\n    const requestService = async (category, title, description, address) => {\n      if (!userLocation) {\n        setError('Localização não disponível');\n        return;\n      }\n      try {\n        setIsLoading(true);\n        setError(null);\n        setCurrentState('searching');\n\n        // Create service request\n        const serviceRequest = await _api.apiService.createServiceRequest({\n          category,\n          title,\n          description,\n          location: {\n            latitude: userLocation.coords.latitude,\n            longitude: userLocation.coords.longitude\n          },\n          address\n        });\n\n        // Create match object\n        const match = {\n          id: serviceRequest.id,\n          clientId: user.id,\n          providerId: '',\n          category,\n          title,\n          description,\n          status: 'searching',\n          clientLocation: {\n            latitude: userLocation.coords.latitude,\n            longitude: userLocation.coords.longitude\n          },\n          address,\n          estimatedPrice: 0,\n          createdAt: new Date()\n        };\n        setCurrentMatch(match);\n\n        // Start looking for providers\n        await refreshProviders();\n\n        // Simulate provider search\n        setTimeout(() => {\n          setCurrentState('providers_found');\n        }, 2000);\n      } catch (err) {\n        console.error('Error requesting service:', err);\n        setError('Erro ao solicitar serviço');\n        setCurrentState('idle');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const refreshProviders = async () => {\n      if (!userLocation) return;\n      try {\n        // In a real app, this would call an API to get nearby providers\n        // For now, we'll generate mock data based on location\n        const mockProviders = [{\n          id: '1',\n          name: 'João Silva',\n          avatar: 'https://randomuser.me/api/portraits/men/1.jpg',\n          rating: 4.8,\n          reviewCount: 127,\n          distance: 0.8,\n          estimatedTime: 12,\n          price: 85,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude + 0.005,\n            longitude: userLocation.coords.longitude + 0.005\n          },\n          isOnline: true,\n          phone: '+55 11 99999-1111'\n        }, {\n          id: '2',\n          name: 'Maria Santos',\n          avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n          rating: 4.9,\n          reviewCount: 203,\n          distance: 1.2,\n          estimatedTime: 18,\n          price: 75,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude - 0.008,\n            longitude: userLocation.coords.longitude + 0.003\n          },\n          isOnline: true,\n          phone: '+55 11 99999-2222'\n        }, {\n          id: '3',\n          name: 'Carlos Oliveira',\n          avatar: 'https://randomuser.me/api/portraits/men/3.jpg',\n          rating: 4.7,\n          reviewCount: 89,\n          distance: 2.1,\n          estimatedTime: 25,\n          price: 95,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude + 0.012,\n            longitude: userLocation.coords.longitude - 0.007\n          },\n          isOnline: true,\n          phone: '+55 11 99999-3333'\n        }];\n        setAvailableProviders(mockProviders);\n      } catch (err) {\n        console.error('Error refreshing providers:', err);\n      }\n    };\n    const selectProvider = async providerId => {\n      const provider = availableProviders.find(p => p.id === providerId);\n      if (!provider) return;\n      try {\n        setSelectedProvider(provider);\n        setCurrentState('provider_selected');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            providerId: provider.id,\n            estimatedPrice: provider.price\n          });\n        }\n      } catch (err) {\n        console.error('Error selecting provider:', err);\n        setError('Erro ao selecionar prestador');\n      }\n    };\n    const confirmService = async () => {\n      if (!selectedProvider || !currentMatch) return;\n      try {\n        setIsLoading(true);\n        setCurrentState('confirmed');\n\n        // Update match\n        setCurrentMatch({\n          ...currentMatch,\n          status: 'confirmed',\n          confirmedAt: new Date()\n        });\n\n        // In real app, notify provider and start tracking\n        setTimeout(() => {\n          setCurrentState('in_progress');\n          setCurrentMatch(prev => prev ? {\n            ...prev,\n            status: 'in_progress',\n            startedAt: new Date()\n          } : null);\n        }, 3000);\n      } catch (err) {\n        console.error('Error confirming service:', err);\n        setError('Erro ao confirmar serviço');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const cancelService = async () => {\n      try {\n        setCurrentState('cancelled');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            status: 'cancelled'\n          });\n        }\n\n        // Reset after a moment\n        setTimeout(() => {\n          resetState();\n        }, 2000);\n      } catch (err) {\n        console.error('Error cancelling service:', err);\n        setError('Erro ao cancelar serviço');\n      }\n    };\n    const completeService = async () => {\n      try {\n        setCurrentState('completed');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            status: 'completed',\n            completedAt: new Date(),\n            finalPrice: currentMatch.estimatedPrice\n          });\n        }\n\n        // Auto-reset after completion\n        setTimeout(() => {\n          resetState();\n        }, 5000);\n      } catch (err) {\n        console.error('Error completing service:', err);\n        setError('Erro ao finalizar serviço');\n      }\n    };\n    const updateLocation = async location => {\n      setUserLocation(location);\n      await updateLocationInBackend(location);\n    };\n    const resetState = () => {\n      setCurrentState('idle');\n      setAvailableProviders([]);\n      setSelectedProvider(null);\n      setCurrentMatch(null);\n      setError(null);\n      setIsLoading(false);\n    };\n    const value = {\n      // State\n      currentState,\n      userLocation,\n      availableProviders,\n      selectedProvider,\n      currentMatch,\n      isLoading,\n      error,\n      // Actions\n      requestService,\n      selectProvider,\n      confirmService,\n      cancelService,\n      completeService,\n      refreshProviders,\n      updateLocation,\n      resetState\n    };\n    return /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)(MatchingContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }, this);\n  };\n  exports.MatchingProvider = MatchingProvider;\n  const useMatching = () => {\n    const context = (0, _react.useContext)(MatchingContext);\n    if (!context) {\n      throw new Error('useMatching must be used within a MatchingProvider');\n    }\n    return context;\n  };\n  exports.useMatching = useMatching;\n});","lineCount":327,"map":[[6,2,1,0],[6,6,1,0,"_react"],[6,12,1,0],[6,15,1,0,"_interopRequireWildcard"],[6,38,1,0],[6,39,1,0,"require"],[6,46,1,0],[6,47,1,0,"_dependencyMap"],[6,61,1,0],[7,2,2,0],[7,6,2,0,"Location"],[7,14,2,0],[7,17,2,0,"_interopRequireWildcard"],[7,40,2,0],[7,41,2,0,"require"],[7,48,2,0],[7,49,2,0,"_dependencyMap"],[7,63,2,0],[8,2,3,0],[8,6,3,0,"_api"],[8,10,3,0],[8,13,3,0,"require"],[8,20,3,0],[8,21,3,0,"_dependencyMap"],[8,35,3,0],[9,2,4,0],[9,6,4,0,"_AuthContext"],[9,18,4,0],[9,21,4,0,"require"],[9,28,4,0],[9,29,4,0,"_dependencyMap"],[9,43,4,0],[10,2,4,40],[10,6,4,40,"_jsxDevRuntime"],[10,20,4,40],[10,23,4,40,"require"],[10,30,4,40],[10,31,4,40,"_dependencyMap"],[10,45,4,40],[11,2,4,40],[11,6,4,40,"_jsxFileName"],[11,18,4,40],[11,71,14,21],[12,2,14,21],[12,11,14,21,"_interopRequireWildcard"],[12,35,14,21,"e"],[12,36,14,21],[12,38,14,21,"t"],[12,39,14,21],[12,68,14,21,"WeakMap"],[12,75,14,21],[12,81,14,21,"r"],[12,82,14,21],[12,89,14,21,"WeakMap"],[12,96,14,21],[12,100,14,21,"n"],[12,101,14,21],[12,108,14,21,"WeakMap"],[12,115,14,21],[12,127,14,21,"_interopRequireWildcard"],[12,150,14,21],[12,162,14,21,"_interopRequireWildcard"],[12,163,14,21,"e"],[12,164,14,21],[12,166,14,21,"t"],[12,167,14,21],[12,176,14,21,"t"],[12,177,14,21],[12,181,14,21,"e"],[12,182,14,21],[12,186,14,21,"e"],[12,187,14,21],[12,188,14,21,"__esModule"],[12,198,14,21],[12,207,14,21,"e"],[12,208,14,21],[12,214,14,21,"o"],[12,215,14,21],[12,217,14,21,"i"],[12,218,14,21],[12,220,14,21,"f"],[12,221,14,21],[12,226,14,21,"__proto__"],[12,235,14,21],[12,243,14,21,"default"],[12,250,14,21],[12,252,14,21,"e"],[12,253,14,21],[12,270,14,21,"e"],[12,271,14,21],[12,294,14,21,"e"],[12,295,14,21],[12,320,14,21,"e"],[12,321,14,21],[12,330,14,21,"f"],[12,331,14,21],[12,337,14,21,"o"],[12,338,14,21],[12,341,14,21,"t"],[12,342,14,21],[12,345,14,21,"n"],[12,346,14,21],[12,349,14,21,"r"],[12,350,14,21],[12,358,14,21,"o"],[12,359,14,21],[12,360,14,21,"has"],[12,363,14,21],[12,364,14,21,"e"],[12,365,14,21],[12,375,14,21,"o"],[12,376,14,21],[12,377,14,21,"get"],[12,380,14,21],[12,381,14,21,"e"],[12,382,14,21],[12,385,14,21,"o"],[12,386,14,21],[12,387,14,21,"set"],[12,390,14,21],[12,391,14,21,"e"],[12,392,14,21],[12,394,14,21,"f"],[12,395,14,21],[12,411,14,21,"t"],[12,412,14,21],[12,416,14,21,"e"],[12,417,14,21],[12,433,14,21,"t"],[12,434,14,21],[12,441,14,21,"hasOwnProperty"],[12,455,14,21],[12,456,14,21,"call"],[12,460,14,21],[12,461,14,21,"e"],[12,462,14,21],[12,464,14,21,"t"],[12,465,14,21],[12,472,14,21,"i"],[12,473,14,21],[12,477,14,21,"o"],[12,478,14,21],[12,481,14,21,"Object"],[12,487,14,21],[12,488,14,21,"defineProperty"],[12,502,14,21],[12,507,14,21,"Object"],[12,513,14,21],[12,514,14,21,"getOwnPropertyDescriptor"],[12,538,14,21],[12,539,14,21,"e"],[12,540,14,21],[12,542,14,21,"t"],[12,543,14,21],[12,550,14,21,"i"],[12,551,14,21],[12,552,14,21,"get"],[12,555,14,21],[12,559,14,21,"i"],[12,560,14,21],[12,561,14,21,"set"],[12,564,14,21],[12,568,14,21,"o"],[12,569,14,21],[12,570,14,21,"f"],[12,571,14,21],[12,573,14,21,"t"],[12,574,14,21],[12,576,14,21,"i"],[12,577,14,21],[12,581,14,21,"f"],[12,582,14,21],[12,583,14,21,"t"],[12,584,14,21],[12,588,14,21,"e"],[12,589,14,21],[12,590,14,21,"t"],[12,591,14,21],[12,602,14,21,"f"],[12,603,14,21],[12,608,14,21,"e"],[12,609,14,21],[12,611,14,21,"t"],[12,612,14,21],[13,2,76,0],[13,8,76,6,"MatchingContext"],[13,23,76,21],[13,39,76,24],[13,43,76,24,"createContext"],[13,63,76,37],[13,65,76,71,"undefined"],[13,74,76,80],[13,75,76,81],[14,2,82,7],[14,8,82,13,"MatchingProvider"],[14,24,82,62],[14,27,82,65,"MatchingProvider"],[14,28,82,66],[15,4,82,68,"children"],[16,2,82,77],[16,3,82,78],[16,8,82,83],[17,4,83,2],[17,10,83,8],[18,6,83,10,"user"],[19,4,83,15],[19,5,83,16],[19,8,83,19],[19,12,83,19,"useAuth"],[19,32,83,26],[19,34,83,27],[19,35,83,28],[21,4,85,2],[22,4,86,2],[22,10,86,8],[22,11,86,9,"currentState"],[22,23,86,21],[22,25,86,23,"setCurrentState"],[22,40,86,38],[22,41,86,39],[22,44,86,42],[22,48,86,42,"useState"],[22,63,86,50],[22,65,86,66],[22,71,86,72],[22,72,86,73],[23,4,87,2],[23,10,87,8],[23,11,87,9,"userLocation"],[23,23,87,21],[23,25,87,23,"setUserLocation"],[23,40,87,38],[23,41,87,39],[23,44,87,42],[23,48,87,42,"useState"],[23,63,87,50],[23,65,87,83],[23,69,87,87],[23,70,87,88],[24,4,88,2],[24,10,88,8],[24,11,88,9,"availableProviders"],[24,29,88,27],[24,31,88,29,"setAvailableProviders"],[24,52,88,50],[24,53,88,51],[24,56,88,54],[24,60,88,54,"useState"],[24,75,88,62],[24,77,88,82],[24,79,88,84],[24,80,88,85],[25,4,89,2],[25,10,89,8],[25,11,89,9,"selectedProvider"],[25,27,89,25],[25,29,89,27,"setSelectedProvider"],[25,48,89,46],[25,49,89,47],[25,52,89,50],[25,56,89,50,"useState"],[25,71,89,58],[25,73,89,83],[25,77,89,87],[25,78,89,88],[26,4,90,2],[26,10,90,8],[26,11,90,9,"currentMatch"],[26,23,90,21],[26,25,90,23,"setCurrentMatch"],[26,40,90,38],[26,41,90,39],[26,44,90,42],[26,48,90,42,"useState"],[26,63,90,50],[26,65,90,72],[26,69,90,76],[26,70,90,77],[27,4,91,2],[27,10,91,8],[27,11,91,9,"isLoading"],[27,20,91,18],[27,22,91,20,"setIsLoading"],[27,34,91,32],[27,35,91,33],[27,38,91,36],[27,42,91,36,"useState"],[27,57,91,44],[27,59,91,45],[27,64,91,50],[27,65,91,51],[28,4,92,2],[28,10,92,8],[28,11,92,9,"error"],[28,16,92,14],[28,18,92,16,"setError"],[28,26,92,24],[28,27,92,25],[28,30,92,28],[28,34,92,28,"useState"],[28,49,92,36],[28,51,92,52],[28,55,92,56],[28,56,92,57],[30,4,94,2],[31,4,95,2],[31,8,95,2,"useEffect"],[31,24,95,11],[31,26,95,12],[31,32,95,18],[32,6,96,4,"initializeLocation"],[32,24,96,22],[32,25,96,23],[32,26,96,24],[33,4,97,2],[33,5,97,3],[33,7,97,5],[33,9,97,7],[33,10,97,8],[35,4,99,2],[36,4,100,2],[36,8,100,2,"useEffect"],[36,24,100,11],[36,26,100,12],[36,32,100,18],[37,6,101,4],[37,10,101,8,"interval"],[37,18,101,32],[38,6,103,4],[38,10,103,8,"currentState"],[38,22,103,20],[38,27,103,25],[38,38,103,36],[38,40,103,38],[39,8,104,6,"interval"],[39,16,104,14],[39,19,104,17,"setInterval"],[39,30,104,28],[39,31,104,29],[39,37,104,35],[40,10,105,8,"refreshProviders"],[40,26,105,24],[40,27,105,25],[40,28,105,26],[41,8,106,6],[41,9,106,7],[41,11,106,9],[41,15,106,13],[41,16,106,14],[41,17,106,15],[41,18,106,16],[42,6,107,4],[43,6,109,4],[43,13,109,11],[43,19,109,17],[44,8,110,6],[44,12,110,10,"interval"],[44,20,110,18],[44,22,110,20,"clearInterval"],[44,35,110,33],[44,36,110,34,"interval"],[44,44,110,42],[44,45,110,43],[45,6,111,4],[45,7,111,5],[46,4,112,2],[46,5,112,3],[46,7,112,5],[46,8,112,6,"currentState"],[46,20,112,18],[46,21,112,19],[46,22,112,20],[47,4,114,2],[47,10,114,8,"initializeLocation"],[47,28,114,26],[47,31,114,29],[47,37,114,29,"initializeLocation"],[47,38,114,29],[47,43,114,41],[48,6,115,4],[48,10,115,8],[49,8,116,6],[49,14,116,12],[50,10,116,14,"status"],[51,8,116,21],[51,9,116,22],[51,12,116,25],[51,18,116,31,"Location"],[51,26,116,39],[51,27,116,40,"requestForegroundPermissionsAsync"],[51,60,116,73],[51,61,116,74],[51,62,116,75],[52,8,117,6],[52,12,117,10,"status"],[52,18,117,16],[52,23,117,21],[52,32,117,30],[52,34,117,32],[53,10,118,8,"setError"],[53,18,118,16],[53,19,118,17],[53,58,118,56],[53,59,118,57],[54,10,119,8],[55,8,120,6],[56,8,122,6],[56,14,122,12,"location"],[56,22,122,20],[56,25,122,23],[56,31,122,29,"Location"],[56,39,122,37],[56,40,122,38,"getCurrentPositionAsync"],[56,63,122,61],[56,64,122,62],[57,10,123,8,"accuracy"],[57,18,123,16],[57,20,123,18,"Location"],[57,28,123,26],[57,29,123,27,"Accuracy"],[57,37,123,35],[57,38,123,36,"High"],[58,8,124,6],[58,9,124,7],[58,10,124,8],[59,8,126,6,"setUserLocation"],[59,23,126,21],[59,24,126,22,"location"],[59,32,126,30],[59,33,126,31],[60,8,127,6],[60,14,127,12,"updateLocationInBackend"],[60,37,127,35],[60,38,127,36,"location"],[60,46,127,44],[60,47,127,45],[61,6,128,4],[61,7,128,5],[61,8,128,6],[61,15,128,13,"err"],[61,18,128,16],[61,20,128,18],[62,8,129,6,"console"],[62,15,129,13],[62,16,129,14,"error"],[62,21,129,19],[62,22,129,20],[62,47,129,45],[62,49,129,47,"err"],[62,52,129,50],[62,53,129,51],[63,8,130,6,"setError"],[63,16,130,14],[63,17,130,15],[63,44,130,42],[63,45,130,43],[64,6,131,4],[65,4,132,2],[65,5,132,3],[66,4,134,2],[66,10,134,8,"updateLocationInBackend"],[66,33,134,31],[66,36,134,34],[66,42,134,41,"location"],[66,50,134,74],[66,54,134,79],[67,6,135,4],[67,10,135,8],[68,8,136,6],[68,14,136,12,"apiService"],[68,29,136,22],[68,30,136,23,"updateLocation"],[68,44,136,37],[68,45,136,38],[69,10,137,8,"latitude"],[69,18,137,16],[69,20,137,18,"location"],[69,28,137,26],[69,29,137,27,"coords"],[69,35,137,33],[69,36,137,34,"latitude"],[69,44,137,42],[70,10,138,8,"longitude"],[70,19,138,17],[70,21,138,19,"location"],[70,29,138,27],[70,30,138,28,"coords"],[70,36,138,34],[70,37,138,35,"longitude"],[71,8,139,6],[71,9,139,7],[71,10,139,8],[72,6,140,4],[72,7,140,5],[72,8,140,6],[72,15,140,13,"err"],[72,18,140,16],[72,20,140,18],[73,8,141,6,"console"],[73,15,141,13],[73,16,141,14,"error"],[73,21,141,19],[73,22,141,20],[73,59,141,57],[73,61,141,59,"err"],[73,64,141,62],[73,65,141,63],[74,6,142,4],[75,4,143,2],[75,5,143,3],[76,4,145,2],[76,10,145,8,"requestService"],[76,24,145,22],[76,27,145,25],[76,33,145,25,"requestService"],[76,34,145,32,"category"],[76,42,145,48],[76,44,145,50,"title"],[76,49,145,63],[76,51,145,65,"description"],[76,62,145,84],[76,64,145,86,"address"],[76,71,145,101],[76,76,145,106],[77,6,146,4],[77,10,146,8],[77,11,146,9,"userLocation"],[77,23,146,21],[77,25,146,23],[78,8,147,6,"setError"],[78,16,147,14],[78,17,147,15],[78,45,147,43],[78,46,147,44],[79,8,148,6],[80,6,149,4],[81,6,151,4],[81,10,151,8],[82,8,152,6,"setIsLoading"],[82,20,152,18],[82,21,152,19],[82,25,152,23],[82,26,152,24],[83,8,153,6,"setError"],[83,16,153,14],[83,17,153,15],[83,21,153,19],[83,22,153,20],[84,8,154,6,"setCurrentState"],[84,23,154,21],[84,24,154,22],[84,35,154,33],[84,36,154,34],[86,8,156,6],[87,8,157,6],[87,14,157,12,"serviceRequest"],[87,28,157,26],[87,31,157,29],[87,37,157,35,"apiService"],[87,52,157,45],[87,53,157,46,"createServiceRequest"],[87,73,157,66],[87,74,157,67],[88,10,158,8,"category"],[88,18,158,16],[89,10,159,8,"title"],[89,15,159,13],[90,10,160,8,"description"],[90,21,160,19],[91,10,161,8,"location"],[91,18,161,16],[91,20,161,18],[92,12,162,10,"latitude"],[92,20,162,18],[92,22,162,20,"userLocation"],[92,34,162,32],[92,35,162,33,"coords"],[92,41,162,39],[92,42,162,40,"latitude"],[92,50,162,48],[93,12,163,10,"longitude"],[93,21,163,19],[93,23,163,21,"userLocation"],[93,35,163,33],[93,36,163,34,"coords"],[93,42,163,40],[93,43,163,41,"longitude"],[94,10,164,8],[94,11,164,9],[95,10,165,8,"address"],[96,8,166,6],[96,9,166,7],[96,10,166,8],[98,8,168,6],[99,8,169,6],[99,14,169,12,"match"],[99,19,169,31],[99,22,169,34],[100,10,170,8,"id"],[100,12,170,10],[100,14,170,12,"serviceRequest"],[100,28,170,26],[100,29,170,27,"id"],[100,31,170,29],[101,10,171,8,"clientId"],[101,18,171,16],[101,20,171,18,"user"],[101,24,171,22],[101,25,171,24,"id"],[101,27,171,26],[102,10,172,8,"providerId"],[102,20,172,18],[102,22,172,20],[102,24,172,22],[103,10,173,8,"category"],[103,18,173,16],[104,10,174,8,"title"],[104,15,174,13],[105,10,175,8,"description"],[105,21,175,19],[106,10,176,8,"status"],[106,16,176,14],[106,18,176,16],[106,29,176,27],[107,10,177,8,"clientLocation"],[107,24,177,22],[107,26,177,24],[108,12,178,10,"latitude"],[108,20,178,18],[108,22,178,20,"userLocation"],[108,34,178,32],[108,35,178,33,"coords"],[108,41,178,39],[108,42,178,40,"latitude"],[108,50,178,48],[109,12,179,10,"longitude"],[109,21,179,19],[109,23,179,21,"userLocation"],[109,35,179,33],[109,36,179,34,"coords"],[109,42,179,40],[109,43,179,41,"longitude"],[110,10,180,8],[110,11,180,9],[111,10,181,8,"address"],[111,17,181,15],[112,10,182,8,"estimatedPrice"],[112,24,182,22],[112,26,182,24],[112,27,182,25],[113,10,183,8,"createdAt"],[113,19,183,17],[113,21,183,19],[113,25,183,23,"Date"],[113,29,183,27],[113,30,183,28],[114,8,184,6],[114,9,184,7],[115,8,186,6,"setCurrentMatch"],[115,23,186,21],[115,24,186,22,"match"],[115,29,186,27],[115,30,186,28],[117,8,188,6],[118,8,189,6],[118,14,189,12,"refreshProviders"],[118,30,189,28],[118,31,189,29],[118,32,189,30],[120,8,191,6],[121,8,192,6,"setTimeout"],[121,18,192,16],[121,19,192,17],[121,25,192,23],[122,10,193,8,"setCurrentState"],[122,25,193,23],[122,26,193,24],[122,43,193,41],[122,44,193,42],[123,8,194,6],[123,9,194,7],[123,11,194,9],[123,15,194,13],[123,16,194,14],[124,6,196,4],[124,7,196,5],[124,8,196,6],[124,15,196,13,"err"],[124,18,196,16],[124,20,196,18],[125,8,197,6,"console"],[125,15,197,13],[125,16,197,14,"error"],[125,21,197,19],[125,22,197,20],[125,49,197,47],[125,51,197,49,"err"],[125,54,197,52],[125,55,197,53],[126,8,198,6,"setError"],[126,16,198,14],[126,17,198,15],[126,44,198,42],[126,45,198,43],[127,8,199,6,"setCurrentState"],[127,23,199,21],[127,24,199,22],[127,30,199,28],[127,31,199,29],[128,6,200,4],[128,7,200,5],[128,16,200,14],[129,8,201,6,"setIsLoading"],[129,20,201,18],[129,21,201,19],[129,26,201,24],[129,27,201,25],[130,6,202,4],[131,4,203,2],[131,5,203,3],[132,4,205,2],[132,10,205,8,"refreshProviders"],[132,26,205,24],[132,29,205,27],[132,35,205,27,"refreshProviders"],[132,36,205,27],[132,41,205,39],[133,6,206,4],[133,10,206,8],[133,11,206,9,"userLocation"],[133,23,206,21],[133,25,206,23],[134,6,208,4],[134,10,208,8],[135,8,209,6],[136,8,210,6],[137,8,211,6],[137,14,211,12,"mockProviders"],[137,27,211,44],[137,30,211,47],[137,31,212,8],[138,10,213,10,"id"],[138,12,213,12],[138,14,213,14],[138,17,213,17],[139,10,214,10,"name"],[139,14,214,14],[139,16,214,16],[139,28,214,28],[140,10,215,10,"avatar"],[140,16,215,16],[140,18,215,18],[140,65,215,65],[141,10,216,10,"rating"],[141,16,216,16],[141,18,216,18],[141,21,216,21],[142,10,217,10,"reviewCount"],[142,21,217,21],[142,23,217,23],[142,26,217,26],[143,10,218,10,"distance"],[143,18,218,18],[143,20,218,20],[143,23,218,23],[144,10,219,10,"estimatedTime"],[144,23,219,23],[144,25,219,25],[144,27,219,27],[145,10,220,10,"price"],[145,15,220,15],[145,17,220,17],[145,19,220,19],[146,10,221,10,"category"],[146,18,221,18],[146,20,221,20],[146,29,221,29],[147,10,222,10,"coordinate"],[147,20,222,20],[147,22,222,22],[148,12,223,12,"latitude"],[148,20,223,20],[148,22,223,22,"userLocation"],[148,34,223,34],[148,35,223,35,"coords"],[148,41,223,41],[148,42,223,42,"latitude"],[148,50,223,50],[148,53,223,53],[148,58,223,58],[149,12,224,12,"longitude"],[149,21,224,21],[149,23,224,23,"userLocation"],[149,35,224,35],[149,36,224,36,"coords"],[149,42,224,42],[149,43,224,43,"longitude"],[149,52,224,52],[149,55,224,55],[150,10,225,10],[150,11,225,11],[151,10,226,10,"isOnline"],[151,18,226,18],[151,20,226,20],[151,24,226,24],[152,10,227,10,"phone"],[152,15,227,15],[152,17,227,17],[153,8,228,8],[153,9,228,9],[153,11,229,8],[154,10,230,10,"id"],[154,12,230,12],[154,14,230,14],[154,17,230,17],[155,10,231,10,"name"],[155,14,231,14],[155,16,231,16],[155,30,231,30],[156,10,232,10,"avatar"],[156,16,232,16],[156,18,232,18],[156,67,232,67],[157,10,233,10,"rating"],[157,16,233,16],[157,18,233,18],[157,21,233,21],[158,10,234,10,"reviewCount"],[158,21,234,21],[158,23,234,23],[158,26,234,26],[159,10,235,10,"distance"],[159,18,235,18],[159,20,235,20],[159,23,235,23],[160,10,236,10,"estimatedTime"],[160,23,236,23],[160,25,236,25],[160,27,236,27],[161,10,237,10,"price"],[161,15,237,15],[161,17,237,17],[161,19,237,19],[162,10,238,10,"category"],[162,18,238,18],[162,20,238,20],[162,29,238,29],[163,10,239,10,"coordinate"],[163,20,239,20],[163,22,239,22],[164,12,240,12,"latitude"],[164,20,240,20],[164,22,240,22,"userLocation"],[164,34,240,34],[164,35,240,35,"coords"],[164,41,240,41],[164,42,240,42,"latitude"],[164,50,240,50],[164,53,240,53],[164,58,240,58],[165,12,241,12,"longitude"],[165,21,241,21],[165,23,241,23,"userLocation"],[165,35,241,35],[165,36,241,36,"coords"],[165,42,241,42],[165,43,241,43,"longitude"],[165,52,241,52],[165,55,241,55],[166,10,242,10],[166,11,242,11],[167,10,243,10,"isOnline"],[167,18,243,18],[167,20,243,20],[167,24,243,24],[168,10,244,10,"phone"],[168,15,244,15],[168,17,244,17],[169,8,245,8],[169,9,245,9],[169,11,246,8],[170,10,247,10,"id"],[170,12,247,12],[170,14,247,14],[170,17,247,17],[171,10,248,10,"name"],[171,14,248,14],[171,16,248,16],[171,33,248,33],[172,10,249,10,"avatar"],[172,16,249,16],[172,18,249,18],[172,65,249,65],[173,10,250,10,"rating"],[173,16,250,16],[173,18,250,18],[173,21,250,21],[174,10,251,10,"reviewCount"],[174,21,251,21],[174,23,251,23],[174,25,251,25],[175,10,252,10,"distance"],[175,18,252,18],[175,20,252,20],[175,23,252,23],[176,10,253,10,"estimatedTime"],[176,23,253,23],[176,25,253,25],[176,27,253,27],[177,10,254,10,"price"],[177,15,254,15],[177,17,254,17],[177,19,254,19],[178,10,255,10,"category"],[178,18,255,18],[178,20,255,20],[178,29,255,29],[179,10,256,10,"coordinate"],[179,20,256,20],[179,22,256,22],[180,12,257,12,"latitude"],[180,20,257,20],[180,22,257,22,"userLocation"],[180,34,257,34],[180,35,257,35,"coords"],[180,41,257,41],[180,42,257,42,"latitude"],[180,50,257,50],[180,53,257,53],[180,58,257,58],[181,12,258,12,"longitude"],[181,21,258,21],[181,23,258,23,"userLocation"],[181,35,258,35],[181,36,258,36,"coords"],[181,42,258,42],[181,43,258,43,"longitude"],[181,52,258,52],[181,55,258,55],[182,10,259,10],[182,11,259,11],[183,10,260,10,"isOnline"],[183,18,260,18],[183,20,260,20],[183,24,260,24],[184,10,261,10,"phone"],[184,15,261,15],[184,17,261,17],[185,8,262,8],[185,9,262,9],[185,10,263,7],[186,8,265,6,"setAvailableProviders"],[186,29,265,27],[186,30,265,28,"mockProviders"],[186,43,265,41],[186,44,265,42],[187,6,266,4],[187,7,266,5],[187,8,266,6],[187,15,266,13,"err"],[187,18,266,16],[187,20,266,18],[188,8,267,6,"console"],[188,15,267,13],[188,16,267,14,"error"],[188,21,267,19],[188,22,267,20],[188,51,267,49],[188,53,267,51,"err"],[188,56,267,54],[188,57,267,55],[189,6,268,4],[190,4,269,2],[190,5,269,3],[191,4,271,2],[191,10,271,8,"selectProvider"],[191,24,271,22],[191,27,271,25],[191,33,271,32,"providerId"],[191,43,271,50],[191,47,271,55],[192,6,272,4],[192,12,272,10,"provider"],[192,20,272,18],[192,23,272,21,"availableProviders"],[192,41,272,39],[192,42,272,40,"find"],[192,46,272,44],[192,47,272,45,"p"],[192,48,272,46],[192,52,272,50,"p"],[192,53,272,51],[192,54,272,52,"id"],[192,56,272,54],[192,61,272,59,"providerId"],[192,71,272,69],[192,72,272,70],[193,6,273,4],[193,10,273,8],[193,11,273,9,"provider"],[193,19,273,17],[193,21,273,19],[194,6,275,4],[194,10,275,8],[195,8,276,6,"setSelectedProvider"],[195,27,276,25],[195,28,276,26,"provider"],[195,36,276,34],[195,37,276,35],[196,8,277,6,"setCurrentState"],[196,23,277,21],[196,24,277,22],[196,43,277,41],[196,44,277,42],[197,8,279,6],[197,12,279,10,"currentMatch"],[197,24,279,22],[197,26,279,24],[198,10,280,8,"setCurrentMatch"],[198,25,280,23],[198,26,280,24],[199,12,281,10],[199,15,281,13,"currentMatch"],[199,27,281,25],[200,12,282,10,"providerId"],[200,22,282,20],[200,24,282,22,"provider"],[200,32,282,30],[200,33,282,31,"id"],[200,35,282,33],[201,12,283,10,"estimatedPrice"],[201,26,283,24],[201,28,283,26,"provider"],[201,36,283,34],[201,37,283,35,"price"],[202,10,284,8],[202,11,284,9],[202,12,284,10],[203,8,285,6],[204,6,286,4],[204,7,286,5],[204,8,286,6],[204,15,286,13,"err"],[204,18,286,16],[204,20,286,18],[205,8,287,6,"console"],[205,15,287,13],[205,16,287,14,"error"],[205,21,287,19],[205,22,287,20],[205,49,287,47],[205,51,287,49,"err"],[205,54,287,52],[205,55,287,53],[206,8,288,6,"setError"],[206,16,288,14],[206,17,288,15],[206,47,288,45],[206,48,288,46],[207,6,289,4],[208,4,290,2],[208,5,290,3],[209,4,292,2],[209,10,292,8,"confirmService"],[209,24,292,22],[209,27,292,25],[209,33,292,25,"confirmService"],[209,34,292,25],[209,39,292,37],[210,6,293,4],[210,10,293,8],[210,11,293,9,"selectedProvider"],[210,27,293,25],[210,31,293,29],[210,32,293,30,"currentMatch"],[210,44,293,42],[210,46,293,44],[211,6,295,4],[211,10,295,8],[212,8,296,6,"setIsLoading"],[212,20,296,18],[212,21,296,19],[212,25,296,23],[212,26,296,24],[213,8,297,6,"setCurrentState"],[213,23,297,21],[213,24,297,22],[213,35,297,33],[213,36,297,34],[215,8,299,6],[216,8,300,6,"setCurrentMatch"],[216,23,300,21],[216,24,300,22],[217,10,301,8],[217,13,301,11,"currentMatch"],[217,25,301,23],[218,10,302,8,"status"],[218,16,302,14],[218,18,302,16],[218,29,302,27],[219,10,303,8,"confirmedAt"],[219,21,303,19],[219,23,303,21],[219,27,303,25,"Date"],[219,31,303,29],[219,32,303,30],[220,8,304,6],[220,9,304,7],[220,10,304,8],[222,8,306,6],[223,8,307,6,"setTimeout"],[223,18,307,16],[223,19,307,17],[223,25,307,23],[224,10,308,8,"setCurrentState"],[224,25,308,23],[224,26,308,24],[224,39,308,37],[224,40,308,38],[225,10,309,8,"setCurrentMatch"],[225,25,309,23],[225,26,309,24,"prev"],[225,30,309,28],[225,34,309,32,"prev"],[225,38,309,36],[225,41,309,39],[226,12,310,10],[226,15,310,13,"prev"],[226,19,310,17],[227,12,311,10,"status"],[227,18,311,16],[227,20,311,18],[227,33,311,31],[228,12,312,10,"startedAt"],[228,21,312,19],[228,23,312,21],[228,27,312,25,"Date"],[228,31,312,29],[228,32,312,30],[229,10,313,8],[229,11,313,9],[229,14,313,12],[229,18,313,16],[229,19,313,17],[230,8,314,6],[230,9,314,7],[230,11,314,9],[230,15,314,13],[230,16,314,14],[231,6,316,4],[231,7,316,5],[231,8,316,6],[231,15,316,13,"err"],[231,18,316,16],[231,20,316,18],[232,8,317,6,"console"],[232,15,317,13],[232,16,317,14,"error"],[232,21,317,19],[232,22,317,20],[232,49,317,47],[232,51,317,49,"err"],[232,54,317,52],[232,55,317,53],[233,8,318,6,"setError"],[233,16,318,14],[233,17,318,15],[233,44,318,42],[233,45,318,43],[234,6,319,4],[234,7,319,5],[234,16,319,14],[235,8,320,6,"setIsLoading"],[235,20,320,18],[235,21,320,19],[235,26,320,24],[235,27,320,25],[236,6,321,4],[237,4,322,2],[237,5,322,3],[238,4,324,2],[238,10,324,8,"cancelService"],[238,23,324,21],[238,26,324,24],[238,32,324,24,"cancelService"],[238,33,324,24],[238,38,324,36],[239,6,325,4],[239,10,325,8],[240,8,326,6,"setCurrentState"],[240,23,326,21],[240,24,326,22],[240,35,326,33],[240,36,326,34],[241,8,328,6],[241,12,328,10,"currentMatch"],[241,24,328,22],[241,26,328,24],[242,10,329,8,"setCurrentMatch"],[242,25,329,23],[242,26,329,24],[243,12,330,10],[243,15,330,13,"currentMatch"],[243,27,330,25],[244,12,331,10,"status"],[244,18,331,16],[244,20,331,18],[245,10,332,8],[245,11,332,9],[245,12,332,10],[246,8,333,6],[248,8,335,6],[249,8,336,6,"setTimeout"],[249,18,336,16],[249,19,336,17],[249,25,336,23],[250,10,337,8,"resetState"],[250,20,337,18],[250,21,337,19],[250,22,337,20],[251,8,338,6],[251,9,338,7],[251,11,338,9],[251,15,338,13],[251,16,338,14],[252,6,340,4],[252,7,340,5],[252,8,340,6],[252,15,340,13,"err"],[252,18,340,16],[252,20,340,18],[253,8,341,6,"console"],[253,15,341,13],[253,16,341,14,"error"],[253,21,341,19],[253,22,341,20],[253,49,341,47],[253,51,341,49,"err"],[253,54,341,52],[253,55,341,53],[254,8,342,6,"setError"],[254,16,342,14],[254,17,342,15],[254,43,342,41],[254,44,342,42],[255,6,343,4],[256,4,344,2],[256,5,344,3],[257,4,346,2],[257,10,346,8,"completeService"],[257,25,346,23],[257,28,346,26],[257,34,346,26,"completeService"],[257,35,346,26],[257,40,346,38],[258,6,347,4],[258,10,347,8],[259,8,348,6,"setCurrentState"],[259,23,348,21],[259,24,348,22],[259,35,348,33],[259,36,348,34],[260,8,350,6],[260,12,350,10,"currentMatch"],[260,24,350,22],[260,26,350,24],[261,10,351,8,"setCurrentMatch"],[261,25,351,23],[261,26,351,24],[262,12,352,10],[262,15,352,13,"currentMatch"],[262,27,352,25],[263,12,353,10,"status"],[263,18,353,16],[263,20,353,18],[263,31,353,29],[264,12,354,10,"completedAt"],[264,23,354,21],[264,25,354,23],[264,29,354,27,"Date"],[264,33,354,31],[264,34,354,32],[264,35,354,33],[265,12,355,10,"finalPrice"],[265,22,355,20],[265,24,355,22,"currentMatch"],[265,36,355,34],[265,37,355,35,"estimatedPrice"],[266,10,356,8],[266,11,356,9],[266,12,356,10],[267,8,357,6],[269,8,359,6],[270,8,360,6,"setTimeout"],[270,18,360,16],[270,19,360,17],[270,25,360,23],[271,10,361,8,"resetState"],[271,20,361,18],[271,21,361,19],[271,22,361,20],[272,8,362,6],[272,9,362,7],[272,11,362,9],[272,15,362,13],[272,16,362,14],[273,6,364,4],[273,7,364,5],[273,8,364,6],[273,15,364,13,"err"],[273,18,364,16],[273,20,364,18],[274,8,365,6,"console"],[274,15,365,13],[274,16,365,14,"error"],[274,21,365,19],[274,22,365,20],[274,49,365,47],[274,51,365,49,"err"],[274,54,365,52],[274,55,365,53],[275,8,366,6,"setError"],[275,16,366,14],[275,17,366,15],[275,44,366,42],[275,45,366,43],[276,6,367,4],[277,4,368,2],[277,5,368,3],[278,4,370,2],[278,10,370,8,"updateLocation"],[278,24,370,22],[278,27,370,25],[278,33,370,32,"location"],[278,41,370,65],[278,45,370,70],[279,6,371,4,"setUserLocation"],[279,21,371,19],[279,22,371,20,"location"],[279,30,371,28],[279,31,371,29],[280,6,372,4],[280,12,372,10,"updateLocationInBackend"],[280,35,372,33],[280,36,372,34,"location"],[280,44,372,42],[280,45,372,43],[281,4,373,2],[281,5,373,3],[282,4,375,2],[282,10,375,8,"resetState"],[282,20,375,18],[282,23,375,21,"resetState"],[282,24,375,21],[282,29,375,27],[283,6,376,4,"setCurrentState"],[283,21,376,19],[283,22,376,20],[283,28,376,26],[283,29,376,27],[284,6,377,4,"setAvailableProviders"],[284,27,377,25],[284,28,377,26],[284,30,377,28],[284,31,377,29],[285,6,378,4,"setSelectedProvider"],[285,25,378,23],[285,26,378,24],[285,30,378,28],[285,31,378,29],[286,6,379,4,"setCurrentMatch"],[286,21,379,19],[286,22,379,20],[286,26,379,24],[286,27,379,25],[287,6,380,4,"setError"],[287,14,380,12],[287,15,380,13],[287,19,380,17],[287,20,380,18],[288,6,381,4,"setIsLoading"],[288,18,381,16],[288,19,381,17],[288,24,381,22],[288,25,381,23],[289,4,382,2],[289,5,382,3],[290,4,384,2],[290,10,384,8,"value"],[290,15,384,34],[290,18,384,37],[291,6,385,4],[292,6,386,4,"currentState"],[292,18,386,16],[293,6,387,4,"userLocation"],[293,18,387,16],[294,6,388,4,"availableProviders"],[294,24,388,22],[295,6,389,4,"selectedProvider"],[295,22,389,20],[296,6,390,4,"currentMatch"],[296,18,390,16],[297,6,391,4,"isLoading"],[297,15,391,13],[298,6,392,4,"error"],[298,11,392,9],[299,6,394,4],[300,6,395,4,"requestService"],[300,20,395,18],[301,6,396,4,"selectProvider"],[301,20,396,18],[302,6,397,4,"confirmService"],[302,20,397,18],[303,6,398,4,"cancelService"],[303,19,398,17],[304,6,399,4,"completeService"],[304,21,399,19],[305,6,400,4,"refreshProviders"],[305,22,400,20],[306,6,401,4,"updateLocation"],[306,20,401,18],[307,6,402,4,"resetState"],[308,4,403,2],[308,5,403,3],[309,4,405,2],[309,24,406,4],[309,28,406,4,"_jsxDevRuntime"],[309,42,406,4],[309,43,406,4,"jsxDEV"],[309,49,406,4],[309,51,406,5,"MatchingContext"],[309,66,406,20],[309,67,406,21,"Provider"],[309,75,406,29],[310,6,406,30,"value"],[310,11,406,35],[310,13,406,37,"value"],[310,18,406,43],[311,6,406,43,"children"],[311,14,406,43],[311,16,407,7,"children"],[312,4,407,15],[313,6,407,15,"fileName"],[313,14,407,15],[313,16,407,15,"_jsxFileName"],[313,28,407,15],[314,6,407,15,"lineNumber"],[314,16,407,15],[315,6,407,15,"columnNumber"],[315,18,407,15],[316,4,407,15],[316,11,408,30],[316,12,408,31],[317,2,410,0],[317,3,410,1],[318,2,410,2,"exports"],[318,9,410,2],[318,10,410,2,"MatchingProvider"],[318,26,410,2],[318,29,410,2,"MatchingProvider"],[318,45,410,2],[319,2,412,7],[319,8,412,13,"useMatching"],[319,19,412,24],[319,22,412,27,"useMatching"],[319,23,412,27],[319,28,412,54],[320,4,413,2],[320,10,413,8,"context"],[320,17,413,15],[320,20,413,18],[320,24,413,18,"useContext"],[320,41,413,28],[320,43,413,29,"MatchingContext"],[320,58,413,44],[320,59,413,45],[321,4,414,2],[321,8,414,6],[321,9,414,7,"context"],[321,16,414,14],[321,18,414,16],[322,6,415,4],[322,12,415,10],[322,16,415,14,"Error"],[322,21,415,19],[322,22,415,20],[322,74,415,72],[322,75,415,73],[323,4,416,2],[324,4,417,2],[324,11,417,9,"context"],[324,18,417,16],[325,2,418,0],[325,3,418,1],[326,2,418,2,"exports"],[326,9,418,2],[326,10,418,2,"useMatching"],[326,21,418,2],[326,24,418,2,"useMatching"],[326,35,418,2],[327,0,418,2],[327,3]],"functionMap":{"names":["<global>","MatchingProvider","useEffect$argument_0","setInterval$argument_0","<anonymous>","initializeLocation","updateLocationInBackend","requestService","setTimeout$argument_0","refreshProviders","selectProvider","availableProviders.find$argument_0","confirmService","setCurrentMatch$argument_0","cancelService","completeService","updateLocation","resetState","useMatching"],"mappings":"AAA;iECiF;YCa;GDE;YCG;6BCI;ODE;WEG;KFE;GDC;6BIE;GJkB;kCKE;GLS;yBME;iBC+C;ODE;GNS;2BQE;GRgE;yBSE;6CCC,wBD;GTkB;yBWE;iBJe;wBKE;gBLI;OIC;GXQ;wBaE;iBNY;OME;GbM;0BcE;iBPc;OOE;GdM;yBeE;GfG;qBgBE;GhBO;CD4B;2BkBE;ClBM"}},"type":"js/module"}]}