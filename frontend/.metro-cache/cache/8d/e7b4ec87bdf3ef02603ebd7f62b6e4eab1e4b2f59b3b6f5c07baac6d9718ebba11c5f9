{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // TODO(TS) remove if not necessary after rewrite\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.TEST_MAX_IF_NOT_NAN = void 0;\n  exports.fireAfterInterval = fireAfterInterval;\n  exports.isnan = exports.isValidNumber = void 0;\n  const isnan = v => Number.isNaN(v);\n\n  // TODO(TS) remove if not necessary after rewrite\n  exports.isnan = isnan;\n  const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\n  exports.isValidNumber = isValidNumber;\n  const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n  exports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\n  const VEC_LEN_SQ = ({\n    x = 0,\n    y = 0\n  } = {}) => x * x + y * y;\n  exports.VEC_LEN_SQ = VEC_LEN_SQ;\n  const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n  exports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\n  function fireAfterInterval(method, interval) {\n    if (!interval) {\n      method();\n      return null;\n    }\n    return setTimeout(() => method(), interval);\n  }\n});","lineCount":33,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,3,0,"Object"],[5,8,3,0],[5,9,3,0,"defineProperty"],[5,23,3,0],[5,24,3,0,"exports"],[5,31,3,0],[6,4,3,0,"value"],[6,9,3,0],[7,2,3,0],[8,2,3,0,"exports"],[8,9,3,0],[8,10,3,0,"VEC_LEN_SQ"],[8,20,3,0],[8,23,3,0,"exports"],[8,30,3,0],[8,31,3,0,"TEST_MIN_IF_NOT_NAN"],[8,50,3,0],[8,53,3,0,"exports"],[8,60,3,0],[8,61,3,0,"TEST_MAX_IF_NOT_NAN"],[8,80,3,0],[9,2,3,0,"exports"],[9,9,3,0],[9,10,3,0,"fireAfterInterval"],[9,27,3,0],[9,30,3,0,"fireAfterInterval"],[9,47,3,0],[10,2,3,0,"exports"],[10,9,3,0],[10,10,3,0,"isnan"],[10,15,3,0],[10,18,3,0,"exports"],[10,25,3,0],[10,26,3,0,"isValidNumber"],[10,39,3,0],[11,2,4,7],[11,8,4,13,"isnan"],[11,13,4,18],[11,16,4,21,"v"],[11,17,4,22],[11,21,4,26,"Number"],[11,27,4,32],[11,28,4,33,"isNaN"],[11,33,4,38],[11,34,4,39,"v"],[11,35,4,40],[11,36,4,41],[13,2,6,0],[14,2,6,0,"exports"],[14,9,6,0],[14,10,6,0,"isnan"],[14,15,6,0],[14,18,6,0,"isnan"],[14,23,6,0],[15,2,7,7],[15,8,7,13,"isValidNumber"],[15,21,7,26],[15,24,7,29,"v"],[15,25,7,30],[15,29,7,34],[15,36,7,41,"v"],[15,37,7,42],[15,42,7,47],[15,50,7,55],[15,54,7,59],[15,55,7,60,"Number"],[15,61,7,66],[15,62,7,67,"isNaN"],[15,67,7,72],[15,68,7,73,"v"],[15,69,7,74],[15,70,7,75],[16,2,7,76,"exports"],[16,9,7,76],[16,10,7,76,"isValidNumber"],[16,23,7,76],[16,26,7,76,"isValidNumber"],[16,39,7,76],[17,2,8,7],[17,8,8,13,"TEST_MIN_IF_NOT_NAN"],[17,27,8,32],[17,30,8,35,"TEST_MIN_IF_NOT_NAN"],[17,31,8,36,"value"],[17,36,8,41],[17,38,8,43,"limit"],[17,43,8,48],[17,48,8,53],[17,49,8,54,"isnan"],[17,54,8,59],[17,55,8,60,"limit"],[17,60,8,65],[17,61,8,66],[17,66,8,71,"limit"],[17,71,8,76],[17,74,8,79],[17,75,8,80],[17,79,8,84,"value"],[17,84,8,89],[17,88,8,93,"limit"],[17,93,8,98],[17,97,8,102,"limit"],[17,102,8,107],[17,106,8,111],[17,107,8,112],[17,111,8,116,"value"],[17,116,8,121],[17,120,8,125,"limit"],[17,125,8,130],[17,126,8,131],[18,2,8,132,"exports"],[18,9,8,132],[18,10,8,132,"TEST_MIN_IF_NOT_NAN"],[18,29,8,132],[18,32,8,132,"TEST_MIN_IF_NOT_NAN"],[18,51,8,132],[19,2,9,7],[19,8,9,13,"VEC_LEN_SQ"],[19,18,9,23],[19,21,9,26,"VEC_LEN_SQ"],[19,22,9,27],[20,4,10,2,"x"],[20,5,10,3],[20,8,10,6],[20,9,10,7],[21,4,11,2,"y"],[21,5,11,3],[21,8,11,6],[22,2,12,0],[22,3,12,1],[22,6,12,4],[22,7,12,5],[22,8,12,6],[22,13,12,11,"x"],[22,14,12,12],[22,17,12,15,"x"],[22,18,12,16],[22,21,12,19,"y"],[22,22,12,20],[22,25,12,23,"y"],[22,26,12,24],[23,2,12,25,"exports"],[23,9,12,25],[23,10,12,25,"VEC_LEN_SQ"],[23,20,12,25],[23,23,12,25,"VEC_LEN_SQ"],[23,33,12,25],[24,2,13,7],[24,8,13,13,"TEST_MAX_IF_NOT_NAN"],[24,27,13,32],[24,30,13,35,"TEST_MAX_IF_NOT_NAN"],[24,31,13,36,"value"],[24,36,13,41],[24,38,13,43,"max"],[24,41,13,46],[24,46,13,51],[24,47,13,52,"isnan"],[24,52,13,57],[24,53,13,58,"max"],[24,56,13,61],[24,57,13,62],[24,62,13,67,"max"],[24,65,13,70],[24,68,13,73],[24,69,13,74],[24,73,13,78,"value"],[24,78,13,83],[24,81,13,86,"max"],[24,84,13,89],[24,88,13,93,"max"],[24,91,13,96],[24,95,13,100],[24,96,13,101],[24,100,13,105,"value"],[24,105,13,110],[24,108,13,113,"max"],[24,111,13,116],[24,112,13,117],[25,2,13,118,"exports"],[25,9,13,118],[25,10,13,118,"TEST_MAX_IF_NOT_NAN"],[25,29,13,118],[25,32,13,118,"TEST_MAX_IF_NOT_NAN"],[25,51,13,118],[26,2,14,7],[26,11,14,16,"fireAfterInterval"],[26,28,14,33,"fireAfterInterval"],[26,29,14,34,"method"],[26,35,14,40],[26,37,14,42,"interval"],[26,45,14,50],[26,47,14,52],[27,4,15,2],[27,8,15,6],[27,9,15,7,"interval"],[27,17,15,15],[27,19,15,17],[28,6,16,4,"method"],[28,12,16,10],[28,13,16,11],[28,14,16,12],[29,6,17,4],[29,13,17,11],[29,17,17,15],[30,4,18,2],[31,4,19,2],[31,11,19,9,"setTimeout"],[31,21,19,19],[31,22,19,20],[31,28,19,26,"method"],[31,34,19,32],[31,35,19,33],[31,36,19,34],[31,38,19,36,"interval"],[31,46,19,44],[31,47,19,45],[32,2,20,0],[33,0,20,1],[33,3]],"functionMap":{"names":["<global>","isnan","isValidNumber","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","TEST_MAX_IF_NOT_NAN","fireAfterInterval","setTimeout$argument_0"],"mappings":"AAA;qBCG,oBD;6BEG,8CF;mCGC,gGH;0BIC;wBJG;mCKC,kFL;OMC;oBCK,cD;CNC"}},"type":"js/module"}]}