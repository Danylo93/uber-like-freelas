{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":89,"index":89}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"expo-location","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":90},"end":{"line":2,"column":42,"index":132}}],"key":"GNP7AGCKsBRUhlnTZ4lIPpbkT9E=","exportNames":["*"]}},{"name":"../services/api","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":133},"end":{"line":3,"column":45,"index":178}}],"key":"Pr5/EB33W7mJGi+ygccy+pUf1E8=","exportNames":["*"]}},{"name":"./AuthContext","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":179},"end":{"line":4,"column":40,"index":219}}],"key":"YmpzODa+dVz64UAAYTI+RwJeEt0=","exportNames":["*"]}},{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useMatching = exports.MatchingProvider = void 0;\n  var _react = _interopRequireWildcard(require(_dependencyMap[0], \"react\"));\n  var Location = _interopRequireWildcard(require(_dependencyMap[1], \"expo-location\"));\n  var _api = require(_dependencyMap[2], \"../services/api\");\n  var _AuthContext = require(_dependencyMap[3], \"./AuthContext\");\n  var _jsxDevRuntime = require(_dependencyMap[4], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/src/contexts/MatchingContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(); // Service cancelled\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  const MatchingContext = /*#__PURE__*/(0, _react.createContext)(undefined);\n  const MatchingProvider = ({\n    children\n  }) => {\n    _s();\n    const {\n      user\n    } = (0, _AuthContext.useAuth)();\n\n    // State\n    const [currentState, setCurrentState] = (0, _react.useState)('idle');\n    const [userLocation, setUserLocation] = (0, _react.useState)(null);\n    const [availableProviders, setAvailableProviders] = (0, _react.useState)([]);\n    const [selectedProvider, setSelectedProvider] = (0, _react.useState)(null);\n    const [currentMatch, setCurrentMatch] = (0, _react.useState)(null);\n    const [isLoading, setIsLoading] = (0, _react.useState)(false);\n    const [error, setError] = (0, _react.useState)(null);\n\n    // Initialize location\n    (0, _react.useEffect)(() => {\n      initializeLocation();\n    }, []);\n\n    // Auto-refresh providers when in searching state\n    (0, _react.useEffect)(() => {\n      let interval;\n      if (currentState === 'searching') {\n        interval = setInterval(() => {\n          refreshProviders();\n        }, 5000); // Refresh every 5 seconds\n      }\n      return () => {\n        if (interval) clearInterval(interval);\n      };\n    }, [currentState]);\n    const initializeLocation = async () => {\n      try {\n        const {\n          status\n        } = await Location.requestForegroundPermissionsAsync();\n        if (status !== 'granted') {\n          setError('Permissão de localização é necessária');\n          return;\n        }\n        const location = await Location.getCurrentPositionAsync({\n          accuracy: Location.Accuracy.High\n        });\n        setUserLocation(location);\n        await updateLocationInBackend(location);\n      } catch (err) {\n        console.error('Error getting location:', err);\n        setError('Erro ao obter localização');\n      }\n    };\n    const updateLocationInBackend = async location => {\n      try {\n        await _api.apiService.updateLocation({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude\n        });\n      } catch (err) {\n        console.error('Error updating location in backend:', err);\n      }\n    };\n    const requestService = async (category, title, description, address) => {\n      if (!userLocation) {\n        setError('Localização não disponível');\n        return;\n      }\n      try {\n        setIsLoading(true);\n        setError(null);\n        setCurrentState('searching');\n\n        // Create service request\n        const serviceRequest = await _api.apiService.createServiceRequest({\n          category,\n          title,\n          description,\n          location: {\n            latitude: userLocation.coords.latitude,\n            longitude: userLocation.coords.longitude\n          },\n          address\n        });\n\n        // Create match object\n        const match = {\n          id: serviceRequest.id,\n          clientId: user.id,\n          providerId: '',\n          category,\n          title,\n          description,\n          status: 'searching',\n          clientLocation: {\n            latitude: userLocation.coords.latitude,\n            longitude: userLocation.coords.longitude\n          },\n          address,\n          estimatedPrice: 0,\n          createdAt: new Date()\n        };\n        setCurrentMatch(match);\n\n        // Start looking for providers\n        await refreshProviders();\n\n        // Simulate provider search\n        setTimeout(() => {\n          setCurrentState('providers_found');\n        }, 2000);\n      } catch (err) {\n        console.error('Error requesting service:', err);\n        setError('Erro ao solicitar serviço');\n        setCurrentState('idle');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const refreshProviders = async () => {\n      if (!userLocation) return;\n      try {\n        // In a real app, this would call an API to get nearby providers\n        // For now, we'll generate mock data based on location\n        const mockProviders = [{\n          id: '1',\n          name: 'João Silva',\n          avatar: 'https://randomuser.me/api/portraits/men/1.jpg',\n          rating: 4.8,\n          reviewCount: 127,\n          distance: 0.8,\n          estimatedTime: 12,\n          price: 85,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude + 0.005,\n            longitude: userLocation.coords.longitude + 0.005\n          },\n          isOnline: true,\n          phone: '+55 11 99999-1111'\n        }, {\n          id: '2',\n          name: 'Maria Santos',\n          avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n          rating: 4.9,\n          reviewCount: 203,\n          distance: 1.2,\n          estimatedTime: 18,\n          price: 75,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude - 0.008,\n            longitude: userLocation.coords.longitude + 0.003\n          },\n          isOnline: true,\n          phone: '+55 11 99999-2222'\n        }, {\n          id: '3',\n          name: 'Carlos Oliveira',\n          avatar: 'https://randomuser.me/api/portraits/men/3.jpg',\n          rating: 4.7,\n          reviewCount: 89,\n          distance: 2.1,\n          estimatedTime: 25,\n          price: 95,\n          category: 'Limpeza',\n          coordinate: {\n            latitude: userLocation.coords.latitude + 0.012,\n            longitude: userLocation.coords.longitude - 0.007\n          },\n          isOnline: true,\n          phone: '+55 11 99999-3333'\n        }];\n        setAvailableProviders(mockProviders);\n      } catch (err) {\n        console.error('Error refreshing providers:', err);\n      }\n    };\n    const selectProvider = async providerId => {\n      const provider = availableProviders.find(p => p.id === providerId);\n      if (!provider) return;\n      try {\n        setSelectedProvider(provider);\n        setCurrentState('provider_selected');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            providerId: provider.id,\n            estimatedPrice: provider.price\n          });\n        }\n      } catch (err) {\n        console.error('Error selecting provider:', err);\n        setError('Erro ao selecionar prestador');\n      }\n    };\n    const confirmService = async () => {\n      if (!selectedProvider || !currentMatch) return;\n      try {\n        setIsLoading(true);\n        setCurrentState('confirmed');\n\n        // Update match\n        setCurrentMatch({\n          ...currentMatch,\n          status: 'confirmed',\n          confirmedAt: new Date()\n        });\n\n        // In real app, notify provider and start tracking\n        setTimeout(() => {\n          setCurrentState('in_progress');\n          setCurrentMatch(prev => prev ? {\n            ...prev,\n            status: 'in_progress',\n            startedAt: new Date()\n          } : null);\n        }, 3000);\n      } catch (err) {\n        console.error('Error confirming service:', err);\n        setError('Erro ao confirmar serviço');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const cancelService = async () => {\n      try {\n        setCurrentState('cancelled');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            status: 'cancelled'\n          });\n        }\n\n        // Reset after a moment\n        setTimeout(() => {\n          resetState();\n        }, 2000);\n      } catch (err) {\n        console.error('Error cancelling service:', err);\n        setError('Erro ao cancelar serviço');\n      }\n    };\n    const completeService = async () => {\n      try {\n        setCurrentState('completed');\n        if (currentMatch) {\n          setCurrentMatch({\n            ...currentMatch,\n            status: 'completed',\n            completedAt: new Date(),\n            finalPrice: currentMatch.estimatedPrice\n          });\n        }\n\n        // Auto-reset after completion\n        setTimeout(() => {\n          resetState();\n        }, 5000);\n      } catch (err) {\n        console.error('Error completing service:', err);\n        setError('Erro ao finalizar serviço');\n      }\n    };\n    const updateLocation = async location => {\n      setUserLocation(location);\n      await updateLocationInBackend(location);\n    };\n    const resetState = () => {\n      setCurrentState('idle');\n      setAvailableProviders([]);\n      setSelectedProvider(null);\n      setCurrentMatch(null);\n      setError(null);\n      setIsLoading(false);\n    };\n    const value = {\n      // State\n      currentState,\n      userLocation,\n      availableProviders,\n      selectedProvider,\n      currentMatch,\n      isLoading,\n      error,\n      // Actions\n      requestService,\n      selectProvider,\n      confirmService,\n      cancelService,\n      completeService,\n      refreshProviders,\n      updateLocation,\n      resetState\n    };\n    return /*#__PURE__*/(0, _jsxDevRuntime.jsxDEV)(MatchingContext.Provider, {\n      value: value,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 5\n    }, this);\n  };\n  exports.MatchingProvider = MatchingProvider;\n  _s(MatchingProvider, \"L3VD38YAn1Qs783l7FHAiYU2F7E=\", false, function () {\n    return [_AuthContext.useAuth];\n  });\n  _c = MatchingProvider;\n  const useMatching = () => {\n    _s2();\n    const context = (0, _react.useContext)(MatchingContext);\n    if (!context) {\n      throw new Error('useMatching must be used within a MatchingProvider');\n    }\n    return context;\n  };\n  exports.useMatching = useMatching;\n  _s2(useMatching, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n  var _c;\n  $RefreshReg$(_c, \"MatchingProvider\");\n});","lineCount":338,"map":[[6,2,1,0],[6,6,1,0,"_react"],[6,12,1,0],[6,15,1,0,"_interopRequireWildcard"],[6,38,1,0],[6,39,1,0,"require"],[6,46,1,0],[6,47,1,0,"_dependencyMap"],[6,61,1,0],[7,2,2,0],[7,6,2,0,"Location"],[7,14,2,0],[7,17,2,0,"_interopRequireWildcard"],[7,40,2,0],[7,41,2,0,"require"],[7,48,2,0],[7,49,2,0,"_dependencyMap"],[7,63,2,0],[8,2,3,0],[8,6,3,0,"_api"],[8,10,3,0],[8,13,3,0,"require"],[8,20,3,0],[8,21,3,0,"_dependencyMap"],[8,35,3,0],[9,2,4,0],[9,6,4,0,"_AuthContext"],[9,18,4,0],[9,21,4,0,"require"],[9,28,4,0],[9,29,4,0,"_dependencyMap"],[9,43,4,0],[10,2,4,40],[10,6,4,40,"_jsxDevRuntime"],[10,20,4,40],[10,23,4,40,"require"],[10,30,4,40],[10,31,4,40,"_dependencyMap"],[10,45,4,40],[11,2,4,40],[11,6,4,40,"_jsxFileName"],[11,18,4,40],[12,4,4,40,"_s"],[12,6,4,40],[12,9,4,40,"$RefreshSig$"],[12,21,4,40],[13,4,4,40,"_s2"],[13,7,4,40],[13,10,4,40,"$RefreshSig$"],[13,22,4,40],[13,26,14,21],[14,2,14,21],[14,11,14,21,"_interopRequireWildcard"],[14,35,14,21,"e"],[14,36,14,21],[14,38,14,21,"t"],[14,39,14,21],[14,68,14,21,"WeakMap"],[14,75,14,21],[14,81,14,21,"r"],[14,82,14,21],[14,89,14,21,"WeakMap"],[14,96,14,21],[14,100,14,21,"n"],[14,101,14,21],[14,108,14,21,"WeakMap"],[14,115,14,21],[14,127,14,21,"_interopRequireWildcard"],[14,150,14,21],[14,162,14,21,"_interopRequireWildcard"],[14,163,14,21,"e"],[14,164,14,21],[14,166,14,21,"t"],[14,167,14,21],[14,176,14,21,"t"],[14,177,14,21],[14,181,14,21,"e"],[14,182,14,21],[14,186,14,21,"e"],[14,187,14,21],[14,188,14,21,"__esModule"],[14,198,14,21],[14,207,14,21,"e"],[14,208,14,21],[14,214,14,21,"o"],[14,215,14,21],[14,217,14,21,"i"],[14,218,14,21],[14,220,14,21,"f"],[14,221,14,21],[14,226,14,21,"__proto__"],[14,235,14,21],[14,243,14,21,"default"],[14,250,14,21],[14,252,14,21,"e"],[14,253,14,21],[14,270,14,21,"e"],[14,271,14,21],[14,294,14,21,"e"],[14,295,14,21],[14,320,14,21,"e"],[14,321,14,21],[14,330,14,21,"f"],[14,331,14,21],[14,337,14,21,"o"],[14,338,14,21],[14,341,14,21,"t"],[14,342,14,21],[14,345,14,21,"n"],[14,346,14,21],[14,349,14,21,"r"],[14,350,14,21],[14,358,14,21,"o"],[14,359,14,21],[14,360,14,21,"has"],[14,363,14,21],[14,364,14,21,"e"],[14,365,14,21],[14,375,14,21,"o"],[14,376,14,21],[14,377,14,21,"get"],[14,380,14,21],[14,381,14,21,"e"],[14,382,14,21],[14,385,14,21,"o"],[14,386,14,21],[14,387,14,21,"set"],[14,390,14,21],[14,391,14,21,"e"],[14,392,14,21],[14,394,14,21,"f"],[14,395,14,21],[14,411,14,21,"t"],[14,412,14,21],[14,416,14,21,"e"],[14,417,14,21],[14,433,14,21,"t"],[14,434,14,21],[14,441,14,21,"hasOwnProperty"],[14,455,14,21],[14,456,14,21,"call"],[14,460,14,21],[14,461,14,21,"e"],[14,462,14,21],[14,464,14,21,"t"],[14,465,14,21],[14,472,14,21,"i"],[14,473,14,21],[14,477,14,21,"o"],[14,478,14,21],[14,481,14,21,"Object"],[14,487,14,21],[14,488,14,21,"defineProperty"],[14,502,14,21],[14,507,14,21,"Object"],[14,513,14,21],[14,514,14,21,"getOwnPropertyDescriptor"],[14,538,14,21],[14,539,14,21,"e"],[14,540,14,21],[14,542,14,21,"t"],[14,543,14,21],[14,550,14,21,"i"],[14,551,14,21],[14,552,14,21,"get"],[14,555,14,21],[14,559,14,21,"i"],[14,560,14,21],[14,561,14,21,"set"],[14,564,14,21],[14,568,14,21,"o"],[14,569,14,21],[14,570,14,21,"f"],[14,571,14,21],[14,573,14,21,"t"],[14,574,14,21],[14,576,14,21,"i"],[14,577,14,21],[14,581,14,21,"f"],[14,582,14,21],[14,583,14,21,"t"],[14,584,14,21],[14,588,14,21,"e"],[14,589,14,21],[14,590,14,21,"t"],[14,591,14,21],[14,602,14,21,"f"],[14,603,14,21],[14,608,14,21,"e"],[14,609,14,21],[14,611,14,21,"t"],[14,612,14,21],[15,2,76,0],[15,8,76,6,"MatchingContext"],[15,23,76,21],[15,39,76,24],[15,43,76,24,"createContext"],[15,63,76,37],[15,65,76,71,"undefined"],[15,74,76,80],[15,75,76,81],[16,2,82,7],[16,8,82,13,"MatchingProvider"],[16,24,82,62],[16,27,82,65,"MatchingProvider"],[16,28,82,66],[17,4,82,68,"children"],[18,2,82,77],[18,3,82,78],[18,8,82,83],[19,4,82,83,"_s"],[19,6,82,83],[20,4,83,2],[20,10,83,8],[21,6,83,10,"user"],[22,4,83,15],[22,5,83,16],[22,8,83,19],[22,12,83,19,"useAuth"],[22,32,83,26],[22,34,83,27],[22,35,83,28],[24,4,85,2],[25,4,86,2],[25,10,86,8],[25,11,86,9,"currentState"],[25,23,86,21],[25,25,86,23,"setCurrentState"],[25,40,86,38],[25,41,86,39],[25,44,86,42],[25,48,86,42,"useState"],[25,63,86,50],[25,65,86,66],[25,71,86,72],[25,72,86,73],[26,4,87,2],[26,10,87,8],[26,11,87,9,"userLocation"],[26,23,87,21],[26,25,87,23,"setUserLocation"],[26,40,87,38],[26,41,87,39],[26,44,87,42],[26,48,87,42,"useState"],[26,63,87,50],[26,65,87,83],[26,69,87,87],[26,70,87,88],[27,4,88,2],[27,10,88,8],[27,11,88,9,"availableProviders"],[27,29,88,27],[27,31,88,29,"setAvailableProviders"],[27,52,88,50],[27,53,88,51],[27,56,88,54],[27,60,88,54,"useState"],[27,75,88,62],[27,77,88,82],[27,79,88,84],[27,80,88,85],[28,4,89,2],[28,10,89,8],[28,11,89,9,"selectedProvider"],[28,27,89,25],[28,29,89,27,"setSelectedProvider"],[28,48,89,46],[28,49,89,47],[28,52,89,50],[28,56,89,50,"useState"],[28,71,89,58],[28,73,89,83],[28,77,89,87],[28,78,89,88],[29,4,90,2],[29,10,90,8],[29,11,90,9,"currentMatch"],[29,23,90,21],[29,25,90,23,"setCurrentMatch"],[29,40,90,38],[29,41,90,39],[29,44,90,42],[29,48,90,42,"useState"],[29,63,90,50],[29,65,90,72],[29,69,90,76],[29,70,90,77],[30,4,91,2],[30,10,91,8],[30,11,91,9,"isLoading"],[30,20,91,18],[30,22,91,20,"setIsLoading"],[30,34,91,32],[30,35,91,33],[30,38,91,36],[30,42,91,36,"useState"],[30,57,91,44],[30,59,91,45],[30,64,91,50],[30,65,91,51],[31,4,92,2],[31,10,92,8],[31,11,92,9,"error"],[31,16,92,14],[31,18,92,16,"setError"],[31,26,92,24],[31,27,92,25],[31,30,92,28],[31,34,92,28,"useState"],[31,49,92,36],[31,51,92,52],[31,55,92,56],[31,56,92,57],[33,4,94,2],[34,4,95,2],[34,8,95,2,"useEffect"],[34,24,95,11],[34,26,95,12],[34,32,95,18],[35,6,96,4,"initializeLocation"],[35,24,96,22],[35,25,96,23],[35,26,96,24],[36,4,97,2],[36,5,97,3],[36,7,97,5],[36,9,97,7],[36,10,97,8],[38,4,99,2],[39,4,100,2],[39,8,100,2,"useEffect"],[39,24,100,11],[39,26,100,12],[39,32,100,18],[40,6,101,4],[40,10,101,8,"interval"],[40,18,101,32],[41,6,103,4],[41,10,103,8,"currentState"],[41,22,103,20],[41,27,103,25],[41,38,103,36],[41,40,103,38],[42,8,104,6,"interval"],[42,16,104,14],[42,19,104,17,"setInterval"],[42,30,104,28],[42,31,104,29],[42,37,104,35],[43,10,105,8,"refreshProviders"],[43,26,105,24],[43,27,105,25],[43,28,105,26],[44,8,106,6],[44,9,106,7],[44,11,106,9],[44,15,106,13],[44,16,106,14],[44,17,106,15],[44,18,106,16],[45,6,107,4],[46,6,109,4],[46,13,109,11],[46,19,109,17],[47,8,110,6],[47,12,110,10,"interval"],[47,20,110,18],[47,22,110,20,"clearInterval"],[47,35,110,33],[47,36,110,34,"interval"],[47,44,110,42],[47,45,110,43],[48,6,111,4],[48,7,111,5],[49,4,112,2],[49,5,112,3],[49,7,112,5],[49,8,112,6,"currentState"],[49,20,112,18],[49,21,112,19],[49,22,112,20],[50,4,114,2],[50,10,114,8,"initializeLocation"],[50,28,114,26],[50,31,114,29],[50,37,114,29,"initializeLocation"],[50,38,114,29],[50,43,114,41],[51,6,115,4],[51,10,115,8],[52,8,116,6],[52,14,116,12],[53,10,116,14,"status"],[54,8,116,21],[54,9,116,22],[54,12,116,25],[54,18,116,31,"Location"],[54,26,116,39],[54,27,116,40,"requestForegroundPermissionsAsync"],[54,60,116,73],[54,61,116,74],[54,62,116,75],[55,8,117,6],[55,12,117,10,"status"],[55,18,117,16],[55,23,117,21],[55,32,117,30],[55,34,117,32],[56,10,118,8,"setError"],[56,18,118,16],[56,19,118,17],[56,58,118,56],[56,59,118,57],[57,10,119,8],[58,8,120,6],[59,8,122,6],[59,14,122,12,"location"],[59,22,122,20],[59,25,122,23],[59,31,122,29,"Location"],[59,39,122,37],[59,40,122,38,"getCurrentPositionAsync"],[59,63,122,61],[59,64,122,62],[60,10,123,8,"accuracy"],[60,18,123,16],[60,20,123,18,"Location"],[60,28,123,26],[60,29,123,27,"Accuracy"],[60,37,123,35],[60,38,123,36,"High"],[61,8,124,6],[61,9,124,7],[61,10,124,8],[62,8,126,6,"setUserLocation"],[62,23,126,21],[62,24,126,22,"location"],[62,32,126,30],[62,33,126,31],[63,8,127,6],[63,14,127,12,"updateLocationInBackend"],[63,37,127,35],[63,38,127,36,"location"],[63,46,127,44],[63,47,127,45],[64,6,128,4],[64,7,128,5],[64,8,128,6],[64,15,128,13,"err"],[64,18,128,16],[64,20,128,18],[65,8,129,6,"console"],[65,15,129,13],[65,16,129,14,"error"],[65,21,129,19],[65,22,129,20],[65,47,129,45],[65,49,129,47,"err"],[65,52,129,50],[65,53,129,51],[66,8,130,6,"setError"],[66,16,130,14],[66,17,130,15],[66,44,130,42],[66,45,130,43],[67,6,131,4],[68,4,132,2],[68,5,132,3],[69,4,134,2],[69,10,134,8,"updateLocationInBackend"],[69,33,134,31],[69,36,134,34],[69,42,134,41,"location"],[69,50,134,74],[69,54,134,79],[70,6,135,4],[70,10,135,8],[71,8,136,6],[71,14,136,12,"apiService"],[71,29,136,22],[71,30,136,23,"updateLocation"],[71,44,136,37],[71,45,136,38],[72,10,137,8,"latitude"],[72,18,137,16],[72,20,137,18,"location"],[72,28,137,26],[72,29,137,27,"coords"],[72,35,137,33],[72,36,137,34,"latitude"],[72,44,137,42],[73,10,138,8,"longitude"],[73,19,138,17],[73,21,138,19,"location"],[73,29,138,27],[73,30,138,28,"coords"],[73,36,138,34],[73,37,138,35,"longitude"],[74,8,139,6],[74,9,139,7],[74,10,139,8],[75,6,140,4],[75,7,140,5],[75,8,140,6],[75,15,140,13,"err"],[75,18,140,16],[75,20,140,18],[76,8,141,6,"console"],[76,15,141,13],[76,16,141,14,"error"],[76,21,141,19],[76,22,141,20],[76,59,141,57],[76,61,141,59,"err"],[76,64,141,62],[76,65,141,63],[77,6,142,4],[78,4,143,2],[78,5,143,3],[79,4,145,2],[79,10,145,8,"requestService"],[79,24,145,22],[79,27,145,25],[79,33,145,25,"requestService"],[79,34,145,32,"category"],[79,42,145,48],[79,44,145,50,"title"],[79,49,145,63],[79,51,145,65,"description"],[79,62,145,84],[79,64,145,86,"address"],[79,71,145,101],[79,76,145,106],[80,6,146,4],[80,10,146,8],[80,11,146,9,"userLocation"],[80,23,146,21],[80,25,146,23],[81,8,147,6,"setError"],[81,16,147,14],[81,17,147,15],[81,45,147,43],[81,46,147,44],[82,8,148,6],[83,6,149,4],[84,6,151,4],[84,10,151,8],[85,8,152,6,"setIsLoading"],[85,20,152,18],[85,21,152,19],[85,25,152,23],[85,26,152,24],[86,8,153,6,"setError"],[86,16,153,14],[86,17,153,15],[86,21,153,19],[86,22,153,20],[87,8,154,6,"setCurrentState"],[87,23,154,21],[87,24,154,22],[87,35,154,33],[87,36,154,34],[89,8,156,6],[90,8,157,6],[90,14,157,12,"serviceRequest"],[90,28,157,26],[90,31,157,29],[90,37,157,35,"apiService"],[90,52,157,45],[90,53,157,46,"createServiceRequest"],[90,73,157,66],[90,74,157,67],[91,10,158,8,"category"],[91,18,158,16],[92,10,159,8,"title"],[92,15,159,13],[93,10,160,8,"description"],[93,21,160,19],[94,10,161,8,"location"],[94,18,161,16],[94,20,161,18],[95,12,162,10,"latitude"],[95,20,162,18],[95,22,162,20,"userLocation"],[95,34,162,32],[95,35,162,33,"coords"],[95,41,162,39],[95,42,162,40,"latitude"],[95,50,162,48],[96,12,163,10,"longitude"],[96,21,163,19],[96,23,163,21,"userLocation"],[96,35,163,33],[96,36,163,34,"coords"],[96,42,163,40],[96,43,163,41,"longitude"],[97,10,164,8],[97,11,164,9],[98,10,165,8,"address"],[99,8,166,6],[99,9,166,7],[99,10,166,8],[101,8,168,6],[102,8,169,6],[102,14,169,12,"match"],[102,19,169,31],[102,22,169,34],[103,10,170,8,"id"],[103,12,170,10],[103,14,170,12,"serviceRequest"],[103,28,170,26],[103,29,170,27,"id"],[103,31,170,29],[104,10,171,8,"clientId"],[104,18,171,16],[104,20,171,18,"user"],[104,24,171,22],[104,25,171,24,"id"],[104,27,171,26],[105,10,172,8,"providerId"],[105,20,172,18],[105,22,172,20],[105,24,172,22],[106,10,173,8,"category"],[106,18,173,16],[107,10,174,8,"title"],[107,15,174,13],[108,10,175,8,"description"],[108,21,175,19],[109,10,176,8,"status"],[109,16,176,14],[109,18,176,16],[109,29,176,27],[110,10,177,8,"clientLocation"],[110,24,177,22],[110,26,177,24],[111,12,178,10,"latitude"],[111,20,178,18],[111,22,178,20,"userLocation"],[111,34,178,32],[111,35,178,33,"coords"],[111,41,178,39],[111,42,178,40,"latitude"],[111,50,178,48],[112,12,179,10,"longitude"],[112,21,179,19],[112,23,179,21,"userLocation"],[112,35,179,33],[112,36,179,34,"coords"],[112,42,179,40],[112,43,179,41,"longitude"],[113,10,180,8],[113,11,180,9],[114,10,181,8,"address"],[114,17,181,15],[115,10,182,8,"estimatedPrice"],[115,24,182,22],[115,26,182,24],[115,27,182,25],[116,10,183,8,"createdAt"],[116,19,183,17],[116,21,183,19],[116,25,183,23,"Date"],[116,29,183,27],[116,30,183,28],[117,8,184,6],[117,9,184,7],[118,8,186,6,"setCurrentMatch"],[118,23,186,21],[118,24,186,22,"match"],[118,29,186,27],[118,30,186,28],[120,8,188,6],[121,8,189,6],[121,14,189,12,"refreshProviders"],[121,30,189,28],[121,31,189,29],[121,32,189,30],[123,8,191,6],[124,8,192,6,"setTimeout"],[124,18,192,16],[124,19,192,17],[124,25,192,23],[125,10,193,8,"setCurrentState"],[125,25,193,23],[125,26,193,24],[125,43,193,41],[125,44,193,42],[126,8,194,6],[126,9,194,7],[126,11,194,9],[126,15,194,13],[126,16,194,14],[127,6,196,4],[127,7,196,5],[127,8,196,6],[127,15,196,13,"err"],[127,18,196,16],[127,20,196,18],[128,8,197,6,"console"],[128,15,197,13],[128,16,197,14,"error"],[128,21,197,19],[128,22,197,20],[128,49,197,47],[128,51,197,49,"err"],[128,54,197,52],[128,55,197,53],[129,8,198,6,"setError"],[129,16,198,14],[129,17,198,15],[129,44,198,42],[129,45,198,43],[130,8,199,6,"setCurrentState"],[130,23,199,21],[130,24,199,22],[130,30,199,28],[130,31,199,29],[131,6,200,4],[131,7,200,5],[131,16,200,14],[132,8,201,6,"setIsLoading"],[132,20,201,18],[132,21,201,19],[132,26,201,24],[132,27,201,25],[133,6,202,4],[134,4,203,2],[134,5,203,3],[135,4,205,2],[135,10,205,8,"refreshProviders"],[135,26,205,24],[135,29,205,27],[135,35,205,27,"refreshProviders"],[135,36,205,27],[135,41,205,39],[136,6,206,4],[136,10,206,8],[136,11,206,9,"userLocation"],[136,23,206,21],[136,25,206,23],[137,6,208,4],[137,10,208,8],[138,8,209,6],[139,8,210,6],[140,8,211,6],[140,14,211,12,"mockProviders"],[140,27,211,44],[140,30,211,47],[140,31,212,8],[141,10,213,10,"id"],[141,12,213,12],[141,14,213,14],[141,17,213,17],[142,10,214,10,"name"],[142,14,214,14],[142,16,214,16],[142,28,214,28],[143,10,215,10,"avatar"],[143,16,215,16],[143,18,215,18],[143,65,215,65],[144,10,216,10,"rating"],[144,16,216,16],[144,18,216,18],[144,21,216,21],[145,10,217,10,"reviewCount"],[145,21,217,21],[145,23,217,23],[145,26,217,26],[146,10,218,10,"distance"],[146,18,218,18],[146,20,218,20],[146,23,218,23],[147,10,219,10,"estimatedTime"],[147,23,219,23],[147,25,219,25],[147,27,219,27],[148,10,220,10,"price"],[148,15,220,15],[148,17,220,17],[148,19,220,19],[149,10,221,10,"category"],[149,18,221,18],[149,20,221,20],[149,29,221,29],[150,10,222,10,"coordinate"],[150,20,222,20],[150,22,222,22],[151,12,223,12,"latitude"],[151,20,223,20],[151,22,223,22,"userLocation"],[151,34,223,34],[151,35,223,35,"coords"],[151,41,223,41],[151,42,223,42,"latitude"],[151,50,223,50],[151,53,223,53],[151,58,223,58],[152,12,224,12,"longitude"],[152,21,224,21],[152,23,224,23,"userLocation"],[152,35,224,35],[152,36,224,36,"coords"],[152,42,224,42],[152,43,224,43,"longitude"],[152,52,224,52],[152,55,224,55],[153,10,225,10],[153,11,225,11],[154,10,226,10,"isOnline"],[154,18,226,18],[154,20,226,20],[154,24,226,24],[155,10,227,10,"phone"],[155,15,227,15],[155,17,227,17],[156,8,228,8],[156,9,228,9],[156,11,229,8],[157,10,230,10,"id"],[157,12,230,12],[157,14,230,14],[157,17,230,17],[158,10,231,10,"name"],[158,14,231,14],[158,16,231,16],[158,30,231,30],[159,10,232,10,"avatar"],[159,16,232,16],[159,18,232,18],[159,67,232,67],[160,10,233,10,"rating"],[160,16,233,16],[160,18,233,18],[160,21,233,21],[161,10,234,10,"reviewCount"],[161,21,234,21],[161,23,234,23],[161,26,234,26],[162,10,235,10,"distance"],[162,18,235,18],[162,20,235,20],[162,23,235,23],[163,10,236,10,"estimatedTime"],[163,23,236,23],[163,25,236,25],[163,27,236,27],[164,10,237,10,"price"],[164,15,237,15],[164,17,237,17],[164,19,237,19],[165,10,238,10,"category"],[165,18,238,18],[165,20,238,20],[165,29,238,29],[166,10,239,10,"coordinate"],[166,20,239,20],[166,22,239,22],[167,12,240,12,"latitude"],[167,20,240,20],[167,22,240,22,"userLocation"],[167,34,240,34],[167,35,240,35,"coords"],[167,41,240,41],[167,42,240,42,"latitude"],[167,50,240,50],[167,53,240,53],[167,58,240,58],[168,12,241,12,"longitude"],[168,21,241,21],[168,23,241,23,"userLocation"],[168,35,241,35],[168,36,241,36,"coords"],[168,42,241,42],[168,43,241,43,"longitude"],[168,52,241,52],[168,55,241,55],[169,10,242,10],[169,11,242,11],[170,10,243,10,"isOnline"],[170,18,243,18],[170,20,243,20],[170,24,243,24],[171,10,244,10,"phone"],[171,15,244,15],[171,17,244,17],[172,8,245,8],[172,9,245,9],[172,11,246,8],[173,10,247,10,"id"],[173,12,247,12],[173,14,247,14],[173,17,247,17],[174,10,248,10,"name"],[174,14,248,14],[174,16,248,16],[174,33,248,33],[175,10,249,10,"avatar"],[175,16,249,16],[175,18,249,18],[175,65,249,65],[176,10,250,10,"rating"],[176,16,250,16],[176,18,250,18],[176,21,250,21],[177,10,251,10,"reviewCount"],[177,21,251,21],[177,23,251,23],[177,25,251,25],[178,10,252,10,"distance"],[178,18,252,18],[178,20,252,20],[178,23,252,23],[179,10,253,10,"estimatedTime"],[179,23,253,23],[179,25,253,25],[179,27,253,27],[180,10,254,10,"price"],[180,15,254,15],[180,17,254,17],[180,19,254,19],[181,10,255,10,"category"],[181,18,255,18],[181,20,255,20],[181,29,255,29],[182,10,256,10,"coordinate"],[182,20,256,20],[182,22,256,22],[183,12,257,12,"latitude"],[183,20,257,20],[183,22,257,22,"userLocation"],[183,34,257,34],[183,35,257,35,"coords"],[183,41,257,41],[183,42,257,42,"latitude"],[183,50,257,50],[183,53,257,53],[183,58,257,58],[184,12,258,12,"longitude"],[184,21,258,21],[184,23,258,23,"userLocation"],[184,35,258,35],[184,36,258,36,"coords"],[184,42,258,42],[184,43,258,43,"longitude"],[184,52,258,52],[184,55,258,55],[185,10,259,10],[185,11,259,11],[186,10,260,10,"isOnline"],[186,18,260,18],[186,20,260,20],[186,24,260,24],[187,10,261,10,"phone"],[187,15,261,15],[187,17,261,17],[188,8,262,8],[188,9,262,9],[188,10,263,7],[189,8,265,6,"setAvailableProviders"],[189,29,265,27],[189,30,265,28,"mockProviders"],[189,43,265,41],[189,44,265,42],[190,6,266,4],[190,7,266,5],[190,8,266,6],[190,15,266,13,"err"],[190,18,266,16],[190,20,266,18],[191,8,267,6,"console"],[191,15,267,13],[191,16,267,14,"error"],[191,21,267,19],[191,22,267,20],[191,51,267,49],[191,53,267,51,"err"],[191,56,267,54],[191,57,267,55],[192,6,268,4],[193,4,269,2],[193,5,269,3],[194,4,271,2],[194,10,271,8,"selectProvider"],[194,24,271,22],[194,27,271,25],[194,33,271,32,"providerId"],[194,43,271,50],[194,47,271,55],[195,6,272,4],[195,12,272,10,"provider"],[195,20,272,18],[195,23,272,21,"availableProviders"],[195,41,272,39],[195,42,272,40,"find"],[195,46,272,44],[195,47,272,45,"p"],[195,48,272,46],[195,52,272,50,"p"],[195,53,272,51],[195,54,272,52,"id"],[195,56,272,54],[195,61,272,59,"providerId"],[195,71,272,69],[195,72,272,70],[196,6,273,4],[196,10,273,8],[196,11,273,9,"provider"],[196,19,273,17],[196,21,273,19],[197,6,275,4],[197,10,275,8],[198,8,276,6,"setSelectedProvider"],[198,27,276,25],[198,28,276,26,"provider"],[198,36,276,34],[198,37,276,35],[199,8,277,6,"setCurrentState"],[199,23,277,21],[199,24,277,22],[199,43,277,41],[199,44,277,42],[200,8,279,6],[200,12,279,10,"currentMatch"],[200,24,279,22],[200,26,279,24],[201,10,280,8,"setCurrentMatch"],[201,25,280,23],[201,26,280,24],[202,12,281,10],[202,15,281,13,"currentMatch"],[202,27,281,25],[203,12,282,10,"providerId"],[203,22,282,20],[203,24,282,22,"provider"],[203,32,282,30],[203,33,282,31,"id"],[203,35,282,33],[204,12,283,10,"estimatedPrice"],[204,26,283,24],[204,28,283,26,"provider"],[204,36,283,34],[204,37,283,35,"price"],[205,10,284,8],[205,11,284,9],[205,12,284,10],[206,8,285,6],[207,6,286,4],[207,7,286,5],[207,8,286,6],[207,15,286,13,"err"],[207,18,286,16],[207,20,286,18],[208,8,287,6,"console"],[208,15,287,13],[208,16,287,14,"error"],[208,21,287,19],[208,22,287,20],[208,49,287,47],[208,51,287,49,"err"],[208,54,287,52],[208,55,287,53],[209,8,288,6,"setError"],[209,16,288,14],[209,17,288,15],[209,47,288,45],[209,48,288,46],[210,6,289,4],[211,4,290,2],[211,5,290,3],[212,4,292,2],[212,10,292,8,"confirmService"],[212,24,292,22],[212,27,292,25],[212,33,292,25,"confirmService"],[212,34,292,25],[212,39,292,37],[213,6,293,4],[213,10,293,8],[213,11,293,9,"selectedProvider"],[213,27,293,25],[213,31,293,29],[213,32,293,30,"currentMatch"],[213,44,293,42],[213,46,293,44],[214,6,295,4],[214,10,295,8],[215,8,296,6,"setIsLoading"],[215,20,296,18],[215,21,296,19],[215,25,296,23],[215,26,296,24],[216,8,297,6,"setCurrentState"],[216,23,297,21],[216,24,297,22],[216,35,297,33],[216,36,297,34],[218,8,299,6],[219,8,300,6,"setCurrentMatch"],[219,23,300,21],[219,24,300,22],[220,10,301,8],[220,13,301,11,"currentMatch"],[220,25,301,23],[221,10,302,8,"status"],[221,16,302,14],[221,18,302,16],[221,29,302,27],[222,10,303,8,"confirmedAt"],[222,21,303,19],[222,23,303,21],[222,27,303,25,"Date"],[222,31,303,29],[222,32,303,30],[223,8,304,6],[223,9,304,7],[223,10,304,8],[225,8,306,6],[226,8,307,6,"setTimeout"],[226,18,307,16],[226,19,307,17],[226,25,307,23],[227,10,308,8,"setCurrentState"],[227,25,308,23],[227,26,308,24],[227,39,308,37],[227,40,308,38],[228,10,309,8,"setCurrentMatch"],[228,25,309,23],[228,26,309,24,"prev"],[228,30,309,28],[228,34,309,32,"prev"],[228,38,309,36],[228,41,309,39],[229,12,310,10],[229,15,310,13,"prev"],[229,19,310,17],[230,12,311,10,"status"],[230,18,311,16],[230,20,311,18],[230,33,311,31],[231,12,312,10,"startedAt"],[231,21,312,19],[231,23,312,21],[231,27,312,25,"Date"],[231,31,312,29],[231,32,312,30],[232,10,313,8],[232,11,313,9],[232,14,313,12],[232,18,313,16],[232,19,313,17],[233,8,314,6],[233,9,314,7],[233,11,314,9],[233,15,314,13],[233,16,314,14],[234,6,316,4],[234,7,316,5],[234,8,316,6],[234,15,316,13,"err"],[234,18,316,16],[234,20,316,18],[235,8,317,6,"console"],[235,15,317,13],[235,16,317,14,"error"],[235,21,317,19],[235,22,317,20],[235,49,317,47],[235,51,317,49,"err"],[235,54,317,52],[235,55,317,53],[236,8,318,6,"setError"],[236,16,318,14],[236,17,318,15],[236,44,318,42],[236,45,318,43],[237,6,319,4],[237,7,319,5],[237,16,319,14],[238,8,320,6,"setIsLoading"],[238,20,320,18],[238,21,320,19],[238,26,320,24],[238,27,320,25],[239,6,321,4],[240,4,322,2],[240,5,322,3],[241,4,324,2],[241,10,324,8,"cancelService"],[241,23,324,21],[241,26,324,24],[241,32,324,24,"cancelService"],[241,33,324,24],[241,38,324,36],[242,6,325,4],[242,10,325,8],[243,8,326,6,"setCurrentState"],[243,23,326,21],[243,24,326,22],[243,35,326,33],[243,36,326,34],[244,8,328,6],[244,12,328,10,"currentMatch"],[244,24,328,22],[244,26,328,24],[245,10,329,8,"setCurrentMatch"],[245,25,329,23],[245,26,329,24],[246,12,330,10],[246,15,330,13,"currentMatch"],[246,27,330,25],[247,12,331,10,"status"],[247,18,331,16],[247,20,331,18],[248,10,332,8],[248,11,332,9],[248,12,332,10],[249,8,333,6],[251,8,335,6],[252,8,336,6,"setTimeout"],[252,18,336,16],[252,19,336,17],[252,25,336,23],[253,10,337,8,"resetState"],[253,20,337,18],[253,21,337,19],[253,22,337,20],[254,8,338,6],[254,9,338,7],[254,11,338,9],[254,15,338,13],[254,16,338,14],[255,6,340,4],[255,7,340,5],[255,8,340,6],[255,15,340,13,"err"],[255,18,340,16],[255,20,340,18],[256,8,341,6,"console"],[256,15,341,13],[256,16,341,14,"error"],[256,21,341,19],[256,22,341,20],[256,49,341,47],[256,51,341,49,"err"],[256,54,341,52],[256,55,341,53],[257,8,342,6,"setError"],[257,16,342,14],[257,17,342,15],[257,43,342,41],[257,44,342,42],[258,6,343,4],[259,4,344,2],[259,5,344,3],[260,4,346,2],[260,10,346,8,"completeService"],[260,25,346,23],[260,28,346,26],[260,34,346,26,"completeService"],[260,35,346,26],[260,40,346,38],[261,6,347,4],[261,10,347,8],[262,8,348,6,"setCurrentState"],[262,23,348,21],[262,24,348,22],[262,35,348,33],[262,36,348,34],[263,8,350,6],[263,12,350,10,"currentMatch"],[263,24,350,22],[263,26,350,24],[264,10,351,8,"setCurrentMatch"],[264,25,351,23],[264,26,351,24],[265,12,352,10],[265,15,352,13,"currentMatch"],[265,27,352,25],[266,12,353,10,"status"],[266,18,353,16],[266,20,353,18],[266,31,353,29],[267,12,354,10,"completedAt"],[267,23,354,21],[267,25,354,23],[267,29,354,27,"Date"],[267,33,354,31],[267,34,354,32],[267,35,354,33],[268,12,355,10,"finalPrice"],[268,22,355,20],[268,24,355,22,"currentMatch"],[268,36,355,34],[268,37,355,35,"estimatedPrice"],[269,10,356,8],[269,11,356,9],[269,12,356,10],[270,8,357,6],[272,8,359,6],[273,8,360,6,"setTimeout"],[273,18,360,16],[273,19,360,17],[273,25,360,23],[274,10,361,8,"resetState"],[274,20,361,18],[274,21,361,19],[274,22,361,20],[275,8,362,6],[275,9,362,7],[275,11,362,9],[275,15,362,13],[275,16,362,14],[276,6,364,4],[276,7,364,5],[276,8,364,6],[276,15,364,13,"err"],[276,18,364,16],[276,20,364,18],[277,8,365,6,"console"],[277,15,365,13],[277,16,365,14,"error"],[277,21,365,19],[277,22,365,20],[277,49,365,47],[277,51,365,49,"err"],[277,54,365,52],[277,55,365,53],[278,8,366,6,"setError"],[278,16,366,14],[278,17,366,15],[278,44,366,42],[278,45,366,43],[279,6,367,4],[280,4,368,2],[280,5,368,3],[281,4,370,2],[281,10,370,8,"updateLocation"],[281,24,370,22],[281,27,370,25],[281,33,370,32,"location"],[281,41,370,65],[281,45,370,70],[282,6,371,4,"setUserLocation"],[282,21,371,19],[282,22,371,20,"location"],[282,30,371,28],[282,31,371,29],[283,6,372,4],[283,12,372,10,"updateLocationInBackend"],[283,35,372,33],[283,36,372,34,"location"],[283,44,372,42],[283,45,372,43],[284,4,373,2],[284,5,373,3],[285,4,375,2],[285,10,375,8,"resetState"],[285,20,375,18],[285,23,375,21,"resetState"],[285,24,375,21],[285,29,375,27],[286,6,376,4,"setCurrentState"],[286,21,376,19],[286,22,376,20],[286,28,376,26],[286,29,376,27],[287,6,377,4,"setAvailableProviders"],[287,27,377,25],[287,28,377,26],[287,30,377,28],[287,31,377,29],[288,6,378,4,"setSelectedProvider"],[288,25,378,23],[288,26,378,24],[288,30,378,28],[288,31,378,29],[289,6,379,4,"setCurrentMatch"],[289,21,379,19],[289,22,379,20],[289,26,379,24],[289,27,379,25],[290,6,380,4,"setError"],[290,14,380,12],[290,15,380,13],[290,19,380,17],[290,20,380,18],[291,6,381,4,"setIsLoading"],[291,18,381,16],[291,19,381,17],[291,24,381,22],[291,25,381,23],[292,4,382,2],[292,5,382,3],[293,4,384,2],[293,10,384,8,"value"],[293,15,384,34],[293,18,384,37],[294,6,385,4],[295,6,386,4,"currentState"],[295,18,386,16],[296,6,387,4,"userLocation"],[296,18,387,16],[297,6,388,4,"availableProviders"],[297,24,388,22],[298,6,389,4,"selectedProvider"],[298,22,389,20],[299,6,390,4,"currentMatch"],[299,18,390,16],[300,6,391,4,"isLoading"],[300,15,391,13],[301,6,392,4,"error"],[301,11,392,9],[302,6,394,4],[303,6,395,4,"requestService"],[303,20,395,18],[304,6,396,4,"selectProvider"],[304,20,396,18],[305,6,397,4,"confirmService"],[305,20,397,18],[306,6,398,4,"cancelService"],[306,19,398,17],[307,6,399,4,"completeService"],[307,21,399,19],[308,6,400,4,"refreshProviders"],[308,22,400,20],[309,6,401,4,"updateLocation"],[309,20,401,18],[310,6,402,4,"resetState"],[311,4,403,2],[311,5,403,3],[312,4,405,2],[312,24,406,4],[312,28,406,4,"_jsxDevRuntime"],[312,42,406,4],[312,43,406,4,"jsxDEV"],[312,49,406,4],[312,51,406,5,"MatchingContext"],[312,66,406,20],[312,67,406,21,"Provider"],[312,75,406,29],[313,6,406,30,"value"],[313,11,406,35],[313,13,406,37,"value"],[313,18,406,43],[314,6,406,43,"children"],[314,14,406,43],[314,16,407,7,"children"],[315,4,407,15],[316,6,407,15,"fileName"],[316,14,407,15],[316,16,407,15,"_jsxFileName"],[316,28,407,15],[317,6,407,15,"lineNumber"],[317,16,407,15],[318,6,407,15,"columnNumber"],[318,18,407,15],[319,4,407,15],[319,11,408,30],[319,12,408,31],[320,2,410,0],[320,3,410,1],[321,2,410,2,"exports"],[321,9,410,2],[321,10,410,2,"MatchingProvider"],[321,26,410,2],[321,29,410,2,"MatchingProvider"],[321,45,410,2],[322,2,410,2,"_s"],[322,4,410,2],[322,5,82,13,"MatchingProvider"],[322,21,82,62],[323,4,82,62],[323,12,83,19,"useAuth"],[323,32,83,26],[324,2,83,26],[325,2,83,26,"_c"],[325,4,83,26],[325,7,82,13,"MatchingProvider"],[325,23,82,62],[326,2,412,7],[326,8,412,13,"useMatching"],[326,19,412,24],[326,22,412,27,"useMatching"],[326,23,412,27],[326,28,412,54],[327,4,412,54,"_s2"],[327,7,412,54],[328,4,413,2],[328,10,413,8,"context"],[328,17,413,15],[328,20,413,18],[328,24,413,18,"useContext"],[328,41,413,28],[328,43,413,29,"MatchingContext"],[328,58,413,44],[328,59,413,45],[329,4,414,2],[329,8,414,6],[329,9,414,7,"context"],[329,16,414,14],[329,18,414,16],[330,6,415,4],[330,12,415,10],[330,16,415,14,"Error"],[330,21,415,19],[330,22,415,20],[330,74,415,72],[330,75,415,73],[331,4,416,2],[332,4,417,2],[332,11,417,9,"context"],[332,18,417,16],[333,2,418,0],[333,3,418,1],[334,2,418,2,"exports"],[334,9,418,2],[334,10,418,2,"useMatching"],[334,21,418,2],[334,24,418,2,"useMatching"],[334,35,418,2],[335,2,418,2,"_s2"],[335,5,418,2],[335,6,412,13,"useMatching"],[335,17,412,24],[336,2,412,24],[336,6,412,24,"_c"],[336,8,412,24],[337,2,412,24,"$RefreshReg$"],[337,14,412,24],[337,15,412,24,"_c"],[337,17,412,24],[338,0,412,24],[338,3]],"functionMap":{"names":["<global>","MatchingProvider","useEffect$argument_0","setInterval$argument_0","<anonymous>","initializeLocation","updateLocationInBackend","requestService","setTimeout$argument_0","refreshProviders","selectProvider","availableProviders.find$argument_0","confirmService","setCurrentMatch$argument_0","cancelService","completeService","updateLocation","resetState","useMatching"],"mappings":"AAA;iECiF;YCa;GDE;YCG;6BCI;ODE;WEG;KFE;GDC;6BIE;GJkB;kCKE;GLS;yBME;iBC+C;ODE;GNS;2BQE;GRgE;yBSE;6CCC,wBD;GTkB;yBWE;iBJe;wBKE;gBLI;OIC;GXQ;wBaE;iBNY;OME;GbM;0BcE;iBPc;OOE;GdM;yBeE;GfG;qBgBE;GhBO;CD4B;2BkBE;ClBM"}},"type":"js/module"}]}