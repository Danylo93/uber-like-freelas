{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // Implementation taken from Flutter's LeastSquareSolver\n  // https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  class Vector {\n    constructor(length) {\n      this.offset = 0;\n      this.length = length;\n      this.elements = new Array(length);\n    }\n    static fromVOL(values, offset, length) {\n      const result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n    get(index) {\n      return this.elements[this.offset + index];\n    }\n    set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n    dot(other) {\n      let result = 0;\n      for (let i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n    norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }\n  class Matrix {\n    constructor(rows, columns) {\n      this.columns = columns;\n      this.elements = new Array(rows * columns);\n    }\n    get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n    set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n    getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }\n\n  // An nth degree polynomial fit to a dataset.\n  class PolynomialFit {\n    // The polynomial coefficients of the fit.\n    //\n    // For each `i`, the element `coefficients[i]` is the coefficient of\n    // the `i`-th power of the variable.\n\n    // Creates a polynomial fit of the given degree.\n    //\n    // There are n + 1 coefficients in a fit of degree n.\n    constructor(degree) {\n      this.coefficients = new Array(degree + 1);\n    }\n  }\n  const precisionErrorTolerance = 1e-10;\n\n  // Uses the least-squares algorithm to fit a polynomial to a set of data.\n  class LeastSquareSolver {\n    // The x-coordinates of each data point.\n\n    // The y-coordinates of each data point.\n\n    // The weight to use for each data point.\n\n    // Creates a least-squares solver.\n    //\n    // The [x], [y], and [w] arguments must not be null.\n    constructor(x, y, w) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n    }\n\n    // Fits a polynomial of the given degree to the data points.\n    //\n    // When there is not enough data to fit a curve null is returned.\n    solve(degree) {\n      if (degree > this.x.length) {\n        // Not enough data to fit a curve.\n        return null;\n      }\n      const result = new PolynomialFit(degree);\n\n      // Shorthands for the purpose of notation equivalence to original C++ code.\n      const m = this.x.length;\n      const n = degree + 1;\n\n      // Expand the X vector to a matrix A, pre-multiplied by the weights.\n      const a = new Matrix(n, m);\n      for (let h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (let i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n\n      // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n      // Orthonormal basis, column-major ordVectorer.\n      const q = new Matrix(n, m);\n      // Upper triangular matrix, row-major order.\n      const r = new Matrix(n, m);\n      for (let j = 0; j < n; j += 1) {\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, a.get(j, h));\n        }\n        for (let i = 0; i < j; i += 1) {\n          const dot = q.getRow(j).dot(q.getRow(i));\n          for (let h = 0; h < m; h += 1) {\n            q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n          }\n        }\n        const norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          // Vectors are linearly dependent or zero so no solution.\n          return null;\n        }\n        const inverseNorm = 1.0 / norm;\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) * inverseNorm);\n        }\n        for (let i = 0; i < n; i += 1) {\n          r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n        }\n      }\n\n      // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n      // We just work from bottom-right to top-left calculating B's coefficients.\n      const wy = new Vector(m);\n      for (let h = 0; h < m; h += 1) {\n        wy.set(h, this.y[h] * this.w[h]);\n      }\n      for (let i = n - 1; i >= 0; i -= 1) {\n        result.coefficients[i] = q.getRow(i).dot(wy);\n        for (let j = n - 1; j > i; j -= 1) {\n          result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n        }\n        result.coefficients[i] /= r.get(i, i);\n      }\n      return result;\n    }\n  }\n  exports.default = LeastSquareSolver;\n});","lineCount":159,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0,"Object"],[6,8,4,0],[6,9,4,0,"defineProperty"],[6,23,4,0],[6,24,4,0,"exports"],[6,31,4,0],[7,4,4,0,"value"],[7,9,4,0],[8,2,4,0],[9,2,4,0,"exports"],[9,9,4,0],[9,10,4,0,"default"],[9,17,4,0],[10,2,6,0],[10,8,6,6,"Vector"],[10,14,6,12],[10,15,6,13],[11,4,7,2,"constructor"],[11,15,7,13,"constructor"],[11,16,7,14,"length"],[11,22,7,20],[11,24,7,22],[12,6,8,4],[12,10,8,8],[12,11,8,9,"offset"],[12,17,8,15],[12,20,8,18],[12,21,8,19],[13,6,9,4],[13,10,9,8],[13,11,9,9,"length"],[13,17,9,15],[13,20,9,18,"length"],[13,26,9,24],[14,6,10,4],[14,10,10,8],[14,11,10,9,"elements"],[14,19,10,17],[14,22,10,20],[14,26,10,24,"Array"],[14,31,10,29],[14,32,10,30,"length"],[14,38,10,36],[14,39,10,37],[15,4,11,2],[16,4,12,2],[16,11,12,9,"fromVOL"],[16,18,12,16,"fromVOL"],[16,19,12,17,"values"],[16,25,12,23],[16,27,12,25,"offset"],[16,33,12,31],[16,35,12,33,"length"],[16,41,12,39],[16,43,12,41],[17,6,13,4],[17,12,13,10,"result"],[17,18,13,16],[17,21,13,19],[17,25,13,23,"Vector"],[17,31,13,29],[17,32,13,30],[17,33,13,31],[17,34,13,32],[18,6,14,4,"result"],[18,12,14,10],[18,13,14,11,"offset"],[18,19,14,17],[18,22,14,20,"offset"],[18,28,14,26],[19,6,15,4,"result"],[19,12,15,10],[19,13,15,11,"length"],[19,19,15,17],[19,22,15,20,"length"],[19,28,15,26],[20,6,16,4,"result"],[20,12,16,10],[20,13,16,11,"elements"],[20,21,16,19],[20,24,16,22,"values"],[20,30,16,28],[21,6,17,4],[21,13,17,11,"result"],[21,19,17,17],[22,4,18,2],[23,4,19,2,"get"],[23,7,19,5,"get"],[23,8,19,6,"index"],[23,13,19,11],[23,15,19,13],[24,6,20,4],[24,13,20,11],[24,17,20,15],[24,18,20,16,"elements"],[24,26,20,24],[24,27,20,25],[24,31,20,29],[24,32,20,30,"offset"],[24,38,20,36],[24,41,20,39,"index"],[24,46,20,44],[24,47,20,45],[25,4,21,2],[26,4,22,2,"set"],[26,7,22,5,"set"],[26,8,22,6,"index"],[26,13,22,11],[26,15,22,13,"value"],[26,20,22,18],[26,22,22,20],[27,6,23,4],[27,10,23,8],[27,11,23,9,"elements"],[27,19,23,17],[27,20,23,18],[27,24,23,22],[27,25,23,23,"offset"],[27,31,23,29],[27,34,23,32,"index"],[27,39,23,37],[27,40,23,38],[27,43,23,41,"value"],[27,48,23,46],[28,4,24,2],[29,4,25,2,"dot"],[29,7,25,5,"dot"],[29,8,25,6,"other"],[29,13,25,11],[29,15,25,13],[30,6,26,4],[30,10,26,8,"result"],[30,16,26,14],[30,19,26,17],[30,20,26,18],[31,6,27,4],[31,11,27,9],[31,15,27,13,"i"],[31,16,27,14],[31,19,27,17],[31,20,27,18],[31,22,27,20,"i"],[31,23,27,21],[31,26,27,24],[31,30,27,28],[31,31,27,29,"length"],[31,37,27,35],[31,39,27,37,"i"],[31,40,27,38],[31,42,27,40],[31,44,27,42],[32,8,28,6,"result"],[32,14,28,12],[32,18,28,16],[32,22,28,20],[32,23,28,21,"get"],[32,26,28,24],[32,27,28,25,"i"],[32,28,28,26],[32,29,28,27],[32,32,28,30,"other"],[32,37,28,35],[32,38,28,36,"get"],[32,41,28,39],[32,42,28,40,"i"],[32,43,28,41],[32,44,28,42],[33,6,29,4],[34,6,30,4],[34,13,30,11,"result"],[34,19,30,17],[35,4,31,2],[36,4,32,2,"norm"],[36,8,32,6,"norm"],[36,9,32,6],[36,11,32,9],[37,6,33,4],[37,13,33,11,"Math"],[37,17,33,15],[37,18,33,16,"sqrt"],[37,22,33,20],[37,23,33,21],[37,27,33,25],[37,28,33,26,"dot"],[37,31,33,29],[37,32,33,30],[37,36,33,34],[37,37,33,35],[37,38,33,36],[38,4,34,2],[39,2,35,0],[40,2,36,0],[40,8,36,6,"Matrix"],[40,14,36,12],[40,15,36,13],[41,4,37,2,"constructor"],[41,15,37,13,"constructor"],[41,16,37,14,"rows"],[41,20,37,18],[41,22,37,20,"columns"],[41,29,37,27],[41,31,37,29],[42,6,38,4],[42,10,38,8],[42,11,38,9,"columns"],[42,18,38,16],[42,21,38,19,"columns"],[42,28,38,26],[43,6,39,4],[43,10,39,8],[43,11,39,9,"elements"],[43,19,39,17],[43,22,39,20],[43,26,39,24,"Array"],[43,31,39,29],[43,32,39,30,"rows"],[43,36,39,34],[43,39,39,37,"columns"],[43,46,39,44],[43,47,39,45],[44,4,40,2],[45,4,41,2,"get"],[45,7,41,5,"get"],[45,8,41,6,"row"],[45,11,41,9],[45,13,41,11,"column"],[45,19,41,17],[45,21,41,19],[46,6,42,4],[46,13,42,11],[46,17,42,15],[46,18,42,16,"elements"],[46,26,42,24],[46,27,42,25,"row"],[46,30,42,28],[46,33,42,31],[46,37,42,35],[46,38,42,36,"columns"],[46,45,42,43],[46,48,42,46,"column"],[46,54,42,52],[46,55,42,53],[47,4,43,2],[48,4,44,2,"set"],[48,7,44,5,"set"],[48,8,44,6,"row"],[48,11,44,9],[48,13,44,11,"column"],[48,19,44,17],[48,21,44,19,"value"],[48,26,44,24],[48,28,44,26],[49,6,45,4],[49,10,45,8],[49,11,45,9,"elements"],[49,19,45,17],[49,20,45,18,"row"],[49,23,45,21],[49,26,45,24],[49,30,45,28],[49,31,45,29,"columns"],[49,38,45,36],[49,41,45,39,"column"],[49,47,45,45],[49,48,45,46],[49,51,45,49,"value"],[49,56,45,54],[50,4,46,2],[51,4,47,2,"getRow"],[51,10,47,8,"getRow"],[51,11,47,9,"row"],[51,14,47,12],[51,16,47,14],[52,6,48,4],[52,13,48,11,"Vector"],[52,19,48,17],[52,20,48,18,"fromVOL"],[52,27,48,25],[52,28,48,26],[52,32,48,30],[52,33,48,31,"elements"],[52,41,48,39],[52,43,48,41,"row"],[52,46,48,44],[52,49,48,47],[52,53,48,51],[52,54,48,52,"columns"],[52,61,48,59],[52,63,48,61],[52,67,48,65],[52,68,48,66,"columns"],[52,75,48,73],[52,76,48,74],[53,4,49,2],[54,2,50,0],[56,2,52,0],[57,2,53,0],[57,8,53,6,"PolynomialFit"],[57,21,53,19],[57,22,53,20],[58,4,54,2],[59,4,55,2],[60,4,56,2],[61,4,57,2],[63,4,59,2],[64,4,60,2],[65,4,61,2],[66,4,62,2,"constructor"],[66,15,62,13,"constructor"],[66,16,62,14,"degree"],[66,22,62,20],[66,24,62,22],[67,6,63,4],[67,10,63,8],[67,11,63,9,"coefficients"],[67,23,63,21],[67,26,63,24],[67,30,63,28,"Array"],[67,35,63,33],[67,36,63,34,"degree"],[67,42,63,40],[67,45,63,43],[67,46,63,44],[67,47,63,45],[68,4,64,2],[69,2,65,0],[70,2,66,0],[70,8,66,6,"precisionErrorTolerance"],[70,31,66,29],[70,34,66,32],[70,39,66,37],[72,2,68,0],[73,2,69,15],[73,8,69,21,"LeastSquareSolver"],[73,25,69,38],[73,26,69,39],[74,4,70,2],[76,4,72,2],[78,4,74,2],[80,4,76,2],[81,4,77,2],[82,4,78,2],[83,4,79,2,"constructor"],[83,15,79,13,"constructor"],[83,16,79,14,"x"],[83,17,79,15],[83,19,79,17,"y"],[83,20,79,18],[83,22,79,20,"w"],[83,23,79,21],[83,25,79,23],[84,6,80,4],[84,10,80,8],[84,11,80,9,"x"],[84,12,80,10],[84,15,80,13,"x"],[84,16,80,14],[85,6,81,4],[85,10,81,8],[85,11,81,9,"y"],[85,12,81,10],[85,15,81,13,"y"],[85,16,81,14],[86,6,82,4],[86,10,82,8],[86,11,82,9,"w"],[86,12,82,10],[86,15,82,13,"w"],[86,16,82,14],[87,4,83,2],[89,4,85,2],[90,4,86,2],[91,4,87,2],[92,4,88,2,"solve"],[92,9,88,7,"solve"],[92,10,88,8,"degree"],[92,16,88,14],[92,18,88,16],[93,6,89,4],[93,10,89,8,"degree"],[93,16,89,14],[93,19,89,17],[93,23,89,21],[93,24,89,22,"x"],[93,25,89,23],[93,26,89,24,"length"],[93,32,89,30],[93,34,89,32],[94,8,90,6],[95,8,91,6],[95,15,91,13],[95,19,91,17],[96,6,92,4],[97,6,93,4],[97,12,93,10,"result"],[97,18,93,16],[97,21,93,19],[97,25,93,23,"PolynomialFit"],[97,38,93,36],[97,39,93,37,"degree"],[97,45,93,43],[97,46,93,44],[99,6,95,4],[100,6,96,4],[100,12,96,10,"m"],[100,13,96,11],[100,16,96,14],[100,20,96,18],[100,21,96,19,"x"],[100,22,96,20],[100,23,96,21,"length"],[100,29,96,27],[101,6,97,4],[101,12,97,10,"n"],[101,13,97,11],[101,16,97,14,"degree"],[101,22,97,20],[101,25,97,23],[101,26,97,24],[103,6,99,4],[104,6,100,4],[104,12,100,10,"a"],[104,13,100,11],[104,16,100,14],[104,20,100,18,"Matrix"],[104,26,100,24],[104,27,100,25,"n"],[104,28,100,26],[104,30,100,28,"m"],[104,31,100,29],[104,32,100,30],[105,6,101,4],[105,11,101,9],[105,15,101,13,"h"],[105,16,101,14],[105,19,101,17],[105,20,101,18],[105,22,101,20,"h"],[105,23,101,21],[105,26,101,24,"m"],[105,27,101,25],[105,29,101,27,"h"],[105,30,101,28],[105,32,101,30],[105,34,101,32],[106,8,102,6,"a"],[106,9,102,7],[106,10,102,8,"set"],[106,13,102,11],[106,14,102,12],[106,15,102,13],[106,17,102,15,"h"],[106,18,102,16],[106,20,102,18],[106,24,102,22],[106,25,102,23,"w"],[106,26,102,24],[106,27,102,25,"h"],[106,28,102,26],[106,29,102,27],[106,30,102,28],[107,8,103,6],[107,13,103,11],[107,17,103,15,"i"],[107,18,103,16],[107,21,103,19],[107,22,103,20],[107,24,103,22,"i"],[107,25,103,23],[107,28,103,26,"n"],[107,29,103,27],[107,31,103,29,"i"],[107,32,103,30],[107,34,103,32],[107,36,103,34],[108,10,104,8,"a"],[108,11,104,9],[108,12,104,10,"set"],[108,15,104,13],[108,16,104,14,"i"],[108,17,104,15],[108,19,104,17,"h"],[108,20,104,18],[108,22,104,20,"a"],[108,23,104,21],[108,24,104,22,"get"],[108,27,104,25],[108,28,104,26,"i"],[108,29,104,27],[108,32,104,30],[108,33,104,31],[108,35,104,33,"h"],[108,36,104,34],[108,37,104,35],[108,40,104,38],[108,44,104,42],[108,45,104,43,"x"],[108,46,104,44],[108,47,104,45,"h"],[108,48,104,46],[108,49,104,47],[108,50,104,48],[109,8,105,6],[110,6,106,4],[112,6,108,4],[114,6,110,4],[115,6,111,4],[115,12,111,10,"q"],[115,13,111,11],[115,16,111,14],[115,20,111,18,"Matrix"],[115,26,111,24],[115,27,111,25,"n"],[115,28,111,26],[115,30,111,28,"m"],[115,31,111,29],[115,32,111,30],[116,6,112,4],[117,6,113,4],[117,12,113,10,"r"],[117,13,113,11],[117,16,113,14],[117,20,113,18,"Matrix"],[117,26,113,24],[117,27,113,25,"n"],[117,28,113,26],[117,30,113,28,"m"],[117,31,113,29],[117,32,113,30],[118,6,114,4],[118,11,114,9],[118,15,114,13,"j"],[118,16,114,14],[118,19,114,17],[118,20,114,18],[118,22,114,20,"j"],[118,23,114,21],[118,26,114,24,"n"],[118,27,114,25],[118,29,114,27,"j"],[118,30,114,28],[118,34,114,32],[118,35,114,33],[118,37,114,35],[119,8,115,6],[119,13,115,11],[119,17,115,15,"h"],[119,18,115,16],[119,21,115,19],[119,22,115,20],[119,24,115,22,"h"],[119,25,115,23],[119,28,115,26,"m"],[119,29,115,27],[119,31,115,29,"h"],[119,32,115,30],[119,36,115,34],[119,37,115,35],[119,39,115,37],[120,10,116,8,"q"],[120,11,116,9],[120,12,116,10,"set"],[120,15,116,13],[120,16,116,14,"j"],[120,17,116,15],[120,19,116,17,"h"],[120,20,116,18],[120,22,116,20,"a"],[120,23,116,21],[120,24,116,22,"get"],[120,27,116,25],[120,28,116,26,"j"],[120,29,116,27],[120,31,116,29,"h"],[120,32,116,30],[120,33,116,31],[120,34,116,32],[121,8,117,6],[122,8,118,6],[122,13,118,11],[122,17,118,15,"i"],[122,18,118,16],[122,21,118,19],[122,22,118,20],[122,24,118,22,"i"],[122,25,118,23],[122,28,118,26,"j"],[122,29,118,27],[122,31,118,29,"i"],[122,32,118,30],[122,36,118,34],[122,37,118,35],[122,39,118,37],[123,10,119,8],[123,16,119,14,"dot"],[123,19,119,17],[123,22,119,20,"q"],[123,23,119,21],[123,24,119,22,"getRow"],[123,30,119,28],[123,31,119,29,"j"],[123,32,119,30],[123,33,119,31],[123,34,119,32,"dot"],[123,37,119,35],[123,38,119,36,"q"],[123,39,119,37],[123,40,119,38,"getRow"],[123,46,119,44],[123,47,119,45,"i"],[123,48,119,46],[123,49,119,47],[123,50,119,48],[124,10,120,8],[124,15,120,13],[124,19,120,17,"h"],[124,20,120,18],[124,23,120,21],[124,24,120,22],[124,26,120,24,"h"],[124,27,120,25],[124,30,120,28,"m"],[124,31,120,29],[124,33,120,31,"h"],[124,34,120,32],[124,38,120,36],[124,39,120,37],[124,41,120,39],[125,12,121,10,"q"],[125,13,121,11],[125,14,121,12,"set"],[125,17,121,15],[125,18,121,16,"j"],[125,19,121,17],[125,21,121,19,"h"],[125,22,121,20],[125,24,121,22,"q"],[125,25,121,23],[125,26,121,24,"get"],[125,29,121,27],[125,30,121,28,"j"],[125,31,121,29],[125,33,121,31,"h"],[125,34,121,32],[125,35,121,33],[125,38,121,36,"dot"],[125,41,121,39],[125,44,121,42,"q"],[125,45,121,43],[125,46,121,44,"get"],[125,49,121,47],[125,50,121,48,"i"],[125,51,121,49],[125,53,121,51,"h"],[125,54,121,52],[125,55,121,53],[125,56,121,54],[126,10,122,8],[127,8,123,6],[128,8,124,6],[128,14,124,12,"norm"],[128,18,124,16],[128,21,124,19,"q"],[128,22,124,20],[128,23,124,21,"getRow"],[128,29,124,27],[128,30,124,28,"j"],[128,31,124,29],[128,32,124,30],[128,33,124,31,"norm"],[128,37,124,35],[128,38,124,36],[128,39,124,37],[129,8,125,6],[129,12,125,10,"norm"],[129,16,125,14],[129,19,125,17,"precisionErrorTolerance"],[129,42,125,40],[129,44,125,42],[130,10,126,8],[131,10,127,8],[131,17,127,15],[131,21,127,19],[132,8,128,6],[133,8,129,6],[133,14,129,12,"inverseNorm"],[133,25,129,23],[133,28,129,26],[133,31,129,29],[133,34,129,32,"norm"],[133,38,129,36],[134,8,130,6],[134,13,130,11],[134,17,130,15,"h"],[134,18,130,16],[134,21,130,19],[134,22,130,20],[134,24,130,22,"h"],[134,25,130,23],[134,28,130,26,"m"],[134,29,130,27],[134,31,130,29,"h"],[134,32,130,30],[134,36,130,34],[134,37,130,35],[134,39,130,37],[135,10,131,8,"q"],[135,11,131,9],[135,12,131,10,"set"],[135,15,131,13],[135,16,131,14,"j"],[135,17,131,15],[135,19,131,17,"h"],[135,20,131,18],[135,22,131,20,"q"],[135,23,131,21],[135,24,131,22,"get"],[135,27,131,25],[135,28,131,26,"j"],[135,29,131,27],[135,31,131,29,"h"],[135,32,131,30],[135,33,131,31],[135,36,131,34,"inverseNorm"],[135,47,131,45],[135,48,131,46],[136,8,132,6],[137,8,133,6],[137,13,133,11],[137,17,133,15,"i"],[137,18,133,16],[137,21,133,19],[137,22,133,20],[137,24,133,22,"i"],[137,25,133,23],[137,28,133,26,"n"],[137,29,133,27],[137,31,133,29,"i"],[137,32,133,30],[137,36,133,34],[137,37,133,35],[137,39,133,37],[138,10,134,8,"r"],[138,11,134,9],[138,12,134,10,"set"],[138,15,134,13],[138,16,134,14,"j"],[138,17,134,15],[138,19,134,17,"i"],[138,20,134,18],[138,22,134,20,"i"],[138,23,134,21],[138,26,134,24,"j"],[138,27,134,25],[138,30,134,28],[138,33,134,31],[138,36,134,34,"q"],[138,37,134,35],[138,38,134,36,"getRow"],[138,44,134,42],[138,45,134,43,"j"],[138,46,134,44],[138,47,134,45],[138,48,134,46,"dot"],[138,51,134,49],[138,52,134,50,"a"],[138,53,134,51],[138,54,134,52,"getRow"],[138,60,134,58],[138,61,134,59,"i"],[138,62,134,60],[138,63,134,61],[138,64,134,62],[138,65,134,63],[139,8,135,6],[140,6,136,4],[142,6,138,4],[143,6,139,4],[144,6,140,4],[144,12,140,10,"wy"],[144,14,140,12],[144,17,140,15],[144,21,140,19,"Vector"],[144,27,140,25],[144,28,140,26,"m"],[144,29,140,27],[144,30,140,28],[145,6,141,4],[145,11,141,9],[145,15,141,13,"h"],[145,16,141,14],[145,19,141,17],[145,20,141,18],[145,22,141,20,"h"],[145,23,141,21],[145,26,141,24,"m"],[145,27,141,25],[145,29,141,27,"h"],[145,30,141,28],[145,34,141,32],[145,35,141,33],[145,37,141,35],[146,8,142,6,"wy"],[146,10,142,8],[146,11,142,9,"set"],[146,14,142,12],[146,15,142,13,"h"],[146,16,142,14],[146,18,142,16],[146,22,142,20],[146,23,142,21,"y"],[146,24,142,22],[146,25,142,23,"h"],[146,26,142,24],[146,27,142,25],[146,30,142,28],[146,34,142,32],[146,35,142,33,"w"],[146,36,142,34],[146,37,142,35,"h"],[146,38,142,36],[146,39,142,37],[146,40,142,38],[147,6,143,4],[148,6,144,4],[148,11,144,9],[148,15,144,13,"i"],[148,16,144,14],[148,19,144,17,"n"],[148,20,144,18],[148,23,144,21],[148,24,144,22],[148,26,144,24,"i"],[148,27,144,25],[148,31,144,29],[148,32,144,30],[148,34,144,32,"i"],[148,35,144,33],[148,39,144,37],[148,40,144,38],[148,42,144,40],[149,8,145,6,"result"],[149,14,145,12],[149,15,145,13,"coefficients"],[149,27,145,25],[149,28,145,26,"i"],[149,29,145,27],[149,30,145,28],[149,33,145,31,"q"],[149,34,145,32],[149,35,145,33,"getRow"],[149,41,145,39],[149,42,145,40,"i"],[149,43,145,41],[149,44,145,42],[149,45,145,43,"dot"],[149,48,145,46],[149,49,145,47,"wy"],[149,51,145,49],[149,52,145,50],[150,8,146,6],[150,13,146,11],[150,17,146,15,"j"],[150,18,146,16],[150,21,146,19,"n"],[150,22,146,20],[150,25,146,23],[150,26,146,24],[150,28,146,26,"j"],[150,29,146,27],[150,32,146,30,"i"],[150,33,146,31],[150,35,146,33,"j"],[150,36,146,34],[150,40,146,38],[150,41,146,39],[150,43,146,41],[151,10,147,8,"result"],[151,16,147,14],[151,17,147,15,"coefficients"],[151,29,147,27],[151,30,147,28,"i"],[151,31,147,29],[151,32,147,30],[151,36,147,34,"r"],[151,37,147,35],[151,38,147,36,"get"],[151,41,147,39],[151,42,147,40,"i"],[151,43,147,41],[151,45,147,43,"j"],[151,46,147,44],[151,47,147,45],[151,50,147,48,"result"],[151,56,147,54],[151,57,147,55,"coefficients"],[151,69,147,67],[151,70,147,68,"j"],[151,71,147,69],[151,72,147,70],[152,8,148,6],[153,8,149,6,"result"],[153,14,149,12],[153,15,149,13,"coefficients"],[153,27,149,25],[153,28,149,26,"i"],[153,29,149,27],[153,30,149,28],[153,34,149,32,"r"],[153,35,149,33],[153,36,149,34,"get"],[153,39,149,37],[153,40,149,38,"i"],[153,41,149,39],[153,43,149,41,"i"],[153,44,149,42],[153,45,149,43],[154,6,150,4],[155,6,151,4],[155,13,151,11,"result"],[155,19,151,17],[156,4,152,2],[157,2,153,0],[158,2,153,1,"exports"],[158,9,153,1],[158,10,153,1,"default"],[158,17,153,1],[158,20,153,1,"LeastSquareSolver"],[158,37,153,1],[159,0,153,1],[159,3]],"functionMap":{"names":["<global>","Vector","Vector#constructor","Vector.fromVOL","Vector#get","Vector#set","Vector#dot","Vector#norm","Matrix","Matrix#constructor","Matrix#get","Matrix#set","Matrix#getRow","PolynomialFit","PolynomialFit#constructor","LeastSquareSolver","constructor","solve"],"mappings":"AAA;ACK;ECC;GDI;EEC;GFM;EGC;GHE;EIC;GJE;EKC;GLM;EMC;GNE;CDC;AQC;ECC;GDG;EEC;GFE;EGC;GHE;EIC;GJE;CRC;AaG;ECS;GDE;CbC;eeI;ECU;GDI;EEK;GFgE;CfC"}},"type":"js/module"}]}