{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.googleDirectionsService = void 0;\n  class GoogleDirectionsService {\n    apiKey = null;\n    baseUrl = 'https://maps.googleapis.com/maps/api/directions/json';\n    constructor() {\n      // Initialize with API key from environment variables\n      this.apiKey = process.env.EXPO_PUBLIC_GOOGLE_DIRECTIONS_API_KEY || null;\n      console.log('üó∫Ô∏è GoogleDirectionsService initialized', this.apiKey ? 'with real API key' : 'with mock data');\n    }\n    setApiKey(apiKey) {\n      this.apiKey = apiKey;\n    }\n\n    /**\n     * Get directions between two points\n     */\n    async getDirections(origin, destination, waypoints, options) {\n      try {\n        if (!this.apiKey) {\n          console.log('‚ö†Ô∏è Google Directions API key not set, using mock data');\n          return this.getMockDirections(origin, destination);\n        }\n        const params = new URLSearchParams();\n\n        // Format origin and destination\n        const formattedOrigin = typeof origin === 'string' ? origin : `${origin.latitude},${origin.longitude}`;\n        const formattedDestination = typeof destination === 'string' ? destination : `${destination.latitude},${destination.longitude}`;\n        params.append('origin', formattedOrigin);\n        params.append('destination', formattedDestination);\n        params.append('key', this.apiKey);\n        params.append('mode', options?.mode || 'driving');\n        params.append('language', 'pt-BR');\n        params.append('units', 'metric');\n\n        // Add waypoints if provided\n        if (waypoints && waypoints.length > 0) {\n          const waypointsStr = waypoints.map(wp => `${wp.latitude},${wp.longitude}`).join('|');\n          params.append('waypoints', waypointsStr);\n          if (options?.optimize) {\n            params.append('waypoints', `optimize:true|${waypointsStr}`);\n          }\n        }\n\n        // Add avoid options\n        const avoid = [];\n        if (options?.avoidTolls) avoid.push('tolls');\n        if (options?.avoidHighways) avoid.push('highways');\n        if (options?.avoidFerries) avoid.push('ferries');\n        if (avoid.length > 0) {\n          params.append('avoid', avoid.join('|'));\n        }\n        const url = `${this.baseUrl}?${params.toString()}`;\n        console.log('üó∫Ô∏è Requesting directions from Google API');\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.status !== 'OK') {\n          throw new Error(`Google Directions API error: ${data.status} - ${data.error_message}`);\n        }\n        return data;\n      } catch (error) {\n        console.error('‚ùå Error fetching directions:', error);\n        // Fallback to mock data on error\n        return this.getMockDirections(origin, destination);\n      }\n    }\n\n    /**\n     * Mock directions for development/testing\n     */\n    getMockDirections(origin, destination) {\n      // Create realistic mock data based on origin/destination\n      const mockDistance = Math.random() * 15000 + 1000; // 1-16km\n      const mockDuration = mockDistance / 1000 * 3 * 60; // Approximate driving time\n\n      const originCoord = typeof origin === 'string' ? {\n        lat: -23.5505,\n        lng: -46.6333\n      } // S√£o Paulo default\n      : {\n        lat: origin.latitude,\n        lng: origin.longitude\n      };\n      const destCoord = typeof destination === 'string' ? {\n        lat: -23.5505 + (Math.random() - 0.5) * 0.1,\n        lng: -46.6333 + (Math.random() - 0.5) * 0.1\n      } : {\n        lat: destination.latitude,\n        lng: destination.longitude\n      };\n\n      // Generate a simple polyline path\n      const steps = this.generateMockSteps(originCoord, destCoord, 5);\n      return {\n        routes: [{\n          distance: {\n            text: `${(mockDistance / 1000).toFixed(1)} km`,\n            value: Math.round(mockDistance)\n          },\n          duration: {\n            text: `${Math.round(mockDuration / 60)} min`,\n            value: Math.round(mockDuration)\n          },\n          overview_polyline: {\n            points: this.encodePath([originCoord, destCoord]) // Simplified\n          },\n          legs: [{\n            distance: {\n              text: `${(mockDistance / 1000).toFixed(1)} km`,\n              value: Math.round(mockDistance)\n            },\n            duration: {\n              text: `${Math.round(mockDuration / 60)} min`,\n              value: Math.round(mockDuration)\n            },\n            start_address: 'Origem',\n            end_address: 'Destino',\n            start_location: originCoord,\n            end_location: destCoord,\n            steps: steps\n          }]\n        }],\n        status: 'OK'\n      };\n    }\n\n    /**\n     * Generate mock steps for directions\n     */\n    generateMockSteps(origin, destination, numSteps) {\n      const steps = [];\n      const latStep = (destination.lat - origin.lat) / numSteps;\n      const lngStep = (destination.lng - origin.lng) / numSteps;\n      for (let i = 0; i < numSteps; i++) {\n        const stepDistance = Math.random() * 1000 + 200; // 200m - 1.2km per step\n        const stepDuration = stepDistance / 1000 * 2 * 60; // ~2 min per km\n\n        steps.push({\n          distance: {\n            text: `${Math.round(stepDistance)}m`,\n            value: Math.round(stepDistance)\n          },\n          duration: {\n            text: `${Math.round(stepDuration / 60)} min`,\n            value: Math.round(stepDuration)\n          },\n          html_instructions: this.getMockInstruction(i, numSteps),\n          polyline: {\n            points: 'mock_polyline'\n          },\n          start_location: {\n            lat: origin.lat + latStep * i,\n            lng: origin.lng + lngStep * i\n          },\n          end_location: {\n            lat: origin.lat + latStep * (i + 1),\n            lng: origin.lng + lngStep * (i + 1)\n          },\n          maneuver: i === 0 ? 'depart' : i === numSteps - 1 ? 'arrive' : this.getRandomManeuver()\n        });\n      }\n      return steps;\n    }\n\n    /**\n     * Get mock instruction based on step\n     */\n    getMockInstruction(step, totalSteps) {\n      if (step === 0) return 'Siga pela rua principal';\n      if (step === totalSteps - 1) return 'Chegue ao destino';\n      const instructions = ['Continue em frente', 'Vire √† direita', 'Vire √† esquerda', 'Entre na rotat√≥ria', 'Saia na 2¬™ sa√≠da', 'Continue pela avenida'];\n      return instructions[Math.floor(Math.random() * instructions.length)];\n    }\n\n    /**\n     * Get random maneuver type\n     */\n    getRandomManeuver() {\n      const maneuvers = ['turn-right', 'turn-left', 'straight', 'ramp-right', 'ramp-left'];\n      return maneuvers[Math.floor(Math.random() * maneuvers.length)];\n    }\n\n    /**\n     * Simple polyline encoding (mock implementation)\n     */\n    encodePath(path) {\n      // This is a simplified mock - real implementation would use Google's polyline encoding\n      return 'mock_encoded_polyline_' + path.length;\n    }\n\n    /**\n     * Decode polyline points to coordinates\n     */\n    decodePolyline(encoded) {\n      // Mock implementation - in production you'd use Google's polyline decoding\n      if (encoded.startsWith('mock_encoded_polyline_')) {\n        const numPoints = parseInt(encoded.split('_').pop() || '2');\n        const points = [];\n        for (let i = 0; i < numPoints; i++) {\n          points.push({\n            latitude: -23.5505 + (Math.random() - 0.5) * 0.01,\n            longitude: -46.6333 + (Math.random() - 0.5) * 0.01\n          });\n        }\n        return points;\n      }\n\n      // For real polylines, implement proper decoding\n      return [];\n    }\n\n    /**\n     * Calculate estimated arrival time\n     */\n    calculateETA(durationSeconds) {\n      const now = new Date();\n      const eta = new Date(now.getTime() + durationSeconds * 1000);\n      return eta.toLocaleTimeString('pt-BR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n\n    /**\n     * Format distance for display\n     */\n    formatDistance(meters) {\n      if (meters < 1000) {\n        return `${Math.round(meters)}m`;\n      } else {\n        return `${(meters / 1000).toFixed(1)}km`;\n      }\n    }\n\n    /**\n     * Format duration for display\n     */\n    formatDuration(seconds) {\n      const minutes = Math.round(seconds / 60);\n      if (minutes < 60) {\n        return `${minutes} min`;\n      } else {\n        const hours = Math.floor(minutes / 60);\n        const remainingMinutes = minutes % 60;\n        return `${hours}h ${remainingMinutes}min`;\n      }\n    }\n  }\n  const googleDirectionsService = exports.googleDirectionsService = new GoogleDirectionsService();\n});","lineCount":253,"map":[[6,2,71,0],[6,8,71,6,"GoogleDirectionsService"],[6,31,71,29],[6,32,71,30],[7,4,72,10,"apiKey"],[7,10,72,16],[7,13,72,34],[7,17,72,38],[8,4,73,10,"baseUrl"],[8,11,73,17],[8,14,73,20],[8,68,73,74],[9,4,75,2,"constructor"],[9,15,75,13,"constructor"],[9,16,75,13],[9,18,75,16],[10,6,76,4],[11,6,77,4],[11,10,77,8],[11,11,77,9,"apiKey"],[11,17,77,15],[11,20,77,18,"process"],[11,27,77,25],[11,28,77,26,"env"],[11,31,77,29],[11,32,77,30,"EXPO_PUBLIC_GOOGLE_DIRECTIONS_API_KEY"],[11,69,77,67],[11,73,77,71],[11,77,77,75],[12,6,78,4,"console"],[12,13,78,11],[12,14,78,12,"log"],[12,17,78,15],[12,18,78,16],[12,59,78,57],[12,61,78,59],[12,65,78,63],[12,66,78,64,"apiKey"],[12,72,78,70],[12,75,78,73],[12,94,78,92],[12,97,78,95],[12,113,78,111],[12,114,78,112],[13,4,79,2],[14,4,81,2,"setApiKey"],[14,13,81,11,"setApiKey"],[14,14,81,12,"apiKey"],[14,20,81,26],[14,22,81,28],[15,6,82,4],[15,10,82,8],[15,11,82,9,"apiKey"],[15,17,82,15],[15,20,82,18,"apiKey"],[15,26,82,24],[16,4,83,2],[18,4,85,2],[19,0,86,0],[20,0,87,0],[21,4,88,2],[21,10,88,8,"getDirections"],[21,23,88,21,"getDirections"],[21,24,89,4,"origin"],[21,30,89,31],[21,32,90,4,"destination"],[21,43,90,36],[21,45,91,4,"waypoints"],[21,54,91,28],[21,56,92,4,"options"],[21,63,98,5],[21,65,99,33],[22,6,100,4],[22,10,100,8],[23,8,101,6],[23,12,101,10],[23,13,101,11],[23,17,101,15],[23,18,101,16,"apiKey"],[23,24,101,22],[23,26,101,24],[24,10,102,8,"console"],[24,17,102,15],[24,18,102,16,"log"],[24,21,102,19],[24,22,102,20],[24,77,102,75],[24,78,102,76],[25,10,103,8],[25,17,103,15],[25,21,103,19],[25,22,103,20,"getMockDirections"],[25,39,103,37],[25,40,103,38,"origin"],[25,46,103,44],[25,48,103,46,"destination"],[25,59,103,57],[25,60,103,58],[26,8,104,6],[27,8,106,6],[27,14,106,12,"params"],[27,20,106,18],[27,23,106,21],[27,27,106,25,"URLSearchParams"],[27,42,106,40],[27,43,106,41],[27,44,106,42],[29,8,108,6],[30,8,109,6],[30,14,109,12,"formattedOrigin"],[30,29,109,27],[30,32,109,30],[30,39,109,37,"origin"],[30,45,109,43],[30,50,109,48],[30,58,109,56],[30,61,110,10,"origin"],[30,67,110,16],[30,70,111,10],[30,73,111,13,"origin"],[30,79,111,19],[30,80,111,20,"latitude"],[30,88,111,28],[30,92,111,32,"origin"],[30,98,111,38],[30,99,111,39,"longitude"],[30,108,111,48],[30,110,111,50],[31,8,112,6],[31,14,112,12,"formattedDestination"],[31,34,112,32],[31,37,112,35],[31,44,112,42,"destination"],[31,55,112,53],[31,60,112,58],[31,68,112,66],[31,71,113,10,"destination"],[31,82,113,21],[31,85,114,10],[31,88,114,13,"destination"],[31,99,114,24],[31,100,114,25,"latitude"],[31,108,114,33],[31,112,114,37,"destination"],[31,123,114,48],[31,124,114,49,"longitude"],[31,133,114,58],[31,135,114,60],[32,8,116,6,"params"],[32,14,116,12],[32,15,116,13,"append"],[32,21,116,19],[32,22,116,20],[32,30,116,28],[32,32,116,30,"formattedOrigin"],[32,47,116,45],[32,48,116,46],[33,8,117,6,"params"],[33,14,117,12],[33,15,117,13,"append"],[33,21,117,19],[33,22,117,20],[33,35,117,33],[33,37,117,35,"formattedDestination"],[33,57,117,55],[33,58,117,56],[34,8,118,6,"params"],[34,14,118,12],[34,15,118,13,"append"],[34,21,118,19],[34,22,118,20],[34,27,118,25],[34,29,118,27],[34,33,118,31],[34,34,118,32,"apiKey"],[34,40,118,38],[34,41,118,39],[35,8,119,6,"params"],[35,14,119,12],[35,15,119,13,"append"],[35,21,119,19],[35,22,119,20],[35,28,119,26],[35,30,119,28,"options"],[35,37,119,35],[35,39,119,37,"mode"],[35,43,119,41],[35,47,119,45],[35,56,119,54],[35,57,119,55],[36,8,120,6,"params"],[36,14,120,12],[36,15,120,13,"append"],[36,21,120,19],[36,22,120,20],[36,32,120,30],[36,34,120,32],[36,41,120,39],[36,42,120,40],[37,8,121,6,"params"],[37,14,121,12],[37,15,121,13,"append"],[37,21,121,19],[37,22,121,20],[37,29,121,27],[37,31,121,29],[37,39,121,37],[37,40,121,38],[39,8,123,6],[40,8,124,6],[40,12,124,10,"waypoints"],[40,21,124,19],[40,25,124,23,"waypoints"],[40,34,124,32],[40,35,124,33,"length"],[40,41,124,39],[40,44,124,42],[40,45,124,43],[40,47,124,45],[41,10,125,8],[41,16,125,14,"waypointsStr"],[41,28,125,26],[41,31,125,29,"waypoints"],[41,40,125,38],[41,41,126,11,"map"],[41,44,126,14],[41,45,126,15,"wp"],[41,47,126,17],[41,51,126,21],[41,54,126,24,"wp"],[41,56,126,26],[41,57,126,27,"latitude"],[41,65,126,35],[41,69,126,39,"wp"],[41,71,126,41],[41,72,126,42,"longitude"],[41,81,126,51],[41,83,126,53],[41,84,126,54],[41,85,127,11,"join"],[41,89,127,15],[41,90,127,16],[41,93,127,19],[41,94,127,20],[42,10,128,8,"params"],[42,16,128,14],[42,17,128,15,"append"],[42,23,128,21],[42,24,128,22],[42,35,128,33],[42,37,128,35,"waypointsStr"],[42,49,128,47],[42,50,128,48],[43,10,130,8],[43,14,130,12,"options"],[43,21,130,19],[43,23,130,21,"optimize"],[43,31,130,29],[43,33,130,31],[44,12,131,10,"params"],[44,18,131,16],[44,19,131,17,"append"],[44,25,131,23],[44,26,131,24],[44,37,131,35],[44,39,131,37],[44,56,131,54,"waypointsStr"],[44,68,131,66],[44,70,131,68],[44,71,131,69],[45,10,132,8],[46,8,133,6],[48,8,135,6],[49,8,136,6],[49,14,136,12,"avoid"],[49,19,136,17],[49,22,136,20],[49,24,136,22],[50,8,137,6],[50,12,137,10,"options"],[50,19,137,17],[50,21,137,19,"avoidTolls"],[50,31,137,29],[50,33,137,31,"avoid"],[50,38,137,36],[50,39,137,37,"push"],[50,43,137,41],[50,44,137,42],[50,51,137,49],[50,52,137,50],[51,8,138,6],[51,12,138,10,"options"],[51,19,138,17],[51,21,138,19,"avoidHighways"],[51,34,138,32],[51,36,138,34,"avoid"],[51,41,138,39],[51,42,138,40,"push"],[51,46,138,44],[51,47,138,45],[51,57,138,55],[51,58,138,56],[52,8,139,6],[52,12,139,10,"options"],[52,19,139,17],[52,21,139,19,"avoidFerries"],[52,33,139,31],[52,35,139,33,"avoid"],[52,40,139,38],[52,41,139,39,"push"],[52,45,139,43],[52,46,139,44],[52,55,139,53],[52,56,139,54],[53,8,140,6],[53,12,140,10,"avoid"],[53,17,140,15],[53,18,140,16,"length"],[53,24,140,22],[53,27,140,25],[53,28,140,26],[53,30,140,28],[54,10,141,8,"params"],[54,16,141,14],[54,17,141,15,"append"],[54,23,141,21],[54,24,141,22],[54,31,141,29],[54,33,141,31,"avoid"],[54,38,141,36],[54,39,141,37,"join"],[54,43,141,41],[54,44,141,42],[54,47,141,45],[54,48,141,46],[54,49,141,47],[55,8,142,6],[56,8,144,6],[56,14,144,12,"url"],[56,17,144,15],[56,20,144,18],[56,23,144,21],[56,27,144,25],[56,28,144,26,"baseUrl"],[56,35,144,33],[56,39,144,37,"params"],[56,45,144,43],[56,46,144,44,"toString"],[56,54,144,52],[56,55,144,53],[56,56,144,54],[56,58,144,56],[57,8,145,6,"console"],[57,15,145,13],[57,16,145,14,"log"],[57,19,145,17],[57,20,145,18],[57,63,145,61],[57,64,145,62],[58,8,147,6],[58,14,147,12,"response"],[58,22,147,20],[58,25,147,23],[58,31,147,29,"fetch"],[58,36,147,34],[58,37,147,35,"url"],[58,40,147,38],[58,41,147,39],[59,8,148,6],[59,14,148,12,"data"],[59,18,148,16],[59,21,148,19],[59,27,148,25,"response"],[59,35,148,33],[59,36,148,34,"json"],[59,40,148,38],[59,41,148,39],[59,42,148,40],[60,8,150,6],[60,12,150,10,"data"],[60,16,150,14],[60,17,150,15,"status"],[60,23,150,21],[60,28,150,26],[60,32,150,30],[60,34,150,32],[61,10,151,8],[61,16,151,14],[61,20,151,18,"Error"],[61,25,151,23],[61,26,151,24],[61,58,151,56,"data"],[61,62,151,60],[61,63,151,61,"status"],[61,69,151,67],[61,75,151,73,"data"],[61,79,151,77],[61,80,151,78,"error_message"],[61,93,151,91],[61,95,151,93],[61,96,151,94],[62,8,152,6],[63,8,154,6],[63,15,154,13,"data"],[63,19,154,17],[64,6,155,4],[64,7,155,5],[64,8,155,6],[64,15,155,13,"error"],[64,20,155,18],[64,22,155,20],[65,8,156,6,"console"],[65,15,156,13],[65,16,156,14,"error"],[65,21,156,19],[65,22,156,20],[65,52,156,50],[65,54,156,52,"error"],[65,59,156,57],[65,60,156,58],[66,8,157,6],[67,8,158,6],[67,15,158,13],[67,19,158,17],[67,20,158,18,"getMockDirections"],[67,37,158,35],[67,38,158,36,"origin"],[67,44,158,42],[67,46,158,44,"destination"],[67,57,158,55],[67,58,158,56],[68,6,159,4],[69,4,160,2],[71,4,162,2],[72,0,163,0],[73,0,164,0],[74,4,165,10,"getMockDirections"],[74,21,165,27,"getMockDirections"],[74,22,166,4,"origin"],[74,28,166,31],[74,30,167,4,"destination"],[74,41,167,36],[74,43,168,24],[75,6,169,4],[76,6,170,4],[76,12,170,10,"mockDistance"],[76,24,170,22],[76,27,170,25,"Math"],[76,31,170,29],[76,32,170,30,"random"],[76,38,170,36],[76,39,170,37],[76,40,170,38],[76,43,170,41],[76,48,170,46],[76,51,170,49],[76,55,170,53],[76,56,170,54],[76,57,170,55],[77,6,171,4],[77,12,171,10,"mockDuration"],[77,24,171,22],[77,27,171,25,"mockDistance"],[77,39,171,37],[77,42,171,40],[77,46,171,44],[77,49,171,47],[77,50,171,48],[77,53,171,51],[77,55,171,53],[77,56,171,54],[77,57,171,55],[79,6,173,4],[79,12,173,10,"originCoord"],[79,23,173,21],[79,26,173,24],[79,33,173,31,"origin"],[79,39,173,37],[79,44,173,42],[79,52,173,50],[79,55,174,8],[80,8,174,10,"lat"],[80,11,174,13],[80,13,174,15],[80,14,174,16],[80,21,174,23],[81,8,174,25,"lng"],[81,11,174,28],[81,13,174,30],[81,14,174,31],[82,6,174,39],[82,7,174,40],[82,8,174,41],[83,6,174,41],[83,8,175,8],[84,8,175,10,"lat"],[84,11,175,13],[84,13,175,15,"origin"],[84,19,175,21],[84,20,175,22,"latitude"],[84,28,175,30],[85,8,175,32,"lng"],[85,11,175,35],[85,13,175,37,"origin"],[85,19,175,43],[85,20,175,44,"longitude"],[86,6,175,54],[86,7,175,55],[87,6,177,4],[87,12,177,10,"destCoord"],[87,21,177,19],[87,24,177,22],[87,31,177,29,"destination"],[87,42,177,40],[87,47,177,45],[87,55,177,53],[87,58,178,8],[88,8,178,10,"lat"],[88,11,178,13],[88,13,178,15],[88,14,178,16],[88,21,178,23],[88,24,178,26],[88,25,178,27,"Math"],[88,29,178,31],[88,30,178,32,"random"],[88,36,178,38],[88,37,178,39],[88,38,178,40],[88,41,178,43],[88,44,178,46],[88,48,178,50],[88,51,178,53],[89,8,178,55,"lng"],[89,11,178,58],[89,13,178,60],[89,14,178,61],[89,21,178,68],[89,24,178,71],[89,25,178,72,"Math"],[89,29,178,76],[89,30,178,77,"random"],[89,36,178,83],[89,37,178,84],[89,38,178,85],[89,41,178,88],[89,44,178,91],[89,48,178,95],[90,6,178,99],[90,7,178,100],[90,10,179,8],[91,8,179,10,"lat"],[91,11,179,13],[91,13,179,15,"destination"],[91,24,179,26],[91,25,179,27,"latitude"],[91,33,179,35],[92,8,179,37,"lng"],[92,11,179,40],[92,13,179,42,"destination"],[92,24,179,53],[92,25,179,54,"longitude"],[93,6,179,64],[93,7,179,65],[95,6,181,4],[96,6,182,4],[96,12,182,10,"steps"],[96,17,182,15],[96,20,182,18],[96,24,182,22],[96,25,182,23,"generateMockSteps"],[96,42,182,40],[96,43,182,41,"originCoord"],[96,54,182,52],[96,56,182,54,"destCoord"],[96,65,182,63],[96,67,182,65],[96,68,182,66],[96,69,182,67],[97,6,184,4],[97,13,184,11],[98,8,185,6,"routes"],[98,14,185,12],[98,16,185,14],[98,17,185,15],[99,10,186,8,"distance"],[99,18,186,16],[99,20,186,18],[100,12,187,10,"text"],[100,16,187,14],[100,18,187,16],[100,21,187,19],[100,22,187,20,"mockDistance"],[100,34,187,32],[100,37,187,35],[100,41,187,39],[100,43,187,41,"toFixed"],[100,50,187,48],[100,51,187,49],[100,52,187,50],[100,53,187,51],[100,58,187,56],[101,12,188,10,"value"],[101,17,188,15],[101,19,188,17,"Math"],[101,23,188,21],[101,24,188,22,"round"],[101,29,188,27],[101,30,188,28,"mockDistance"],[101,42,188,40],[102,10,189,8],[102,11,189,9],[103,10,190,8,"duration"],[103,18,190,16],[103,20,190,18],[104,12,191,10,"text"],[104,16,191,14],[104,18,191,16],[104,21,191,19,"Math"],[104,25,191,23],[104,26,191,24,"round"],[104,31,191,29],[104,32,191,30,"mockDuration"],[104,44,191,42],[104,47,191,45],[104,49,191,47],[104,50,191,48],[104,56,191,54],[105,12,192,10,"value"],[105,17,192,15],[105,19,192,17,"Math"],[105,23,192,21],[105,24,192,22,"round"],[105,29,192,27],[105,30,192,28,"mockDuration"],[105,42,192,40],[106,10,193,8],[106,11,193,9],[107,10,194,8,"overview_polyline"],[107,27,194,25],[107,29,194,27],[108,12,195,10,"points"],[108,18,195,16],[108,20,195,18],[108,24,195,22],[108,25,195,23,"encodePath"],[108,35,195,33],[108,36,195,34],[108,37,195,35,"originCoord"],[108,48,195,46],[108,50,195,48,"destCoord"],[108,59,195,57],[108,60,195,58],[108,61,195,59],[108,62,195,61],[109,10,196,8],[109,11,196,9],[110,10,197,8,"legs"],[110,14,197,12],[110,16,197,14],[110,17,197,15],[111,12,198,10,"distance"],[111,20,198,18],[111,22,198,20],[112,14,199,12,"text"],[112,18,199,16],[112,20,199,18],[112,23,199,21],[112,24,199,22,"mockDistance"],[112,36,199,34],[112,39,199,37],[112,43,199,41],[112,45,199,43,"toFixed"],[112,52,199,50],[112,53,199,51],[112,54,199,52],[112,55,199,53],[112,60,199,58],[113,14,200,12,"value"],[113,19,200,17],[113,21,200,19,"Math"],[113,25,200,23],[113,26,200,24,"round"],[113,31,200,29],[113,32,200,30,"mockDistance"],[113,44,200,42],[114,12,201,10],[114,13,201,11],[115,12,202,10,"duration"],[115,20,202,18],[115,22,202,20],[116,14,203,12,"text"],[116,18,203,16],[116,20,203,18],[116,23,203,21,"Math"],[116,27,203,25],[116,28,203,26,"round"],[116,33,203,31],[116,34,203,32,"mockDuration"],[116,46,203,44],[116,49,203,47],[116,51,203,49],[116,52,203,50],[116,58,203,56],[117,14,204,12,"value"],[117,19,204,17],[117,21,204,19,"Math"],[117,25,204,23],[117,26,204,24,"round"],[117,31,204,29],[117,32,204,30,"mockDuration"],[117,44,204,42],[118,12,205,10],[118,13,205,11],[119,12,206,10,"start_address"],[119,25,206,23],[119,27,206,25],[119,35,206,33],[120,12,207,10,"end_address"],[120,23,207,21],[120,25,207,23],[120,34,207,32],[121,12,208,10,"start_location"],[121,26,208,24],[121,28,208,26,"originCoord"],[121,39,208,37],[122,12,209,10,"end_location"],[122,24,209,22],[122,26,209,24,"destCoord"],[122,35,209,33],[123,12,210,10,"steps"],[123,17,210,15],[123,19,210,17,"steps"],[124,10,211,8],[124,11,211,9],[125,8,212,6],[125,9,212,7],[125,10,212,8],[126,8,213,6,"status"],[126,14,213,12],[126,16,213,14],[127,6,214,4],[127,7,214,5],[128,4,215,2],[130,4,217,2],[131,0,218,0],[132,0,219,0],[133,4,220,10,"generateMockSteps"],[133,21,220,27,"generateMockSteps"],[133,22,221,4,"origin"],[133,28,221,40],[133,30,222,4,"destination"],[133,41,222,45],[133,43,223,4,"numSteps"],[133,51,223,20],[133,53,224,4],[134,6,225,4],[134,12,225,10,"steps"],[134,17,225,15],[134,20,225,18],[134,22,225,20],[135,6,226,4],[135,12,226,10,"latStep"],[135,19,226,17],[135,22,226,20],[135,23,226,21,"destination"],[135,34,226,32],[135,35,226,33,"lat"],[135,38,226,36],[135,41,226,39,"origin"],[135,47,226,45],[135,48,226,46,"lat"],[135,51,226,49],[135,55,226,53,"numSteps"],[135,63,226,61],[136,6,227,4],[136,12,227,10,"lngStep"],[136,19,227,17],[136,22,227,20],[136,23,227,21,"destination"],[136,34,227,32],[136,35,227,33,"lng"],[136,38,227,36],[136,41,227,39,"origin"],[136,47,227,45],[136,48,227,46,"lng"],[136,51,227,49],[136,55,227,53,"numSteps"],[136,63,227,61],[137,6,229,4],[137,11,229,9],[137,15,229,13,"i"],[137,16,229,14],[137,19,229,17],[137,20,229,18],[137,22,229,20,"i"],[137,23,229,21],[137,26,229,24,"numSteps"],[137,34,229,32],[137,36,229,34,"i"],[137,37,229,35],[137,39,229,37],[137,41,229,39],[138,8,230,6],[138,14,230,12,"stepDistance"],[138,26,230,24],[138,29,230,27,"Math"],[138,33,230,31],[138,34,230,32,"random"],[138,40,230,38],[138,41,230,39],[138,42,230,40],[138,45,230,43],[138,49,230,47],[138,52,230,50],[138,55,230,53],[138,56,230,54],[138,57,230,55],[139,8,231,6],[139,14,231,12,"stepDuration"],[139,26,231,24],[139,29,231,27,"stepDistance"],[139,41,231,39],[139,44,231,42],[139,48,231,46],[139,51,231,49],[139,52,231,50],[139,55,231,53],[139,57,231,55],[139,58,231,56],[139,59,231,57],[141,8,233,6,"steps"],[141,13,233,11],[141,14,233,12,"push"],[141,18,233,16],[141,19,233,17],[142,10,234,8,"distance"],[142,18,234,16],[142,20,234,18],[143,12,235,10,"text"],[143,16,235,14],[143,18,235,16],[143,21,235,19,"Math"],[143,25,235,23],[143,26,235,24,"round"],[143,31,235,29],[143,32,235,30,"stepDistance"],[143,44,235,42],[143,45,235,43],[143,48,235,46],[144,12,236,10,"value"],[144,17,236,15],[144,19,236,17,"Math"],[144,23,236,21],[144,24,236,22,"round"],[144,29,236,27],[144,30,236,28,"stepDistance"],[144,42,236,40],[145,10,237,8],[145,11,237,9],[146,10,238,8,"duration"],[146,18,238,16],[146,20,238,18],[147,12,239,10,"text"],[147,16,239,14],[147,18,239,16],[147,21,239,19,"Math"],[147,25,239,23],[147,26,239,24,"round"],[147,31,239,29],[147,32,239,30,"stepDuration"],[147,44,239,42],[147,47,239,45],[147,49,239,47],[147,50,239,48],[147,56,239,54],[148,12,240,10,"value"],[148,17,240,15],[148,19,240,17,"Math"],[148,23,240,21],[148,24,240,22,"round"],[148,29,240,27],[148,30,240,28,"stepDuration"],[148,42,240,40],[149,10,241,8],[149,11,241,9],[150,10,242,8,"html_instructions"],[150,27,242,25],[150,29,242,27],[150,33,242,31],[150,34,242,32,"getMockInstruction"],[150,52,242,50],[150,53,242,51,"i"],[150,54,242,52],[150,56,242,54,"numSteps"],[150,64,242,62],[150,65,242,63],[151,10,243,8,"polyline"],[151,18,243,16],[151,20,243,18],[152,12,244,10,"points"],[152,18,244,16],[152,20,244,18],[153,10,245,8],[153,11,245,9],[154,10,246,8,"start_location"],[154,24,246,22],[154,26,246,24],[155,12,247,10,"lat"],[155,15,247,13],[155,17,247,15,"origin"],[155,23,247,21],[155,24,247,22,"lat"],[155,27,247,25],[155,30,247,28,"latStep"],[155,37,247,35],[155,40,247,38,"i"],[155,41,247,39],[156,12,248,10,"lng"],[156,15,248,13],[156,17,248,15,"origin"],[156,23,248,21],[156,24,248,22,"lng"],[156,27,248,25],[156,30,248,28,"lngStep"],[156,37,248,35],[156,40,248,38,"i"],[157,10,249,8],[157,11,249,9],[158,10,250,8,"end_location"],[158,22,250,20],[158,24,250,22],[159,12,251,10,"lat"],[159,15,251,13],[159,17,251,15,"origin"],[159,23,251,21],[159,24,251,22,"lat"],[159,27,251,25],[159,30,251,28,"latStep"],[159,37,251,35],[159,41,251,39,"i"],[159,42,251,40],[159,45,251,43],[159,46,251,44],[159,47,251,45],[160,12,252,10,"lng"],[160,15,252,13],[160,17,252,15,"origin"],[160,23,252,21],[160,24,252,22,"lng"],[160,27,252,25],[160,30,252,28,"lngStep"],[160,37,252,35],[160,41,252,39,"i"],[160,42,252,40],[160,45,252,43],[160,46,252,44],[161,10,253,8],[161,11,253,9],[162,10,254,8,"maneuver"],[162,18,254,16],[162,20,254,18,"i"],[162,21,254,19],[162,26,254,24],[162,27,254,25],[162,30,254,28],[162,38,254,36],[162,41,254,40,"i"],[162,42,254,41],[162,47,254,46,"numSteps"],[162,55,254,54],[162,58,254,57],[162,59,254,58],[162,62,254,61],[162,70,254,69],[162,73,254,72],[162,77,254,76],[162,78,254,77,"getRandomManeuver"],[162,95,254,94],[162,96,254,95],[163,8,255,6],[163,9,255,7],[163,10,255,8],[164,6,256,4],[165,6,258,4],[165,13,258,11,"steps"],[165,18,258,16],[166,4,259,2],[168,4,261,2],[169,0,262,0],[170,0,263,0],[171,4,264,10,"getMockInstruction"],[171,22,264,28,"getMockInstruction"],[171,23,264,29,"step"],[171,27,264,41],[171,29,264,43,"totalSteps"],[171,39,264,61],[171,41,264,71],[172,6,265,4],[172,10,265,8,"step"],[172,14,265,12],[172,19,265,17],[172,20,265,18],[172,22,265,20],[172,29,265,27],[172,54,265,52],[173,6,266,4],[173,10,266,8,"step"],[173,14,266,12],[173,19,266,17,"totalSteps"],[173,29,266,27],[173,32,266,30],[173,33,266,31],[173,35,266,33],[173,42,266,40],[173,61,266,59],[174,6,268,4],[174,12,268,10,"instructions"],[174,24,268,22],[174,27,268,25],[174,28,269,6],[174,48,269,26],[174,50,270,6],[174,66,270,22],[174,68,271,6],[174,85,271,23],[174,87,272,6],[174,107,272,26],[174,109,273,6],[174,127,273,24],[174,129,274,6],[174,152,274,29],[174,153,275,5],[175,6,277,4],[175,13,277,11,"instructions"],[175,25,277,23],[175,26,277,24,"Math"],[175,30,277,28],[175,31,277,29,"floor"],[175,36,277,34],[175,37,277,35,"Math"],[175,41,277,39],[175,42,277,40,"random"],[175,48,277,46],[175,49,277,47],[175,50,277,48],[175,53,277,51,"instructions"],[175,65,277,63],[175,66,277,64,"length"],[175,72,277,70],[175,73,277,71],[175,74,277,72],[176,4,278,2],[178,4,280,2],[179,0,281,0],[180,0,282,0],[181,4,283,10,"getRandomManeuver"],[181,21,283,27,"getRandomManeuver"],[181,22,283,27],[181,24,283,38],[182,6,284,4],[182,12,284,10,"maneuvers"],[182,21,284,19],[182,24,284,22],[182,25,284,23],[182,37,284,35],[182,39,284,37],[182,50,284,48],[182,52,284,50],[182,62,284,60],[182,64,284,62],[182,76,284,74],[182,78,284,76],[182,89,284,87],[182,90,284,88],[183,6,285,4],[183,13,285,11,"maneuvers"],[183,22,285,20],[183,23,285,21,"Math"],[183,27,285,25],[183,28,285,26,"floor"],[183,33,285,31],[183,34,285,32,"Math"],[183,38,285,36],[183,39,285,37,"random"],[183,45,285,43],[183,46,285,44],[183,47,285,45],[183,50,285,48,"maneuvers"],[183,59,285,57],[183,60,285,58,"length"],[183,66,285,64],[183,67,285,65],[183,68,285,66],[184,4,286,2],[186,4,288,2],[187,0,289,0],[188,0,290,0],[189,4,291,10,"encodePath"],[189,14,291,20,"encodePath"],[189,15,291,21,"path"],[189,19,291,62],[189,21,291,72],[190,6,292,4],[191,6,293,4],[191,13,293,11],[191,37,293,35],[191,40,293,38,"path"],[191,44,293,42],[191,45,293,43,"length"],[191,51,293,49],[192,4,294,2],[194,4,296,2],[195,0,297,0],[196,0,298,0],[197,4,299,2,"decodePolyline"],[197,18,299,16,"decodePolyline"],[197,19,299,17,"encoded"],[197,26,299,32],[197,28,299,48],[198,6,300,4],[199,6,301,4],[199,10,301,8,"encoded"],[199,17,301,15],[199,18,301,16,"startsWith"],[199,28,301,26],[199,29,301,27],[199,53,301,51],[199,54,301,52],[199,56,301,54],[200,8,302,6],[200,14,302,12,"numPoints"],[200,23,302,21],[200,26,302,24,"parseInt"],[200,34,302,32],[200,35,302,33,"encoded"],[200,42,302,40],[200,43,302,41,"split"],[200,48,302,46],[200,49,302,47],[200,52,302,50],[200,53,302,51],[200,54,302,52,"pop"],[200,57,302,55],[200,58,302,56],[200,59,302,57],[200,63,302,61],[200,66,302,64],[200,67,302,65],[201,8,303,6],[201,14,303,12,"points"],[201,20,303,32],[201,23,303,35],[201,25,303,37],[202,8,305,6],[202,13,305,11],[202,17,305,15,"i"],[202,18,305,16],[202,21,305,19],[202,22,305,20],[202,24,305,22,"i"],[202,25,305,23],[202,28,305,26,"numPoints"],[202,37,305,35],[202,39,305,37,"i"],[202,40,305,38],[202,42,305,40],[202,44,305,42],[203,10,306,8,"points"],[203,16,306,14],[203,17,306,15,"push"],[203,21,306,19],[203,22,306,20],[204,12,307,10,"latitude"],[204,20,307,18],[204,22,307,20],[204,23,307,21],[204,30,307,28],[204,33,307,31],[204,34,307,32,"Math"],[204,38,307,36],[204,39,307,37,"random"],[204,45,307,43],[204,46,307,44],[204,47,307,45],[204,50,307,48],[204,53,307,51],[204,57,307,55],[204,61,307,59],[205,12,308,10,"longitude"],[205,21,308,19],[205,23,308,21],[205,24,308,22],[205,31,308,29],[205,34,308,32],[205,35,308,33,"Math"],[205,39,308,37],[205,40,308,38,"random"],[205,46,308,44],[205,47,308,45],[205,48,308,46],[205,51,308,49],[205,54,308,52],[205,58,308,56],[206,10,309,8],[206,11,309,9],[206,12,309,10],[207,8,310,6],[208,8,312,6],[208,15,312,13,"points"],[208,21,312,19],[209,6,313,4],[211,6,315,4],[212,6,316,4],[212,13,316,11],[212,15,316,13],[213,4,317,2],[215,4,319,2],[216,0,320,0],[217,0,321,0],[218,4,322,2,"calculateETA"],[218,16,322,14,"calculateETA"],[218,17,322,15,"durationSeconds"],[218,32,322,38],[218,34,322,48],[219,6,323,4],[219,12,323,10,"now"],[219,15,323,13],[219,18,323,16],[219,22,323,20,"Date"],[219,26,323,24],[219,27,323,25],[219,28,323,26],[220,6,324,4],[220,12,324,10,"eta"],[220,15,324,13],[220,18,324,16],[220,22,324,20,"Date"],[220,26,324,24],[220,27,324,25,"now"],[220,30,324,28],[220,31,324,29,"getTime"],[220,38,324,36],[220,39,324,37],[220,40,324,38],[220,43,324,41,"durationSeconds"],[220,58,324,56],[220,61,324,59],[220,65,324,63],[220,66,324,64],[221,6,326,4],[221,13,326,11,"eta"],[221,16,326,14],[221,17,326,15,"toLocaleTimeString"],[221,35,326,33],[221,36,326,34],[221,43,326,41],[221,45,326,43],[222,8,327,6,"hour"],[222,12,327,10],[222,14,327,12],[222,23,327,21],[223,8,328,6,"minute"],[223,14,328,12],[223,16,328,14],[224,6,329,4],[224,7,329,5],[224,8,329,6],[225,4,330,2],[227,4,332,2],[228,0,333,0],[229,0,334,0],[230,4,335,2,"formatDistance"],[230,18,335,16,"formatDistance"],[230,19,335,17,"meters"],[230,25,335,31],[230,27,335,41],[231,6,336,4],[231,10,336,8,"meters"],[231,16,336,14],[231,19,336,17],[231,23,336,21],[231,25,336,23],[232,8,337,6],[232,15,337,13],[232,18,337,16,"Math"],[232,22,337,20],[232,23,337,21,"round"],[232,28,337,26],[232,29,337,27,"meters"],[232,35,337,33],[232,36,337,34],[232,39,337,37],[233,6,338,4],[233,7,338,5],[233,13,338,11],[234,8,339,6],[234,15,339,13],[234,18,339,16],[234,19,339,17,"meters"],[234,25,339,23],[234,28,339,26],[234,32,339,30],[234,34,339,32,"toFixed"],[234,41,339,39],[234,42,339,40],[234,43,339,41],[234,44,339,42],[234,48,339,46],[235,6,340,4],[236,4,341,2],[238,4,343,2],[239,0,344,0],[240,0,345,0],[241,4,346,2,"formatDuration"],[241,18,346,16,"formatDuration"],[241,19,346,17,"seconds"],[241,26,346,32],[241,28,346,42],[242,6,347,4],[242,12,347,10,"minutes"],[242,19,347,17],[242,22,347,20,"Math"],[242,26,347,24],[242,27,347,25,"round"],[242,32,347,30],[242,33,347,31,"seconds"],[242,40,347,38],[242,43,347,41],[242,45,347,43],[242,46,347,44],[243,6,348,4],[243,10,348,8,"minutes"],[243,17,348,15],[243,20,348,18],[243,22,348,20],[243,24,348,22],[244,8,349,6],[244,15,349,13],[244,18,349,16,"minutes"],[244,25,349,23],[244,31,349,29],[245,6,350,4],[245,7,350,5],[245,13,350,11],[246,8,351,6],[246,14,351,12,"hours"],[246,19,351,17],[246,22,351,20,"Math"],[246,26,351,24],[246,27,351,25,"floor"],[246,32,351,30],[246,33,351,31,"minutes"],[246,40,351,38],[246,43,351,41],[246,45,351,43],[246,46,351,44],[247,8,352,6],[247,14,352,12,"remainingMinutes"],[247,30,352,28],[247,33,352,31,"minutes"],[247,40,352,38],[247,43,352,41],[247,45,352,43],[248,8,353,6],[248,15,353,13],[248,18,353,16,"hours"],[248,23,353,21],[248,28,353,26,"remainingMinutes"],[248,44,353,42],[248,49,353,47],[249,6,354,4],[250,4,355,2],[251,2,356,0],[252,2,358,7],[252,8,358,13,"googleDirectionsService"],[252,31,358,36],[252,34,358,36,"exports"],[252,41,358,36],[252,42,358,36,"googleDirectionsService"],[252,65,358,36],[252,68,358,39],[252,72,358,43,"GoogleDirectionsService"],[252,95,358,66],[252,96,358,67],[252,97,358,68],[253,0,358,69],[253,3]],"functionMap":{"names":["<global>","GoogleDirectionsService","GoogleDirectionsService#constructor","GoogleDirectionsService#setApiKey","GoogleDirectionsService#getDirections","waypoints.map$argument_0","GoogleDirectionsService#getMockDirections","GoogleDirectionsService#generateMockSteps","GoogleDirectionsService#getMockInstruction","GoogleDirectionsService#getRandomManeuver","GoogleDirectionsService#encodePath","GoogleDirectionsService#decodePolyline","GoogleDirectionsService#calculateETA","GoogleDirectionsService#formatDistance","GoogleDirectionsService#formatDuration"],"mappings":"AAA;ACsE;ECI;GDI;EEE;GFE;EGK;eCsC,sCD;GHkC;EKK;GLkD;EMK;GNuC;EOK;GPc;EQK;GRG;ESK;GTG;EUK;GVkB;EWK;GXQ;EYK;GZM;EaK;GbS;CDC"}},"type":"js/module"}]}