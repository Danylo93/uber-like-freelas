{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"]}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":112},"end":{"line":5,"column":36,"index":148}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":33,"index":229}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":230},"end":{"line":8,"column":39,"index":269}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":270},"end":{"line":9,"column":45,"index":315}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"]}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":316},"end":{"line":10,"column":55,"index":371}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n  var _hammerjs = _interopRequireDefault(require(_dependencyMap[2], \"@egjs/hammerjs\"));\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/findNodeHandle\"));\n  var _State = require(_dependencyMap[4], \"../State\");\n  var _constants = require(_dependencyMap[5], \"./constants\");\n  var NodeManager = _interopRequireWildcard(require(_dependencyMap[6], \"./NodeManager\"));\n  var _ghQueueMicrotask = require(_dependencyMap[7], \"../ghQueueMicrotask\");\n  const _excluded = [\"enabled\"];\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig(_ref) {\n      let {\n          enabled = true\n        } = _ref,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(Object.assign({\n        enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: Object.assign({\n          numberOfPointers,\n          state,\n          pointerInside\n        }, this.transformNativeEvent(event), {\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(Object.assign({}, event, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, _findNodeHandle.default)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n        inputClass: _hammerjs.default.TouchInput\n      }) : new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, Object.assign({}, inputData, {\n          deltaRotation\n        }));\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set(Object.assign({}, params, {\n        enable\n      }));\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = Object.assign({}, config);\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = exports.default = GestureHandler;\n});","lineCount":481,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0],[6,6,4,0,"_interopRequireDefault"],[6,28,4,0],[6,31,4,0,"require"],[6,38,4,0],[6,39,4,0,"_dependencyMap"],[6,53,4,0],[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"value"],[8,9,4,0],[9,2,4,0],[10,2,4,0,"exports"],[10,9,4,0],[10,10,4,0,"default"],[10,17,4,0],[11,2,4,0],[11,6,4,0,"_objectWithoutPropertiesLoose2"],[11,36,4,0],[11,39,4,0,"_interopRequireDefault"],[11,61,4,0],[11,62,4,0,"require"],[11,69,4,0],[11,70,4,0,"_dependencyMap"],[11,84,4,0],[12,2,5,0],[12,6,5,0,"_hammerjs"],[12,15,5,0],[12,18,5,0,"_interopRequireDefault"],[12,40,5,0],[12,41,5,0,"require"],[12,48,5,0],[12,49,5,0,"_dependencyMap"],[12,63,5,0],[13,2,5,36],[13,6,5,36,"_findNodeHandle"],[13,21,5,36],[13,24,5,36,"_interopRequireDefault"],[13,46,5,36],[13,47,5,36,"require"],[13,54,5,36],[13,55,5,36,"_dependencyMap"],[13,69,5,36],[14,2,7,0],[14,6,7,0,"_State"],[14,12,7,0],[14,15,7,0,"require"],[14,22,7,0],[14,23,7,0,"_dependencyMap"],[14,37,7,0],[15,2,8,0],[15,6,8,0,"_constants"],[15,16,8,0],[15,19,8,0,"require"],[15,26,8,0],[15,27,8,0,"_dependencyMap"],[15,41,8,0],[16,2,9,0],[16,6,9,0,"NodeManager"],[16,17,9,0],[16,20,9,0,"_interopRequireWildcard"],[16,43,9,0],[16,44,9,0,"require"],[16,51,9,0],[16,52,9,0,"_dependencyMap"],[16,66,9,0],[17,2,10,0],[17,6,10,0,"_ghQueueMicrotask"],[17,23,10,0],[17,26,10,0,"require"],[17,33,10,0],[17,34,10,0,"_dependencyMap"],[17,48,10,0],[18,2,10,55],[18,8,10,55,"_excluded"],[18,17,10,55],[19,2,10,55],[19,11,10,55,"_interopRequireWildcard"],[19,35,10,55,"e"],[19,36,10,55],[19,38,10,55,"t"],[19,39,10,55],[19,68,10,55,"WeakMap"],[19,75,10,55],[19,81,10,55,"r"],[19,82,10,55],[19,89,10,55,"WeakMap"],[19,96,10,55],[19,100,10,55,"n"],[19,101,10,55],[19,108,10,55,"WeakMap"],[19,115,10,55],[19,127,10,55,"_interopRequireWildcard"],[19,150,10,55],[19,162,10,55,"_interopRequireWildcard"],[19,163,10,55,"e"],[19,164,10,55],[19,166,10,55,"t"],[19,167,10,55],[19,176,10,55,"t"],[19,177,10,55],[19,181,10,55,"e"],[19,182,10,55],[19,186,10,55,"e"],[19,187,10,55],[19,188,10,55,"__esModule"],[19,198,10,55],[19,207,10,55,"e"],[19,208,10,55],[19,214,10,55,"o"],[19,215,10,55],[19,217,10,55,"i"],[19,218,10,55],[19,220,10,55,"f"],[19,221,10,55],[19,226,10,55,"__proto__"],[19,235,10,55],[19,243,10,55,"default"],[19,250,10,55],[19,252,10,55,"e"],[19,253,10,55],[19,270,10,55,"e"],[19,271,10,55],[19,294,10,55,"e"],[19,295,10,55],[19,320,10,55,"e"],[19,321,10,55],[19,330,10,55,"f"],[19,331,10,55],[19,337,10,55,"o"],[19,338,10,55],[19,341,10,55,"t"],[19,342,10,55],[19,345,10,55,"n"],[19,346,10,55],[19,349,10,55,"r"],[19,350,10,55],[19,358,10,55,"o"],[19,359,10,55],[19,360,10,55,"has"],[19,363,10,55],[19,364,10,55,"e"],[19,365,10,55],[19,375,10,55,"o"],[19,376,10,55],[19,377,10,55,"get"],[19,380,10,55],[19,381,10,55,"e"],[19,382,10,55],[19,385,10,55,"o"],[19,386,10,55],[19,387,10,55,"set"],[19,390,10,55],[19,391,10,55,"e"],[19,392,10,55],[19,394,10,55,"f"],[19,395,10,55],[19,411,10,55,"t"],[19,412,10,55],[19,416,10,55,"e"],[19,417,10,55],[19,433,10,55,"t"],[19,434,10,55],[19,441,10,55,"hasOwnProperty"],[19,455,10,55],[19,456,10,55,"call"],[19,460,10,55],[19,461,10,55,"e"],[19,462,10,55],[19,464,10,55,"t"],[19,465,10,55],[19,472,10,55,"i"],[19,473,10,55],[19,477,10,55,"o"],[19,478,10,55],[19,481,10,55,"Object"],[19,487,10,55],[19,488,10,55,"defineProperty"],[19,502,10,55],[19,507,10,55,"Object"],[19,513,10,55],[19,514,10,55,"getOwnPropertyDescriptor"],[19,538,10,55],[19,539,10,55,"e"],[19,540,10,55],[19,542,10,55,"t"],[19,543,10,55],[19,550,10,55,"i"],[19,551,10,55],[19,552,10,55,"get"],[19,555,10,55],[19,559,10,55,"i"],[19,560,10,55],[19,561,10,55,"set"],[19,564,10,55],[19,568,10,55,"o"],[19,569,10,55],[19,570,10,55,"f"],[19,571,10,55],[19,573,10,55,"t"],[19,574,10,55],[19,576,10,55,"i"],[19,577,10,55],[19,581,10,55,"f"],[19,582,10,55],[19,583,10,55,"t"],[19,584,10,55],[19,588,10,55,"e"],[19,589,10,55],[19,590,10,55,"t"],[19,591,10,55],[19,602,10,55,"f"],[19,603,10,55],[19,608,10,55,"e"],[19,609,10,55],[19,611,10,55,"t"],[19,612,10,55],[20,2,12,0],[22,2,14,0],[22,6,14,4,"gestureInstances"],[22,22,14,20],[22,25,14,23],[22,26,14,24],[23,2,15,0],[23,8,15,6,"GestureHandler"],[23,22,15,20],[23,23,15,21],[24,4,16,2,"isGestureRunning"],[24,20,16,18],[24,23,16,21],[24,28,16,26],[25,4,17,2,"view"],[25,8,17,6],[25,11,17,9],[25,15,17,13],[26,4,18,2,"hasGestureFailed"],[26,20,18,18],[26,23,18,21],[26,28,18,26],[27,4,19,2,"hammer"],[27,10,19,8],[27,13,19,11],[27,17,19,15],[28,4,20,2,"initialRotation"],[28,19,20,17],[28,22,20,20],[28,26,20,24],[29,4,21,2,"config"],[29,10,21,8],[29,13,21,11],[29,14,21,12],[29,15,21,13],[30,4,22,2,"previousState"],[30,17,22,15],[30,20,22,18,"State"],[30,32,22,23],[30,33,22,24,"UNDETERMINED"],[30,45,22,36],[31,4,23,2,"pendingGestures"],[31,19,23,17],[31,22,23,20],[31,23,23,21],[31,24,23,22],[32,4,24,2,"oldState"],[32,12,24,10],[32,15,24,13,"State"],[32,27,24,18],[32,28,24,19,"UNDETERMINED"],[32,40,24,31],[33,4,25,2,"lastSentState"],[33,17,25,15],[33,20,25,18],[33,24,25,22],[34,4,26,2],[34,8,26,6,"id"],[34,10,26,8,"id"],[34,11,26,8],[34,13,26,11],[35,6,27,4],[35,13,27,11],[35,16,27,14],[35,20,27,18],[35,21,27,19,"name"],[35,25,27,23],[35,28,27,26],[35,32,27,30],[35,33,27,31,"gestureInstance"],[35,48,27,46],[35,50,27,48],[36,4,28,2],[38,4,30,2],[39,4,31,2],[40,4,32,2],[40,8,32,6,"isNative"],[40,16,32,14,"isNative"],[40,17,32,14],[40,19,32,17],[41,6,33,4],[41,13,33,11],[41,18,33,16],[42,4,34,2],[43,4,35,2],[43,8,35,6,"isDiscrete"],[43,18,35,16,"isDiscrete"],[43,19,35,16],[43,21,35,19],[44,6,36,4],[44,13,36,11],[44,18,36,16],[45,4,37,2],[46,4,38,2],[46,8,38,6,"shouldEnableGestureOnSetup"],[46,34,38,32,"shouldEnableGestureOnSetup"],[46,35,38,32],[46,37,38,35],[47,6,39,4],[47,12,39,10],[47,16,39,14,"Error"],[47,21,39,19],[47,22,39,20],[47,79,39,77],[47,80,39,78],[48,4,40,2],[49,4,41,2,"constructor"],[49,15,41,13,"constructor"],[49,16,41,13],[49,18,41,16],[50,6,42,4],[50,10,42,8],[50,11,42,9,"gestureInstance"],[50,26,42,24],[50,29,42,27,"gestureInstances"],[50,45,42,43],[50,47,42,45],[51,6,43,4],[51,10,43,8],[51,11,43,9,"hasCustomActivationCriteria"],[51,38,43,36],[51,41,43,39],[51,46,43,44],[52,4,44,2],[53,4,45,2,"getConfig"],[53,13,45,11,"getConfig"],[53,14,45,11],[53,16,45,14],[54,6,46,4],[54,13,46,11],[54,17,46,15],[54,18,46,16,"config"],[54,24,46,22],[55,4,47,2],[56,4,48,2,"onWaitingEnded"],[56,18,48,16,"onWaitingEnded"],[56,19,48,17,"_gesture"],[56,27,48,25],[56,29,48,27],[56,30,48,28],[57,4,49,2,"removePendingGesture"],[57,24,49,22,"removePendingGesture"],[57,25,49,23,"id"],[57,27,49,25],[57,29,49,27],[58,6,50,4],[58,13,50,11],[58,17,50,15],[58,18,50,16,"pendingGestures"],[58,33,50,31],[58,34,50,32,"id"],[58,36,50,34],[58,37,50,35],[59,4,51,2],[60,4,52,2,"addPendingGesture"],[60,21,52,19,"addPendingGesture"],[60,22,52,20,"gesture"],[60,29,52,27],[60,31,52,29],[61,6,53,4],[61,10,53,8],[61,11,53,9,"pendingGestures"],[61,26,53,24],[61,27,53,25,"gesture"],[61,34,53,32],[61,35,53,33,"id"],[61,37,53,35],[61,38,53,36],[61,41,53,39,"gesture"],[61,48,53,46],[62,4,54,2],[63,4,55,2,"isGestureEnabledForEvent"],[63,28,55,26,"isGestureEnabledForEvent"],[63,29,55,27,"_config"],[63,36,55,34],[63,38,55,36,"_recognizer"],[63,49,55,47],[63,51,55,49,"_event"],[63,57,55,55],[63,59,55,57],[64,6,56,4],[64,13,56,11],[65,8,57,6,"success"],[65,15,57,13],[65,17,57,15],[66,6,58,4],[66,7,58,5],[67,4,59,2],[68,4,60,2],[68,8,60,6,"NativeGestureClass"],[68,26,60,24,"NativeGestureClass"],[68,27,60,24],[68,29,60,27],[69,6,61,4],[69,12,61,10],[69,16,61,14,"Error"],[69,21,61,19],[69,22,61,20],[69,71,61,69],[69,72,61,70],[70,4,62,2],[71,4,63,2,"updateHasCustomActivationCriteria"],[71,37,63,35,"updateHasCustomActivationCriteria"],[71,38,63,36,"_config"],[71,45,63,43],[71,47,63,45],[72,6,64,4],[72,13,64,11],[72,17,64,15],[73,4,65,2],[74,4,66,2,"clearSelfAsPending"],[74,22,66,20],[74,25,66,23,"clearSelfAsPending"],[74,26,66,23],[74,31,66,29],[75,6,67,4],[75,10,67,8,"Array"],[75,15,67,13],[75,16,67,14,"isArray"],[75,23,67,21],[75,24,67,22],[75,28,67,26],[75,29,67,27,"config"],[75,35,67,33],[75,36,67,34,"waitFor"],[75,43,67,41],[75,44,67,42],[75,46,67,44],[76,8,68,6],[76,13,68,11],[76,19,68,17,"gesture"],[76,26,68,24],[76,30,68,28],[76,34,68,32],[76,35,68,33,"config"],[76,41,68,39],[76,42,68,40,"waitFor"],[76,49,68,47],[76,51,68,49],[77,10,69,8,"gesture"],[77,17,69,15],[77,18,69,16,"removePendingGesture"],[77,38,69,36],[77,39,69,37],[77,43,69,41],[77,44,69,42,"id"],[77,46,69,44],[77,47,69,45],[78,8,70,6],[79,6,71,4],[80,4,72,2],[80,5,72,3],[81,4,73,2,"updateGestureConfig"],[81,23,73,21,"updateGestureConfig"],[81,24,73,21,"_ref"],[81,28,73,21],[81,30,76,5],[82,6,76,5],[82,10,73,22],[83,10,74,4,"enabled"],[83,17,74,11],[83,20,74,14],[84,8,76,2],[84,9,76,3],[84,12,76,3,"_ref"],[84,16,76,3],[85,8,75,7,"props"],[85,13,75,12],[85,20,75,12,"_objectWithoutPropertiesLoose2"],[85,50,75,12],[85,51,75,12,"default"],[85,58,75,12],[85,60,75,12,"_ref"],[85,64,75,12],[85,66,75,12,"_excluded"],[85,75,75,12],[86,6,77,4],[86,10,77,8],[86,11,77,9,"clearSelfAsPending"],[86,29,77,27],[86,30,77,28],[86,31,77,29],[87,6,78,4],[87,10,78,8],[87,11,78,9,"config"],[87,17,78,15],[87,20,78,18],[87,24,78,22],[87,25,78,23,"ensureConfig"],[87,37,78,35],[87,38,78,35,"Object"],[87,44,78,35],[87,45,78,35,"assign"],[87,51,78,35],[88,8,79,6,"enabled"],[89,6,79,13],[89,9,80,9,"props"],[89,14,80,14],[89,15,81,5],[89,16,81,6],[90,6,82,4],[90,10,82,8],[90,11,82,9,"hasCustomActivationCriteria"],[90,38,82,36],[90,41,82,39],[90,45,82,43],[90,46,82,44,"updateHasCustomActivationCriteria"],[90,79,82,77],[90,80,82,78],[90,84,82,82],[90,85,82,83,"config"],[90,91,82,89],[90,92,82,90],[91,6,83,4],[91,10,83,8,"Array"],[91,15,83,13],[91,16,83,14,"isArray"],[91,23,83,21],[91,24,83,22],[91,28,83,26],[91,29,83,27,"config"],[91,35,83,33],[91,36,83,34,"waitFor"],[91,43,83,41],[91,44,83,42],[91,46,83,44],[92,8,84,6],[92,13,84,11],[92,19,84,17,"gesture"],[92,26,84,24],[92,30,84,28],[92,34,84,32],[92,35,84,33,"config"],[92,41,84,39],[92,42,84,40,"waitFor"],[92,49,84,47],[92,51,84,49],[93,10,85,8,"gesture"],[93,17,85,15],[93,18,85,16,"addPendingGesture"],[93,35,85,33],[93,36,85,34],[93,40,85,38],[93,41,85,39],[94,8,86,6],[95,6,87,4],[96,6,88,4],[96,10,88,8],[96,14,88,12],[96,15,88,13,"hammer"],[96,21,88,19],[96,23,88,21],[97,8,89,6],[97,12,89,10],[97,13,89,11,"sync"],[97,17,89,15],[97,18,89,16],[97,19,89,17],[98,6,90,4],[99,6,91,4],[99,13,91,11],[99,17,91,15],[99,18,91,16,"config"],[99,24,91,22],[100,4,92,2],[101,4,93,2,"destroy"],[101,11,93,9],[101,14,93,12,"destroy"],[101,15,93,12],[101,20,93,18],[102,6,94,4],[102,10,94,8],[102,11,94,9,"clearSelfAsPending"],[102,29,94,27],[102,30,94,28],[102,31,94,29],[103,6,95,4],[103,10,95,8],[103,14,95,12],[103,15,95,13,"hammer"],[103,21,95,19],[103,23,95,21],[104,8,96,6],[104,12,96,10],[104,13,96,11,"hammer"],[104,19,96,17],[104,20,96,18,"stop"],[104,24,96,22],[104,25,96,23],[104,30,96,28],[104,31,96,29],[105,8,97,6],[105,12,97,10],[105,13,97,11,"hammer"],[105,19,97,17],[105,20,97,18,"destroy"],[105,27,97,25],[105,28,97,26],[105,29,97,27],[106,6,98,4],[107,6,99,4],[107,10,99,8],[107,11,99,9,"hammer"],[107,17,99,15],[107,20,99,18],[107,24,99,22],[108,4,100,2],[108,5,100,3],[109,4,101,2,"isPointInView"],[109,17,101,15],[109,20,101,18,"isPointInView"],[109,21,101,19],[110,6,102,4,"x"],[110,7,102,5],[111,6,103,4,"y"],[112,4,104,2],[112,5,104,3],[112,10,104,8],[113,6,105,4],[114,6,106,4],[114,12,106,10,"rect"],[114,16,106,14],[114,19,106,17],[114,23,106,21],[114,24,106,22,"view"],[114,28,106,26],[114,29,106,27,"getBoundingClientRect"],[114,50,106,48],[114,51,106,49],[114,52,106,50],[115,6,107,4],[115,12,107,10,"pointerInside"],[115,25,107,23],[115,28,107,26,"x"],[115,29,107,27],[115,33,107,31,"rect"],[115,37,107,35],[115,38,107,36,"left"],[115,42,107,40],[115,46,107,44,"x"],[115,47,107,45],[115,51,107,49,"rect"],[115,55,107,53],[115,56,107,54,"right"],[115,61,107,59],[115,65,107,63,"y"],[115,66,107,64],[115,70,107,68,"rect"],[115,74,107,72],[115,75,107,73,"top"],[115,78,107,76],[115,82,107,80,"y"],[115,83,107,81],[115,87,107,85,"rect"],[115,91,107,89],[115,92,107,90,"bottom"],[115,98,107,96],[116,6,108,4],[116,13,108,11,"pointerInside"],[116,26,108,24],[117,4,109,2],[117,5,109,3],[118,4,110,2,"getState"],[118,12,110,10,"getState"],[118,13,110,11,"type"],[118,17,110,15],[118,19,110,17],[119,6,111,4],[120,6,112,4],[120,10,112,8,"type"],[120,14,112,12],[120,18,112,16],[120,19,112,17],[120,21,112,19],[121,8,113,6],[121,15,113,13],[121,16,113,14],[122,6,114,4],[123,6,115,4],[123,13,115,11,"EventMap"],[123,32,115,19],[123,33,115,20,"type"],[123,37,115,24],[123,38,115,25],[124,4,116,2],[125,4,117,2,"transformEventData"],[125,22,117,20,"transformEventData"],[125,23,117,21,"event"],[125,28,117,26],[125,30,117,28],[126,6,118,4],[126,12,118,10],[127,8,119,6,"eventType"],[127,17,119,15],[128,8,120,6,"maxPointers"],[128,19,120,17],[128,21,120,19,"numberOfPointers"],[129,6,121,4],[129,7,121,5],[129,10,121,8,"event"],[129,15,121,13],[130,6,122,4],[131,6,123,4],[131,12,123,10,"changedTouch"],[131,24,123,22],[131,27,123,25,"event"],[131,32,123,30],[131,33,123,31,"changedPointers"],[131,48,123,46],[131,49,123,47],[131,50,123,48],[131,51,123,49],[132,6,124,4],[132,12,124,10,"pointerInside"],[132,25,124,23],[132,28,124,26],[132,32,124,30],[132,33,124,31,"isPointInView"],[132,46,124,44],[132,47,124,45],[133,8,125,6,"x"],[133,9,125,7],[133,11,125,9,"changedTouch"],[133,23,125,21],[133,24,125,22,"clientX"],[133,31,125,29],[134,8,126,6,"y"],[134,9,126,7],[134,11,126,9,"changedTouch"],[134,23,126,21],[134,24,126,22,"clientY"],[135,6,127,4],[135,7,127,5],[135,8,127,6],[137,6,129,4],[138,6,130,4],[138,12,130,10,"state"],[138,17,130,15],[138,20,130,18],[138,24,130,22],[138,25,130,23,"getState"],[138,33,130,31],[138,34,130,32,"eventType"],[138,43,130,41],[138,44,130,42],[139,6,131,4],[139,10,131,8,"state"],[139,15,131,13],[139,20,131,18],[139,24,131,22],[139,25,131,23,"previousState"],[139,38,131,36],[139,40,131,38],[140,8,132,6],[140,12,132,10],[140,13,132,11,"oldState"],[140,21,132,19],[140,24,132,22],[140,28,132,26],[140,29,132,27,"previousState"],[140,42,132,40],[141,8,133,6],[141,12,133,10],[141,13,133,11,"previousState"],[141,26,133,24],[141,29,133,27,"state"],[141,34,133,32],[142,6,134,4],[143,6,135,4],[143,13,135,11],[144,8,136,6,"nativeEvent"],[144,19,136,17],[144,21,136,17,"Object"],[144,27,136,17],[144,28,136,17,"assign"],[144,34,136,17],[145,10,137,8,"numberOfPointers"],[145,26,137,24],[146,10,138,8,"state"],[146,15,138,13],[147,10,139,8,"pointerInside"],[148,8,139,21],[148,11,140,11],[148,15,140,15],[148,16,140,16,"transformNativeEvent"],[148,36,140,36],[148,37,140,37,"event"],[148,42,140,42],[148,43,140,43],[149,10,141,8],[150,10,142,8,"handlerTag"],[150,20,142,18],[150,22,142,20],[150,26,142,24],[150,27,142,25,"handlerTag"],[150,37,142,35],[151,10,143,8,"target"],[151,16,143,14],[151,18,143,16],[151,22,143,20],[151,23,143,21,"ref"],[151,26,143,24],[152,10,144,8],[153,10,145,8],[154,10,146,8],[155,10,147,8,"oldState"],[155,18,147,16],[155,20,147,18,"state"],[155,25,147,23],[155,30,147,28],[155,34,147,32],[155,35,147,33,"previousState"],[155,48,147,46],[155,52,147,50,"state"],[155,57,147,55],[155,61,147,59],[155,62,147,60],[155,65,147,63],[155,69,147,67],[155,70,147,68,"oldState"],[155,78,147,76],[155,81,147,79,"undefined"],[156,8,147,88],[156,10,148,7],[157,8,149,6,"timeStamp"],[157,17,149,15],[157,19,149,17,"Date"],[157,23,149,21],[157,24,149,22,"now"],[157,27,149,25],[157,28,149,26],[158,6,150,4],[158,7,150,5],[159,4,151,2],[160,4,152,2,"transformNativeEvent"],[160,24,152,22,"transformNativeEvent"],[160,25,152,23,"_event"],[160,31,152,29],[160,33,152,31],[161,6,153,4],[161,13,153,11],[161,14,153,12],[161,15,153,13],[162,4,154,2],[163,4,155,2,"sendEvent"],[163,13,155,11],[163,16,155,14,"nativeEvent"],[163,27,155,25],[163,31,155,29],[164,6,156,4],[164,12,156,10],[165,8,157,6,"onGestureHandlerEvent"],[165,29,157,27],[166,8,158,6,"onGestureHandlerStateChange"],[167,6,159,4],[167,7,159,5],[167,10,159,8],[167,14,159,12],[167,15,159,13,"propsRef"],[167,23,159,21],[167,24,159,22,"current"],[167,31,159,29],[168,6,160,4],[168,12,160,10,"event"],[168,17,160,15],[168,20,160,18],[168,24,160,22],[168,25,160,23,"transformEventData"],[168,43,160,41],[168,44,160,42,"nativeEvent"],[168,55,160,53],[168,56,160,54],[169,6,161,4,"invokeNullableMethod"],[169,26,161,24],[169,27,161,25,"onGestureHandlerEvent"],[169,48,161,46],[169,50,161,48,"event"],[169,55,161,53],[169,56,161,54],[170,6,162,4],[170,10,162,8],[170,14,162,12],[170,15,162,13,"lastSentState"],[170,28,162,26],[170,33,162,31,"event"],[170,38,162,36],[170,39,162,37,"nativeEvent"],[170,50,162,48],[170,51,162,49,"state"],[170,56,162,54],[170,58,162,56],[171,8,163,6],[171,12,163,10],[171,13,163,11,"lastSentState"],[171,26,163,24],[171,29,163,27,"event"],[171,34,163,32],[171,35,163,33,"nativeEvent"],[171,46,163,44],[171,47,163,45,"state"],[171,52,163,50],[172,8,164,6,"invokeNullableMethod"],[172,28,164,26],[172,29,164,27,"onGestureHandlerStateChange"],[172,56,164,54],[172,58,164,56,"event"],[172,63,164,61],[172,64,164,62],[173,6,165,4],[174,4,166,2],[174,5,166,3],[175,4,167,2,"cancelPendingGestures"],[175,25,167,23,"cancelPendingGestures"],[175,26,167,24,"event"],[175,31,167,29],[175,33,167,31],[176,6,168,4],[176,11,168,9],[176,17,168,15,"gesture"],[176,24,168,22],[176,28,168,26,"Object"],[176,34,168,32],[176,35,168,33,"values"],[176,41,168,39],[176,42,168,40],[176,46,168,44],[176,47,168,45,"pendingGestures"],[176,62,168,60],[176,63,168,61],[176,65,168,63],[177,8,169,6],[177,12,169,10,"gesture"],[177,19,169,17],[177,23,169,21,"gesture"],[177,30,169,28],[177,31,169,29,"isGestureRunning"],[177,47,169,45],[177,49,169,47],[178,10,170,8,"gesture"],[178,17,170,15],[178,18,170,16,"hasGestureFailed"],[178,34,170,32],[178,37,170,35],[178,41,170,39],[179,10,171,8,"gesture"],[179,17,171,15],[179,18,171,16,"cancelEvent"],[179,29,171,27],[179,30,171,28,"event"],[179,35,171,33],[179,36,171,34],[180,8,172,6],[181,6,173,4],[182,4,174,2],[183,4,175,2,"notifyPendingGestures"],[183,25,175,23,"notifyPendingGestures"],[183,26,175,23],[183,28,175,26],[184,6,176,4],[184,11,176,9],[184,17,176,15,"gesture"],[184,24,176,22],[184,28,176,26,"Object"],[184,34,176,32],[184,35,176,33,"values"],[184,41,176,39],[184,42,176,40],[184,46,176,44],[184,47,176,45,"pendingGestures"],[184,62,176,60],[184,63,176,61],[184,65,176,63],[185,8,177,6],[185,12,177,10,"gesture"],[185,19,177,17],[185,21,177,19],[186,10,178,8,"gesture"],[186,17,178,15],[186,18,178,16,"onWaitingEnded"],[186,32,178,30],[186,33,178,31],[186,37,178,35],[186,38,178,36],[187,8,179,6],[188,6,180,4],[189,4,181,2],[191,4,183,2],[192,4,184,2,"onGestureEnded"],[192,18,184,16,"onGestureEnded"],[192,19,184,17,"event"],[192,24,184,22],[192,26,184,24],[193,6,185,4],[193,10,185,8],[193,11,185,9,"isGestureRunning"],[193,27,185,25],[193,30,185,28],[193,35,185,33],[194,6,186,4],[194,10,186,8],[194,11,186,9,"cancelPendingGestures"],[194,32,186,30],[194,33,186,31,"event"],[194,38,186,36],[194,39,186,37],[195,4,187,2],[196,4,188,2,"forceInvalidate"],[196,19,188,17,"forceInvalidate"],[196,20,188,18,"event"],[196,25,188,23],[196,27,188,25],[197,6,189,4],[197,10,189,8],[197,14,189,12],[197,15,189,13,"isGestureRunning"],[197,31,189,29],[197,33,189,31],[198,8,190,6],[198,12,190,10],[198,13,190,11,"hasGestureFailed"],[198,29,190,27],[198,32,190,30],[198,36,190,34],[199,8,191,6],[199,12,191,10],[199,13,191,11,"cancelEvent"],[199,24,191,22],[199,25,191,23,"event"],[199,30,191,28],[199,31,191,29],[200,6,192,4],[201,4,193,2],[202,4,194,2,"cancelEvent"],[202,15,194,13,"cancelEvent"],[202,16,194,14,"event"],[202,21,194,19],[202,23,194,21],[203,6,195,4],[203,10,195,8],[203,11,195,9,"notifyPendingGestures"],[203,32,195,30],[203,33,195,31],[203,34,195,32],[204,6,196,4],[204,10,196,8],[204,11,196,9,"sendEvent"],[204,20,196,18],[204,21,196,18,"Object"],[204,27,196,18],[204,28,196,18,"assign"],[204,34,196,18],[204,39,197,9,"event"],[204,44,197,14],[205,8,198,6,"eventType"],[205,17,198,15],[205,19,198,17,"Hammer"],[205,36,198,23],[205,37,198,24,"INPUT_CANCEL"],[205,49,198,36],[206,8,199,6,"isFinal"],[206,15,199,13],[206,17,199,15],[207,6,199,19],[207,8,200,5],[207,9,200,6],[208,6,201,4],[208,10,201,8],[208,11,201,9,"onGestureEnded"],[208,25,201,23],[208,26,201,24,"event"],[208,31,201,29],[208,32,201,30],[209,4,202,2],[210,4,203,2,"onRawEvent"],[210,14,203,12,"onRawEvent"],[210,15,203,13],[211,6,204,4,"isFirst"],[212,4,205,2],[212,5,205,3],[212,7,205,5],[213,6,206,4],[213,10,206,8,"isFirst"],[213,17,206,15],[213,19,206,17],[214,8,207,6],[214,12,207,10],[214,13,207,11,"hasGestureFailed"],[214,29,207,27],[214,32,207,30],[214,37,207,35],[215,6,208,4],[216,4,209,2],[217,4,210,2,"shouldUseTouchEvents"],[217,24,210,22,"shouldUseTouchEvents"],[217,25,210,23,"config"],[217,31,210,29],[217,33,210,31],[218,6,211,4],[218,13,211,11,"config"],[218,19,211,17],[218,20,211,18,"simultaneousHandlers"],[218,40,211,38],[218,42,211,40,"some"],[218,46,211,44],[218,47,211,45,"handler"],[218,54,211,52],[218,58,211,56,"handler"],[218,65,211,63],[218,66,211,64,"isNative"],[218,74,211,72],[218,75,211,73],[218,79,211,77],[218,84,211,82],[219,4,212,2],[220,4,213,2,"setView"],[220,11,213,9,"setView"],[220,12,213,10,"ref"],[220,15,213,13],[220,17,213,15,"propsRef"],[220,25,213,23],[220,27,213,25],[221,6,214,4],[221,10,214,8,"ref"],[221,13,214,11],[221,17,214,15],[221,21,214,19],[221,23,214,21],[222,8,215,6],[222,12,215,10],[222,13,215,11,"destroy"],[222,20,215,18],[222,21,215,19],[222,22,215,20],[223,8,216,6],[223,12,216,10],[223,13,216,11,"view"],[223,17,216,15],[223,20,216,18],[223,24,216,22],[224,8,217,6],[225,6,218,4],[227,6,220,4],[228,6,221,4],[228,12,221,10,"SUPPORTS_TOUCH"],[228,26,221,24],[228,29,221,27],[228,43,221,41],[228,47,221,45,"window"],[228,53,221,51],[229,6,222,4],[229,10,222,8],[229,11,222,9,"propsRef"],[229,19,222,17],[229,22,222,20,"propsRef"],[229,30,222,28],[230,6,223,4],[230,10,223,8],[230,11,223,9,"ref"],[230,14,223,12],[230,17,223,15,"ref"],[230,20,223,18],[232,6,225,4],[233,6,226,4],[233,10,226,8],[233,11,226,9,"view"],[233,15,226,13],[233,18,226,16],[233,22,226,16,"findNodeHandle"],[233,45,226,30],[233,47,226,31,"ref"],[233,50,226,34],[233,51,226,35],[235,6,228,4],[236,6,229,4],[237,6,230,4],[238,6,231,4],[238,10,231,8],[238,11,231,9,"hammer"],[238,17,231,15],[238,20,231,18,"SUPPORTS_TOUCH"],[238,34,231,32],[238,38,231,36],[238,42,231,40],[238,43,231,41,"shouldUseTouchEvents"],[238,63,231,61],[238,64,231,62],[238,68,231,66],[238,69,231,67,"config"],[238,75,231,73],[238,76,231,74],[238,79,231,77],[238,83,231,81,"Hammer"],[238,100,231,87],[238,101,231,88,"Manager"],[238,108,231,95],[238,109,231,96],[238,113,231,100],[238,114,231,101,"view"],[238,118,231,105],[238,120,231,107],[239,8,232,6,"inputClass"],[239,18,232,16],[239,20,232,18,"Hammer"],[239,37,232,24],[239,38,232,25,"TouchInput"],[240,6,233,4],[240,7,233,5],[240,8,233,6],[240,11,233,9],[240,15,233,13,"Hammer"],[240,32,233,19],[240,33,233,20,"Manager"],[240,40,233,27],[240,41,233,28],[240,45,233,32],[240,46,233,33,"view"],[240,50,233,37],[240,51,233,38],[241,6,234,4],[241,10,234,8],[241,11,234,9,"oldState"],[241,19,234,17],[241,22,234,20,"State"],[241,34,234,25],[241,35,234,26,"UNDETERMINED"],[241,47,234,38],[242,6,235,4],[242,10,235,8],[242,11,235,9,"previousState"],[242,24,235,22],[242,27,235,25,"State"],[242,39,235,30],[242,40,235,31,"UNDETERMINED"],[242,52,235,43],[243,6,236,4],[243,10,236,8],[243,11,236,9,"lastSentState"],[243,24,236,22],[243,27,236,25],[243,31,236,29],[244,6,237,4],[244,12,237,10],[245,8,238,6,"NativeGestureClass"],[246,6,239,4],[246,7,239,5],[246,10,239,8],[246,14,239,12],[247,6,240,4],[248,6,241,4],[248,12,241,10,"gesture"],[248,19,241,17],[248,22,241,20],[248,26,241,24,"NativeGestureClass"],[248,44,241,42],[248,45,241,43],[248,49,241,47],[248,50,241,48,"getHammerConfig"],[248,65,241,63],[248,66,241,64],[248,67,241,65],[248,68,241,66],[249,6,242,4],[249,10,242,8],[249,11,242,9,"hammer"],[249,17,242,15],[249,18,242,16,"add"],[249,21,242,19],[249,22,242,20,"gesture"],[249,29,242,27],[249,30,242,28],[250,6,243,4],[250,10,243,8],[250,11,243,9,"hammer"],[250,17,243,15],[250,18,243,16,"on"],[250,20,243,18],[250,21,243,19],[250,35,243,33],[250,37,243,35,"ev"],[250,39,243,37],[250,43,243,41],[251,8,244,6],[251,12,244,10],[251,13,244,11],[251,17,244,15],[251,18,244,16,"config"],[251,24,244,22],[251,25,244,23,"enabled"],[251,32,244,30],[251,34,244,32],[252,10,245,8],[252,14,245,12],[252,15,245,13,"hasGestureFailed"],[252,31,245,29],[252,34,245,32],[252,39,245,37],[253,10,246,8],[253,14,246,12],[253,15,246,13,"isGestureRunning"],[253,31,246,29],[253,34,246,32],[253,39,246,37],[254,10,247,8],[255,8,248,6],[256,8,249,6],[256,12,249,10],[256,13,249,11,"onRawEvent"],[256,23,249,21],[256,24,249,22,"ev"],[256,26,249,24],[256,27,249,25],[258,8,251,6],[259,8,252,6],[260,8,253,6],[260,12,253,10],[260,16,253,14],[260,17,253,15,"initialRotation"],[260,32,253,30],[260,37,253,35],[260,41,253,39],[260,45,253,43,"ev"],[260,47,253,45],[260,48,253,46,"rotation"],[260,56,253,54],[260,61,253,59],[260,62,253,60],[260,64,253,62],[261,10,254,8],[261,14,254,12],[261,15,254,13,"initialRotation"],[261,30,254,28],[261,33,254,31,"ev"],[261,35,254,33],[261,36,254,34,"rotation"],[261,44,254,42],[262,8,255,6],[263,8,256,6],[263,12,256,10,"ev"],[263,14,256,12],[263,15,256,13,"isFinal"],[263,22,256,20],[263,24,256,22],[264,10,257,8],[265,10,258,8,"setTimeout"],[265,20,258,18],[265,21,258,19],[265,27,258,25],[266,12,259,10],[266,16,259,14],[266,17,259,15,"initialRotation"],[266,32,259,30],[266,35,259,33],[266,39,259,37],[267,12,260,10],[267,16,260,14],[267,17,260,15,"hasGestureFailed"],[267,33,260,31],[267,36,260,34],[267,41,260,39],[268,10,261,8],[268,11,261,9],[268,12,261,10],[269,8,262,6],[270,6,263,4],[270,7,263,5],[270,8,263,6],[271,6,264,4],[271,10,264,8],[271,11,264,9,"setupEvents"],[271,22,264,20],[271,23,264,21],[271,24,264,22],[272,6,265,4],[272,10,265,8],[272,11,265,9,"sync"],[272,15,265,13],[272,16,265,14],[272,17,265,15],[273,4,266,2],[274,4,267,2,"setupEvents"],[274,15,267,13,"setupEvents"],[274,16,267,13],[274,18,267,16],[275,6,268,4],[276,6,269,4],[276,10,269,8],[276,11,269,9],[276,15,269,13],[276,16,269,14,"isDiscrete"],[276,26,269,24],[276,28,269,26],[277,8,270,6],[277,12,270,10],[277,13,270,11,"hammer"],[277,19,270,17],[277,20,270,18,"on"],[277,22,270,20],[277,23,270,21],[277,26,270,24],[277,30,270,28],[277,31,270,29,"name"],[277,35,270,33],[277,42,270,40],[277,44,270,42,"event"],[277,49,270,47],[277,53,270,51],[277,57,270,55],[277,58,270,56,"onStart"],[277,65,270,63],[277,66,270,64,"event"],[277,71,270,69],[277,72,270,70],[277,73,270,71],[278,8,271,6],[278,12,271,10],[278,13,271,11,"hammer"],[278,19,271,17],[278,20,271,18,"on"],[278,22,271,20],[278,23,271,21],[278,26,271,24],[278,30,271,28],[278,31,271,29,"name"],[278,35,271,33],[278,42,271,40],[278,46,271,44],[278,47,271,45,"name"],[278,51,271,49],[278,59,271,57],[278,61,271,59,"event"],[278,66,271,64],[278,70,271,68],[279,10,272,8],[279,14,272,12],[279,15,272,13,"onGestureEnded"],[279,29,272,27],[279,30,272,28,"event"],[279,35,272,33],[279,36,272,34],[280,8,273,6],[280,9,273,7],[280,10,273,8],[281,6,274,4],[282,6,275,4],[282,10,275,8],[282,11,275,9,"hammer"],[282,17,275,15],[282,18,275,16,"on"],[282,20,275,18],[282,21,275,19],[282,25,275,23],[282,26,275,24,"name"],[282,30,275,28],[282,32,275,30,"ev"],[282,34,275,32],[282,38,275,36],[282,42,275,40],[282,43,275,41,"onGestureActivated"],[282,61,275,59],[282,62,275,60,"ev"],[282,64,275,62],[282,65,275,63],[282,66,275,64],[282,67,275,65],[282,68,275,66],[283,4,276,2],[284,4,277,2,"onStart"],[284,11,277,9,"onStart"],[284,12,277,10],[285,6,278,4,"deltaX"],[285,12,278,10],[286,6,279,4,"deltaY"],[286,12,279,10],[287,6,280,4,"rotation"],[288,4,281,2],[288,5,281,3],[288,7,281,5],[289,6,282,4],[290,6,283,4],[290,10,283,8],[290,11,283,9,"oldState"],[290,19,283,17],[290,22,283,20,"State"],[290,34,283,25],[290,35,283,26,"UNDETERMINED"],[290,47,283,38],[291,6,284,4],[291,10,284,8],[291,11,284,9,"previousState"],[291,24,284,22],[291,27,284,25,"State"],[291,39,284,30],[291,40,284,31,"UNDETERMINED"],[291,52,284,43],[292,6,285,4],[292,10,285,8],[292,11,285,9,"lastSentState"],[292,24,285,22],[292,27,285,25],[292,31,285,29],[293,6,286,4],[293,10,286,8],[293,11,286,9,"isGestureRunning"],[293,27,286,25],[293,30,286,28],[293,34,286,32],[294,6,287,4],[294,10,287,8],[294,11,287,9,"__initialX"],[294,21,287,19],[294,24,287,22,"deltaX"],[294,30,287,28],[295,6,288,4],[295,10,288,8],[295,11,288,9,"__initialY"],[295,21,288,19],[295,24,288,22,"deltaY"],[295,30,288,28],[296,6,289,4],[296,10,289,8],[296,11,289,9,"initialRotation"],[296,26,289,24],[296,29,289,27,"rotation"],[296,37,289,35],[297,4,290,2],[298,4,291,2,"onGestureActivated"],[298,22,291,20,"onGestureActivated"],[298,23,291,21,"ev"],[298,25,291,23],[298,27,291,25],[299,6,292,4],[299,10,292,8],[299,11,292,9,"sendEvent"],[299,20,292,18],[299,21,292,19,"ev"],[299,23,292,21],[299,24,292,22],[300,4,293,2],[301,4,294,2,"onSuccess"],[301,13,294,11,"onSuccess"],[301,14,294,11],[301,16,294,14],[301,17,294,15],[302,4,295,2,"_getPendingGestures"],[302,23,295,21,"_getPendingGestures"],[302,24,295,21],[302,26,295,24],[303,6,296,4],[303,10,296,8,"Array"],[303,15,296,13],[303,16,296,14,"isArray"],[303,23,296,21],[303,24,296,22],[303,28,296,26],[303,29,296,27,"config"],[303,35,296,33],[303,36,296,34,"waitFor"],[303,43,296,41],[303,44,296,42],[303,48,296,46],[303,52,296,50],[303,53,296,51,"config"],[303,59,296,57],[303,60,296,58,"waitFor"],[303,67,296,65],[303,68,296,66,"length"],[303,74,296,72],[303,76,296,74],[304,8,297,6],[305,8,298,6],[306,8,299,6],[306,14,299,12,"stillWaiting"],[306,26,299,24],[306,29,299,27],[306,33,299,31],[306,34,299,32,"config"],[306,40,299,38],[306,41,299,39,"waitFor"],[306,48,299,46],[306,49,299,47,"filter"],[306,55,299,53],[306,56,299,54],[306,57,299,55],[307,10,300,8,"hasGestureFailed"],[308,8,301,6],[308,9,301,7],[308,14,301,12,"hasGestureFailed"],[308,30,301,28],[308,35,301,33],[308,40,301,38],[308,41,301,39],[309,8,302,6],[309,15,302,13,"stillWaiting"],[309,27,302,25],[310,6,303,4],[311,6,304,4],[311,13,304,11],[311,15,304,13],[312,4,305,2],[313,4,306,2,"getHammerConfig"],[313,19,306,17,"getHammerConfig"],[313,20,306,17],[313,22,306,20],[314,6,307,4],[314,12,307,10,"pointers"],[314,20,307,18],[314,23,307,21],[314,27,307,25],[314,28,307,26,"config"],[314,34,307,32],[314,35,307,33,"minPointers"],[314,46,307,44],[314,51,307,49],[314,55,307,53],[314,56,307,54,"config"],[314,62,307,60],[314,63,307,61,"maxPointers"],[314,74,307,72],[314,77,307,75],[314,81,307,79],[314,82,307,80,"config"],[314,88,307,86],[314,89,307,87,"minPointers"],[314,100,307,98],[314,103,307,101],[314,104,307,102],[315,6,308,4],[315,13,308,11],[316,8,309,6,"pointers"],[317,6,310,4],[317,7,310,5],[318,4,311,2],[319,4,312,2,"sync"],[319,8,312,6],[319,11,312,9,"sync"],[319,12,312,9],[319,17,312,15],[320,6,313,4],[320,12,313,10,"gesture"],[320,19,313,17],[320,22,313,20],[320,26,313,24],[320,27,313,25,"hammer"],[320,33,313,31],[320,34,313,32,"get"],[320,37,313,35],[320,38,313,36],[320,42,313,40],[320,43,313,41,"name"],[320,47,313,45],[320,48,313,46],[321,6,314,4],[321,10,314,8],[321,11,314,9,"gesture"],[321,18,314,16],[321,20,314,18],[322,6,315,4],[322,12,315,10,"enable"],[322,18,315,16],[322,21,315,19,"enable"],[322,22,315,20,"recognizer"],[322,32,315,30],[322,34,315,32,"inputData"],[322,43,315,41],[322,48,315,46],[323,8,316,6],[323,12,316,10],[323,13,316,11],[323,17,316,15],[323,18,316,16,"config"],[323,24,316,22],[323,25,316,23,"enabled"],[323,32,316,30],[323,34,316,32],[324,10,317,8],[324,14,317,12],[324,15,317,13,"isGestureRunning"],[324,31,317,29],[324,34,317,32],[324,39,317,37],[325,10,318,8],[325,14,318,12],[325,15,318,13,"hasGestureFailed"],[325,31,318,29],[325,34,318,32],[325,39,318,37],[326,10,319,8],[326,17,319,15],[326,22,319,20],[327,8,320,6],[329,8,322,6],[330,8,323,6],[330,12,323,10],[330,13,323,11,"inputData"],[330,22,323,20],[330,26,323,24],[330,27,323,25,"recognizer"],[330,37,323,35],[330,38,323,36,"options"],[330,45,323,43],[330,49,323,47],[330,56,323,54,"inputData"],[330,65,323,63],[330,66,323,64,"maxPointers"],[330,77,323,75],[330,82,323,80],[330,93,323,91],[330,95,323,93],[331,10,324,8],[331,17,324,15],[331,21,324,19],[331,22,324,20,"shouldEnableGestureOnSetup"],[331,48,324,46],[332,8,325,6],[333,8,326,6],[333,12,326,10],[333,16,326,14],[333,17,326,15,"hasGestureFailed"],[333,33,326,31],[333,35,326,33],[334,10,327,8],[334,17,327,15],[334,22,327,20],[335,8,328,6],[336,8,329,6],[336,12,329,10],[336,13,329,11],[336,17,329,15],[336,18,329,16,"isDiscrete"],[336,28,329,26],[336,30,329,28],[337,10,330,8],[337,14,330,12],[337,18,330,16],[337,19,330,17,"isGestureRunning"],[337,35,330,33],[337,37,330,35],[338,12,331,10],[338,19,331,17],[338,23,331,21],[339,10,332,8],[340,10,333,8],[341,10,334,8],[342,10,335,8],[342,14,335,12],[342,15,335,13,"_stillWaiting"],[342,28,335,26],[342,31,335,29],[342,35,335,33],[342,36,335,34,"_getPendingGestures"],[342,55,335,53],[342,56,335,54],[342,57,335,55],[343,10,336,8],[344,10,337,8],[344,14,337,12],[344,18,337,16],[344,19,337,17,"_stillWaiting"],[344,32,337,30],[344,33,337,31,"length"],[344,39,337,37],[344,41,337,39],[345,12,338,10],[346,12,339,10],[347,12,340,10],[347,17,340,15],[347,23,340,21,"gesture"],[347,30,340,28],[347,34,340,32],[347,38,340,36],[347,39,340,37,"_stillWaiting"],[347,52,340,50],[347,54,340,52],[348,14,341,12],[349,14,342,12],[349,18,342,16],[349,19,342,17,"gesture"],[349,26,342,24],[349,27,342,25,"isDiscrete"],[349,37,342,35],[349,41,342,39,"gesture"],[349,48,342,46],[349,49,342,47,"isGestureRunning"],[349,65,342,63],[349,67,342,65],[350,16,343,14],[350,20,343,18],[350,21,343,19,"hasGestureFailed"],[350,37,343,35],[350,40,343,38],[350,44,343,42],[351,16,344,14],[351,20,344,18],[351,21,344,19,"isGestureRunning"],[351,37,344,35],[351,40,344,38],[351,45,344,43],[352,16,345,14],[352,23,345,21],[352,28,345,26],[353,14,346,12],[354,12,347,10],[355,12,348,10],[356,12,349,10],[356,19,349,17],[356,24,349,22],[357,10,350,8],[358,8,351,6],[360,8,353,6],[361,8,354,6],[361,12,354,10],[361,13,354,11],[361,17,354,15],[361,18,354,16,"hasCustomActivationCriteria"],[361,45,354,43],[361,47,354,45],[362,10,355,8],[362,17,355,15],[362,21,355,19],[363,8,356,6],[364,8,357,6],[364,14,357,12,"deltaRotation"],[364,27,357,25],[364,30,357,28],[364,34,357,32],[364,35,357,33,"initialRotation"],[364,50,357,48],[364,54,357,52],[364,58,357,56],[364,61,357,59],[364,62,357,60],[364,65,357,63,"inputData"],[364,74,357,72],[364,75,357,73,"rotation"],[364,83,357,81],[364,86,357,84],[364,90,357,88],[364,91,357,89,"initialRotation"],[364,106,357,104],[365,8,358,6],[366,8,359,6],[366,14,359,12],[367,10,360,8,"success"],[367,17,360,15],[368,10,361,8,"failed"],[369,8,362,6],[369,9,362,7],[369,12,362,10],[369,16,362,14],[369,17,362,15,"isGestureEnabledForEvent"],[369,41,362,39],[369,42,362,40],[369,46,362,44],[369,47,362,45,"getConfig"],[369,56,362,54],[369,57,362,55],[369,58,362,56],[369,60,362,58,"recognizer"],[369,70,362,68],[369,72,362,68,"Object"],[369,78,362,68],[369,79,362,68,"assign"],[369,85,362,68],[369,90,363,11,"inputData"],[369,99,363,20],[370,10,364,8,"deltaRotation"],[371,8,364,21],[371,10,365,7],[371,11,365,8],[372,8,366,6],[372,12,366,10,"failed"],[372,18,366,16],[372,20,366,18],[373,10,367,8],[373,14,367,12],[373,15,367,13,"simulateCancelEvent"],[373,34,367,32],[373,35,367,33,"inputData"],[373,44,367,42],[373,45,367,43],[374,10,368,8],[374,14,368,12],[374,15,368,13,"hasGestureFailed"],[374,31,368,29],[374,34,368,32],[374,38,368,36],[375,8,369,6],[376,8,370,6],[376,15,370,13,"success"],[376,22,370,20],[377,6,371,4],[377,7,371,5],[378,6,372,4],[378,12,372,10,"params"],[378,18,372,16],[378,21,372,19],[378,25,372,23],[378,26,372,24,"getHammerConfig"],[378,41,372,39],[378,42,372,40],[378,43,372,41],[379,6,373,4],[380,6,374,4,"gesture"],[380,13,374,11],[380,14,374,12,"set"],[380,17,374,15],[380,18,374,15,"Object"],[380,24,374,15],[380,25,374,15,"assign"],[380,31,374,15],[380,36,375,9,"params"],[380,42,375,15],[381,8,376,6,"enable"],[382,6,376,12],[382,8,377,5],[382,9,377,6],[383,4,378,2],[383,5,378,3],[384,4,379,2,"simulateCancelEvent"],[384,23,379,21,"simulateCancelEvent"],[384,24,379,22,"_inputData"],[384,34,379,32],[384,36,379,34],[384,37,379,35],[386,4,381,2],[387,4,382,2,"ensureConfig"],[387,16,382,14,"ensureConfig"],[387,17,382,15,"config"],[387,23,382,21],[387,25,382,23],[388,6,383,4],[388,12,383,10,"props"],[388,17,383,15],[388,20,383,15,"Object"],[388,26,383,15],[388,27,383,15,"assign"],[388,33,383,15],[388,38,384,9,"config"],[388,44,384,15],[388,45,385,5],[390,6,387,4],[391,6,388,4],[391,10,388,8],[391,19,388,17],[391,23,388,21,"config"],[391,29,388,27],[391,31,388,29],[392,8,389,6,"props"],[392,13,389,11],[392,14,389,12,"minDist"],[392,21,389,19],[392,24,389,22,"config"],[392,30,389,28],[392,31,389,29,"minDist"],[392,38,389,36],[393,8,390,6,"props"],[393,13,390,11],[393,14,390,12,"minDistSq"],[393,23,390,21],[393,26,390,24,"props"],[393,31,390,29],[393,32,390,30,"minDist"],[393,39,390,37],[393,42,390,40,"props"],[393,47,390,45],[393,48,390,46,"minDist"],[393,55,390,53],[394,6,391,4],[395,6,392,4],[395,10,392,8],[395,23,392,21],[395,27,392,25,"config"],[395,33,392,31],[395,35,392,33],[396,8,393,6,"props"],[396,13,393,11],[396,14,393,12,"minVelocity"],[396,25,393,23],[396,28,393,26,"config"],[396,34,393,32],[396,35,393,33,"minVelocity"],[396,46,393,44],[397,8,394,6,"props"],[397,13,394,11],[397,14,394,12,"minVelocitySq"],[397,27,394,25],[397,30,394,28,"props"],[397,35,394,33],[397,36,394,34,"minVelocity"],[397,47,394,45],[397,50,394,48,"props"],[397,55,394,53],[397,56,394,54,"minVelocity"],[397,67,394,65],[398,6,395,4],[399,6,396,4],[399,10,396,8],[399,19,396,17],[399,23,396,21,"config"],[399,29,396,27],[399,31,396,29],[400,8,397,6,"props"],[400,13,397,11],[400,14,397,12,"maxDist"],[400,21,397,19],[400,24,397,22,"config"],[400,30,397,28],[400,31,397,29,"maxDist"],[400,38,397,36],[401,8,398,6,"props"],[401,13,398,11],[401,14,398,12,"maxDistSq"],[401,23,398,21],[401,26,398,24,"config"],[401,32,398,30],[401,33,398,31,"maxDist"],[401,40,398,38],[401,43,398,41,"config"],[401,49,398,47],[401,50,398,48,"maxDist"],[401,57,398,55],[402,6,399,4],[403,6,400,4],[403,10,400,8],[403,19,400,17],[403,23,400,21,"config"],[403,29,400,27],[403,31,400,29],[404,8,401,6,"props"],[404,13,401,11],[404,14,401,12,"waitFor"],[404,21,401,19],[404,24,401,22,"asArray"],[404,31,401,29],[404,32,401,30,"config"],[404,38,401,36],[404,39,401,37,"waitFor"],[404,46,401,44],[404,47,401,45],[404,48,401,46,"map"],[404,51,401,49],[404,52,401,50],[404,53,401,51],[405,10,402,8,"handlerTag"],[406,8,403,6],[406,9,403,7],[406,14,403,12,"NodeManager"],[406,25,403,23],[406,26,403,24,"getHandler"],[406,36,403,34],[406,37,403,35,"handlerTag"],[406,47,403,45],[406,48,403,46],[406,49,403,47],[406,50,403,48,"filter"],[406,56,403,54],[406,57,403,55,"v"],[406,58,403,56],[406,62,403,60,"v"],[406,63,403,61],[406,64,403,62],[407,6,404,4],[407,7,404,5],[407,13,404,11],[408,8,405,6,"props"],[408,13,405,11],[408,14,405,12,"waitFor"],[408,21,405,19],[408,24,405,22],[408,28,405,26],[409,6,406,4],[410,6,407,4],[410,10,407,8],[410,32,407,30],[410,36,407,34,"config"],[410,42,407,40],[410,44,407,42],[411,8,408,6],[411,14,408,12,"shouldUseTouchEvents"],[411,34,408,32],[411,37,408,35],[411,41,408,39],[411,42,408,40,"shouldUseTouchEvents"],[411,62,408,60],[411,63,408,61],[411,67,408,65],[411,68,408,66,"config"],[411,74,408,72],[411,75,408,73],[412,8,409,6,"props"],[412,13,409,11],[412,14,409,12,"simultaneousHandlers"],[412,34,409,32],[412,37,409,35,"asArray"],[412,44,409,42],[412,45,409,43,"config"],[412,51,409,49],[412,52,409,50,"simultaneousHandlers"],[412,72,409,70],[412,73,409,71],[412,74,409,72,"map"],[412,77,409,75],[412,78,409,76,"handler"],[412,85,409,83],[412,89,409,87],[413,10,410,8],[413,14,410,12],[413,21,410,19,"handler"],[413,28,410,26],[413,33,410,31],[413,41,410,39],[413,43,410,41],[414,12,411,10],[414,19,411,17,"NodeManager"],[414,30,411,28],[414,31,411,29,"getHandler"],[414,41,411,39],[414,42,411,40,"handler"],[414,49,411,47],[414,50,411,48],[415,10,412,8],[415,11,412,9],[415,17,412,15],[416,12,413,10],[416,19,413,17,"NodeManager"],[416,30,413,28],[416,31,413,29,"getHandler"],[416,41,413,39],[416,42,413,40,"handler"],[416,49,413,47],[416,50,413,48,"handlerTag"],[416,60,413,58],[416,61,413,59],[417,10,414,8],[418,8,415,6],[418,9,415,7],[418,10,415,8],[418,11,415,9,"filter"],[418,17,415,15],[418,18,415,16,"v"],[418,19,415,17],[418,23,415,21,"v"],[418,24,415,22],[418,25,415,23],[419,8,416,6],[419,12,416,10,"shouldUseTouchEvents"],[419,32,416,30],[419,37,416,35],[419,41,416,39],[419,42,416,40,"shouldUseTouchEvents"],[419,62,416,60],[419,63,416,61,"props"],[419,68,416,66],[419,69,416,67],[419,71,416,69],[420,10,417,8],[420,14,417,8,"ghQueueMicrotask"],[420,48,417,24],[420,50,417,25],[420,56,417,31],[421,12,418,10],[422,12,419,10],[423,12,420,10],[423,16,420,14],[423,17,420,15,"destroy"],[423,24,420,22],[423,25,420,23],[423,26,420,24],[424,12,421,10],[424,16,421,14],[424,17,421,15,"setView"],[424,24,421,22],[424,25,421,23],[424,29,421,27],[424,30,421,28,"ref"],[424,33,421,31],[424,35,421,33],[424,39,421,37],[424,40,421,38,"propsRef"],[424,48,421,46],[424,49,421,47],[425,10,422,8],[425,11,422,9],[425,12,422,10],[426,8,423,6],[427,6,424,4],[427,7,424,5],[427,13,424,11],[428,8,425,6,"props"],[428,13,425,11],[428,14,425,12,"simultaneousHandlers"],[428,34,425,32],[428,37,425,35],[428,41,425,39],[429,6,426,4],[430,6,427,4],[430,12,427,10,"configProps"],[430,23,427,21],[430,26,427,24],[430,27,427,25],[430,40,427,38],[430,42,427,40],[430,55,427,53],[430,57,427,55],[430,66,427,64],[430,68,427,66],[430,77,427,75],[430,79,427,77],[430,90,427,88],[430,92,427,90],[430,107,427,105],[430,109,427,107],[430,120,427,118],[430,122,427,120],[430,135,427,133],[430,137,427,135],[430,155,427,153],[430,157,427,155],[430,175,427,173],[430,177,427,175],[430,193,427,191],[430,195,427,193],[430,211,427,209],[430,213,427,211],[430,233,427,231],[430,235,427,233],[430,253,427,251],[430,255,427,253],[430,275,427,273],[430,277,427,275],[430,295,427,293],[430,296,427,294],[431,6,428,4,"configProps"],[431,17,428,15],[431,18,428,16,"forEach"],[431,25,428,23],[431,26,428,24,"prop"],[431,30,428,28],[431,34,428,32],[432,8,429,6],[432,12,429,10],[432,19,429,17,"props"],[432,24,429,22],[432,25,429,23,"prop"],[432,29,429,27],[432,30,429,28],[432,35,429,33],[432,46,429,44],[432,48,429,46],[433,10,430,8,"props"],[433,15,430,13],[433,16,430,14,"prop"],[433,20,430,18],[433,21,430,19],[433,24,430,22,"Number"],[433,30,430,28],[433,31,430,29,"NaN"],[433,34,430,32],[434,8,431,6],[435,6,432,4],[435,7,432,5],[435,8,432,6],[436,6,433,4],[436,13,433,11,"props"],[436,18,433,16],[436,19,433,17],[436,20,433,18],[437,4,434,2],[438,2,435,0],[440,2,437,0],[441,2,438,0],[442,2,439,0],[442,11,439,9,"invokeNullableMethod"],[442,31,439,29,"invokeNullableMethod"],[442,32,439,30,"method"],[442,38,439,36],[442,40,439,38,"event"],[442,45,439,43],[442,47,439,45],[443,4,440,2],[443,8,440,6,"method"],[443,14,440,12],[443,16,440,14],[444,6,441,4],[444,10,441,8],[444,17,441,15,"method"],[444,23,441,21],[444,28,441,26],[444,38,441,36],[444,40,441,38],[445,8,442,6,"method"],[445,14,442,12],[445,15,442,13,"event"],[445,20,442,18],[445,21,442,19],[446,6,443,4],[446,7,443,5],[446,13,443,11],[447,8,444,6],[448,8,445,6],[448,12,445,10],[448,26,445,24],[448,30,445,28,"method"],[448,36,445,34],[448,40,445,38],[448,47,445,45,"method"],[448,53,445,51],[448,54,445,52,"__getHandler"],[448,66,445,64],[448,71,445,69],[448,81,445,79],[448,83,445,81],[449,10,446,8],[449,16,446,14,"handler"],[449,23,446,21],[449,26,446,24,"method"],[449,32,446,30],[449,33,446,31,"__getHandler"],[449,45,446,43],[449,46,446,44],[449,47,446,45],[450,10,447,8,"invokeNullableMethod"],[450,30,447,28],[450,31,447,29,"handler"],[450,38,447,36],[450,40,447,38,"event"],[450,45,447,43],[450,46,447,44],[451,8,448,6],[451,9,448,7],[451,15,448,13],[452,10,449,8],[452,14,449,12],[452,28,449,26],[452,32,449,30,"method"],[452,38,449,36],[452,40,449,38],[453,12,450,10],[453,18,450,16],[454,14,451,12,"argMapping"],[455,12,452,10],[455,13,452,11],[455,16,452,14,"method"],[455,22,452,20],[455,23,452,21,"__nodeConfig"],[455,35,452,33],[456,12,453,10],[456,16,453,14,"Array"],[456,21,453,19],[456,22,453,20,"isArray"],[456,29,453,27],[456,30,453,28,"argMapping"],[456,40,453,38],[456,41,453,39],[456,43,453,41],[457,14,454,12],[457,19,454,17],[457,25,454,23],[457,26,454,24,"index"],[457,31,454,29],[457,33,454,31],[457,34,454,32,"key"],[457,37,454,35],[457,39,454,37,"value"],[457,44,454,42],[457,45,454,43],[457,46,454,44],[457,50,454,48,"argMapping"],[457,60,454,58],[457,61,454,59,"entries"],[457,68,454,66],[457,69,454,67],[457,70,454,68],[457,72,454,70],[458,16,455,14],[458,20,455,18,"key"],[458,23,455,21],[458,27,455,25,"event"],[458,32,455,30],[458,33,455,31,"nativeEvent"],[458,44,455,42],[458,46,455,44],[459,18,456,16],[460,18,457,16],[460,24,457,22,"nativeValue"],[460,35,457,33],[460,38,457,36,"event"],[460,43,457,41],[460,44,457,42,"nativeEvent"],[460,55,457,53],[460,56,457,54,"key"],[460,59,457,57],[460,60,457,58],[461,18,458,16],[461,22,458,20,"value"],[461,27,458,25],[461,31,458,29,"value"],[461,36,458,34],[461,37,458,35,"setValue"],[461,45,458,43],[461,47,458,45],[462,20,459,18],[463,20,460,18,"value"],[463,25,460,23],[463,26,460,24,"setValue"],[463,34,460,32],[463,35,460,33,"nativeValue"],[463,46,460,44],[463,47,460,45],[464,18,461,16],[464,19,461,17],[464,25,461,23],[465,20,462,18],[466,20,463,18,"method"],[466,26,463,24],[466,27,463,25,"__nodeConfig"],[466,39,463,37],[466,40,463,38,"argMapping"],[466,50,463,48],[466,51,463,49,"index"],[466,56,463,54],[466,57,463,55],[466,60,463,58],[466,61,463,59,"key"],[466,64,463,62],[466,66,463,64,"nativeValue"],[466,77,463,75],[466,78,463,76],[467,18,464,16],[468,16,465,14],[469,14,466,12],[470,12,467,10],[471,10,468,8],[472,8,469,6],[473,6,470,4],[474,4,471,2],[475,2,472,0],[476,2,473,0],[476,11,473,9,"asArray"],[476,18,473,16,"asArray"],[476,19,473,17,"value"],[476,24,473,22],[476,26,473,24],[477,4,474,2],[478,4,475,2],[478,11,475,9,"value"],[478,16,475,14],[478,20,475,18],[478,24,475,22],[478,27,475,25],[478,29,475,27],[478,32,475,30,"Array"],[478,37,475,35],[478,38,475,36,"isArray"],[478,45,475,43],[478,46,475,44,"value"],[478,51,475,49],[478,52,475,50],[478,55,475,53,"value"],[478,60,475,58],[478,63,475,61],[478,64,475,62,"value"],[478,69,475,67],[478,70,475,68],[479,2,476,0],[480,2,476,1],[480,6,476,1,"_default"],[480,14,476,1],[480,17,476,1,"exports"],[480,24,476,1],[480,25,476,1,"default"],[480,32,476,1],[480,35,477,15,"GestureHandler"],[480,49,477,29],[481,0,477,29],[481,3]],"functionMap":{"names":["<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACc;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;yBGE;SHK;wBIM;KJI;G1CE;CDC;AgDI;ChDiC;AiDC;CjDG"}},"type":"js/module"}]}