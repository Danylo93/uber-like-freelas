{"dependencies":[{"name":"./gesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":59,"index":59}}],"key":"o5NgfUJQHKr9PBMfvlu69EXuwZE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NativeGesture = void 0;\n  var _gesture = require(_dependencyMap[0], \"./gesture\");\n  class NativeGesture extends _gesture.BaseGesture {\n    config = {};\n    constructor() {\n      super();\n      this.handlerName = 'NativeViewGestureHandler';\n    }\n\n    /**\n     * When true, underlying handler will activate unconditionally when in `BEGAN` or `UNDETERMINED` state.\n     * @param value\n     */\n    shouldActivateOnStart(value) {\n      this.config.shouldActivateOnStart = value;\n      return this;\n    }\n\n    /**\n     * When true, cancels all other gesture handlers when this `NativeViewGestureHandler` receives an `ACTIVE` state event.\n     * @param value\n     */\n    disallowInterruption(value) {\n      this.config.disallowInterruption = value;\n      return this;\n    }\n  }\n  exports.NativeGesture = NativeGesture;\n});","lineCount":33,"map":[[6,2,1,0],[6,6,1,0,"_gesture"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,5,7],[7,8,5,13,"NativeGesture"],[7,21,5,26],[7,30,5,35,"BaseGesture"],[7,50,5,46],[7,51,5,80],[8,4,6,9,"config"],[8,10,6,15],[8,13,6,63],[8,14,6,64],[8,15,6,65],[9,4,8,2,"constructor"],[9,15,8,13,"constructor"],[9,16,8,13],[9,18,8,16],[10,6,9,4],[10,11,9,9],[10,12,9,10],[10,13,9,11],[11,6,11,4],[11,10,11,8],[11,11,11,9,"handlerName"],[11,22,11,20],[11,25,11,23],[11,51,11,49],[12,4,12,2],[14,4,14,2],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,4,18,2,"shouldActivateOnStart"],[18,25,18,23,"shouldActivateOnStart"],[18,26,18,24,"value"],[18,31,18,38],[18,33,18,40],[19,6,19,4],[19,10,19,8],[19,11,19,9,"config"],[19,17,19,15],[19,18,19,16,"shouldActivateOnStart"],[19,39,19,37],[19,42,19,40,"value"],[19,47,19,45],[20,6,20,4],[20,13,20,11],[20,17,20,15],[21,4,21,2],[23,4,23,2],[24,0,24,0],[25,0,25,0],[26,0,26,0],[27,4,27,2,"disallowInterruption"],[27,24,27,22,"disallowInterruption"],[27,25,27,23,"value"],[27,30,27,37],[27,32,27,39],[28,6,28,4],[28,10,28,8],[28,11,28,9,"config"],[28,17,28,15],[28,18,28,16,"disallowInterruption"],[28,38,28,36],[28,41,28,39,"value"],[28,46,28,44],[29,6,29,4],[29,13,29,11],[29,17,29,15],[30,4,30,2],[31,2,31,0],[32,2,31,1,"exports"],[32,9,31,1],[32,10,31,1,"NativeGesture"],[32,23,31,1],[32,26,31,1,"NativeGesture"],[32,39,31,1],[33,0,31,1],[33,3]],"functionMap":{"names":["<global>","NativeGesture","NativeGesture#constructor","NativeGesture#shouldActivateOnStart","NativeGesture#disallowInterruption"],"mappings":"AAA;OCI;ECG;GDI;EEM;GFG;EGM;GHG;CDC"}},"type":"js/module"}]}