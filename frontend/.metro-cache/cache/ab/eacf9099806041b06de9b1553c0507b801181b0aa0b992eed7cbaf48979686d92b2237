{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":112},"end":{"line":5,"column":36,"index":148}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":33,"index":229}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":230},"end":{"line":8,"column":39,"index":269}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"]}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":270},"end":{"line":9,"column":45,"index":315}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"]}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":316},"end":{"line":10,"column":55,"index":371}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _hammerjs = _interopRequireDefault(require(_dependencyMap[1], \"@egjs/hammerjs\"));\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/findNodeHandle\"));\n  var _State = require(_dependencyMap[3], \"../State\");\n  var _constants = require(_dependencyMap[4], \"./constants\");\n  var NodeManager = _interopRequireWildcard(require(_dependencyMap[5], \"./NodeManager\"));\n  var _ghQueueMicrotask = require(_dependencyMap[6], \"../ghQueueMicrotask\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig({\n        enabled,\n        ...props\n      });\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        },\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({\n        ...event,\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, _findNodeHandle.default)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n        inputClass: _hammerjs.default.TouchInput\n      }) : new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n          ...inputData,\n          deltaRotation\n        });\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set({\n        ...params,\n        enable\n      });\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = {\n        ...config\n      };\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = exports.default = GestureHandler;\n});","lineCount":483,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0],[6,6,4,0,"_interopRequireDefault"],[6,28,4,0],[6,31,4,0,"require"],[6,38,4,0],[6,39,4,0,"_dependencyMap"],[6,53,4,0],[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"value"],[8,9,4,0],[9,2,4,0],[10,2,4,0,"exports"],[10,9,4,0],[10,10,4,0,"default"],[10,17,4,0],[11,2,5,0],[11,6,5,0,"_hammerjs"],[11,15,5,0],[11,18,5,0,"_interopRequireDefault"],[11,40,5,0],[11,41,5,0,"require"],[11,48,5,0],[11,49,5,0,"_dependencyMap"],[11,63,5,0],[12,2,5,36],[12,6,5,36,"_findNodeHandle"],[12,21,5,36],[12,24,5,36,"_interopRequireDefault"],[12,46,5,36],[12,47,5,36,"require"],[12,54,5,36],[12,55,5,36,"_dependencyMap"],[12,69,5,36],[13,2,7,0],[13,6,7,0,"_State"],[13,12,7,0],[13,15,7,0,"require"],[13,22,7,0],[13,23,7,0,"_dependencyMap"],[13,37,7,0],[14,2,8,0],[14,6,8,0,"_constants"],[14,16,8,0],[14,19,8,0,"require"],[14,26,8,0],[14,27,8,0,"_dependencyMap"],[14,41,8,0],[15,2,9,0],[15,6,9,0,"NodeManager"],[15,17,9,0],[15,20,9,0,"_interopRequireWildcard"],[15,43,9,0],[15,44,9,0,"require"],[15,51,9,0],[15,52,9,0,"_dependencyMap"],[15,66,9,0],[16,2,10,0],[16,6,10,0,"_ghQueueMicrotask"],[16,23,10,0],[16,26,10,0,"require"],[16,33,10,0],[16,34,10,0,"_dependencyMap"],[16,48,10,0],[17,2,10,55],[17,11,10,55,"_interopRequireWildcard"],[17,35,10,55,"e"],[17,36,10,55],[17,38,10,55,"t"],[17,39,10,55],[17,68,10,55,"WeakMap"],[17,75,10,55],[17,81,10,55,"r"],[17,82,10,55],[17,89,10,55,"WeakMap"],[17,96,10,55],[17,100,10,55,"n"],[17,101,10,55],[17,108,10,55,"WeakMap"],[17,115,10,55],[17,127,10,55,"_interopRequireWildcard"],[17,150,10,55],[17,162,10,55,"_interopRequireWildcard"],[17,163,10,55,"e"],[17,164,10,55],[17,166,10,55,"t"],[17,167,10,55],[17,176,10,55,"t"],[17,177,10,55],[17,181,10,55,"e"],[17,182,10,55],[17,186,10,55,"e"],[17,187,10,55],[17,188,10,55,"__esModule"],[17,198,10,55],[17,207,10,55,"e"],[17,208,10,55],[17,214,10,55,"o"],[17,215,10,55],[17,217,10,55,"i"],[17,218,10,55],[17,220,10,55,"f"],[17,221,10,55],[17,226,10,55,"__proto__"],[17,235,10,55],[17,243,10,55,"default"],[17,250,10,55],[17,252,10,55,"e"],[17,253,10,55],[17,270,10,55,"e"],[17,271,10,55],[17,294,10,55,"e"],[17,295,10,55],[17,320,10,55,"e"],[17,321,10,55],[17,330,10,55,"f"],[17,331,10,55],[17,337,10,55,"o"],[17,338,10,55],[17,341,10,55,"t"],[17,342,10,55],[17,345,10,55,"n"],[17,346,10,55],[17,349,10,55,"r"],[17,350,10,55],[17,358,10,55,"o"],[17,359,10,55],[17,360,10,55,"has"],[17,363,10,55],[17,364,10,55,"e"],[17,365,10,55],[17,375,10,55,"o"],[17,376,10,55],[17,377,10,55,"get"],[17,380,10,55],[17,381,10,55,"e"],[17,382,10,55],[17,385,10,55,"o"],[17,386,10,55],[17,387,10,55,"set"],[17,390,10,55],[17,391,10,55,"e"],[17,392,10,55],[17,394,10,55,"f"],[17,395,10,55],[17,411,10,55,"t"],[17,412,10,55],[17,416,10,55,"e"],[17,417,10,55],[17,433,10,55,"t"],[17,434,10,55],[17,441,10,55,"hasOwnProperty"],[17,455,10,55],[17,456,10,55,"call"],[17,460,10,55],[17,461,10,55,"e"],[17,462,10,55],[17,464,10,55,"t"],[17,465,10,55],[17,472,10,55,"i"],[17,473,10,55],[17,477,10,55,"o"],[17,478,10,55],[17,481,10,55,"Object"],[17,487,10,55],[17,488,10,55,"defineProperty"],[17,502,10,55],[17,507,10,55,"Object"],[17,513,10,55],[17,514,10,55,"getOwnPropertyDescriptor"],[17,538,10,55],[17,539,10,55,"e"],[17,540,10,55],[17,542,10,55,"t"],[17,543,10,55],[17,550,10,55,"i"],[17,551,10,55],[17,552,10,55,"get"],[17,555,10,55],[17,559,10,55,"i"],[17,560,10,55],[17,561,10,55,"set"],[17,564,10,55],[17,568,10,55,"o"],[17,569,10,55],[17,570,10,55,"f"],[17,571,10,55],[17,573,10,55,"t"],[17,574,10,55],[17,576,10,55,"i"],[17,577,10,55],[17,581,10,55,"f"],[17,582,10,55],[17,583,10,55,"t"],[17,584,10,55],[17,588,10,55,"e"],[17,589,10,55],[17,590,10,55,"t"],[17,591,10,55],[17,602,10,55,"f"],[17,603,10,55],[17,608,10,55,"e"],[17,609,10,55],[17,611,10,55,"t"],[17,612,10,55],[18,2,12,0],[19,2,14,0],[19,6,14,4,"gestureInstances"],[19,22,14,20],[19,25,14,23],[19,26,14,24],[20,2,15,0],[20,8,15,6,"GestureHandler"],[20,22,15,20],[20,23,15,21],[21,4,16,2,"isGestureRunning"],[21,20,16,18],[21,23,16,21],[21,28,16,26],[22,4,17,2,"view"],[22,8,17,6],[22,11,17,9],[22,15,17,13],[23,4,18,2,"hasGestureFailed"],[23,20,18,18],[23,23,18,21],[23,28,18,26],[24,4,19,2,"hammer"],[24,10,19,8],[24,13,19,11],[24,17,19,15],[25,4,20,2,"initialRotation"],[25,19,20,17],[25,22,20,20],[25,26,20,24],[26,4,21,2,"config"],[26,10,21,8],[26,13,21,11],[26,14,21,12],[26,15,21,13],[27,4,22,2,"previousState"],[27,17,22,15],[27,20,22,18,"State"],[27,32,22,23],[27,33,22,24,"UNDETERMINED"],[27,45,22,36],[28,4,23,2,"pendingGestures"],[28,19,23,17],[28,22,23,20],[28,23,23,21],[28,24,23,22],[29,4,24,2,"oldState"],[29,12,24,10],[29,15,24,13,"State"],[29,27,24,18],[29,28,24,19,"UNDETERMINED"],[29,40,24,31],[30,4,25,2,"lastSentState"],[30,17,25,15],[30,20,25,18],[30,24,25,22],[31,4,26,2],[31,8,26,6,"id"],[31,10,26,8,"id"],[31,11,26,8],[31,13,26,11],[32,6,27,4],[32,13,27,11],[32,16,27,14],[32,20,27,18],[32,21,27,19,"name"],[32,25,27,23],[32,28,27,26],[32,32,27,30],[32,33,27,31,"gestureInstance"],[32,48,27,46],[32,50,27,48],[33,4,28,2],[35,4,30,2],[36,4,31,2],[37,4,32,2],[37,8,32,6,"isNative"],[37,16,32,14,"isNative"],[37,17,32,14],[37,19,32,17],[38,6,33,4],[38,13,33,11],[38,18,33,16],[39,4,34,2],[40,4,35,2],[40,8,35,6,"isDiscrete"],[40,18,35,16,"isDiscrete"],[40,19,35,16],[40,21,35,19],[41,6,36,4],[41,13,36,11],[41,18,36,16],[42,4,37,2],[43,4,38,2],[43,8,38,6,"shouldEnableGestureOnSetup"],[43,34,38,32,"shouldEnableGestureOnSetup"],[43,35,38,32],[43,37,38,35],[44,6,39,4],[44,12,39,10],[44,16,39,14,"Error"],[44,21,39,19],[44,22,39,20],[44,79,39,77],[44,80,39,78],[45,4,40,2],[46,4,41,2,"constructor"],[46,15,41,13,"constructor"],[46,16,41,13],[46,18,41,16],[47,6,42,4],[47,10,42,8],[47,11,42,9,"gestureInstance"],[47,26,42,24],[47,29,42,27,"gestureInstances"],[47,45,42,43],[47,47,42,45],[48,6,43,4],[48,10,43,8],[48,11,43,9,"hasCustomActivationCriteria"],[48,38,43,36],[48,41,43,39],[48,46,43,44],[49,4,44,2],[50,4,45,2,"getConfig"],[50,13,45,11,"getConfig"],[50,14,45,11],[50,16,45,14],[51,6,46,4],[51,13,46,11],[51,17,46,15],[51,18,46,16,"config"],[51,24,46,22],[52,4,47,2],[53,4,48,2,"onWaitingEnded"],[53,18,48,16,"onWaitingEnded"],[53,19,48,17,"_gesture"],[53,27,48,25],[53,29,48,27],[53,30,48,28],[54,4,49,2,"removePendingGesture"],[54,24,49,22,"removePendingGesture"],[54,25,49,23,"id"],[54,27,49,25],[54,29,49,27],[55,6,50,4],[55,13,50,11],[55,17,50,15],[55,18,50,16,"pendingGestures"],[55,33,50,31],[55,34,50,32,"id"],[55,36,50,34],[55,37,50,35],[56,4,51,2],[57,4,52,2,"addPendingGesture"],[57,21,52,19,"addPendingGesture"],[57,22,52,20,"gesture"],[57,29,52,27],[57,31,52,29],[58,6,53,4],[58,10,53,8],[58,11,53,9,"pendingGestures"],[58,26,53,24],[58,27,53,25,"gesture"],[58,34,53,32],[58,35,53,33,"id"],[58,37,53,35],[58,38,53,36],[58,41,53,39,"gesture"],[58,48,53,46],[59,4,54,2],[60,4,55,2,"isGestureEnabledForEvent"],[60,28,55,26,"isGestureEnabledForEvent"],[60,29,55,27,"_config"],[60,36,55,34],[60,38,55,36,"_recognizer"],[60,49,55,47],[60,51,55,49,"_event"],[60,57,55,55],[60,59,55,57],[61,6,56,4],[61,13,56,11],[62,8,57,6,"success"],[62,15,57,13],[62,17,57,15],[63,6,58,4],[63,7,58,5],[64,4,59,2],[65,4,60,2],[65,8,60,6,"NativeGestureClass"],[65,26,60,24,"NativeGestureClass"],[65,27,60,24],[65,29,60,27],[66,6,61,4],[66,12,61,10],[66,16,61,14,"Error"],[66,21,61,19],[66,22,61,20],[66,71,61,69],[66,72,61,70],[67,4,62,2],[68,4,63,2,"updateHasCustomActivationCriteria"],[68,37,63,35,"updateHasCustomActivationCriteria"],[68,38,63,36,"_config"],[68,45,63,43],[68,47,63,45],[69,6,64,4],[69,13,64,11],[69,17,64,15],[70,4,65,2],[71,4,66,2,"clearSelfAsPending"],[71,22,66,20],[71,25,66,23,"clearSelfAsPending"],[71,26,66,23],[71,31,66,29],[72,6,67,4],[72,10,67,8,"Array"],[72,15,67,13],[72,16,67,14,"isArray"],[72,23,67,21],[72,24,67,22],[72,28,67,26],[72,29,67,27,"config"],[72,35,67,33],[72,36,67,34,"waitFor"],[72,43,67,41],[72,44,67,42],[72,46,67,44],[73,8,68,6],[73,13,68,11],[73,19,68,17,"gesture"],[73,26,68,24],[73,30,68,28],[73,34,68,32],[73,35,68,33,"config"],[73,41,68,39],[73,42,68,40,"waitFor"],[73,49,68,47],[73,51,68,49],[74,10,69,8,"gesture"],[74,17,69,15],[74,18,69,16,"removePendingGesture"],[74,38,69,36],[74,39,69,37],[74,43,69,41],[74,44,69,42,"id"],[74,46,69,44],[74,47,69,45],[75,8,70,6],[76,6,71,4],[77,4,72,2],[77,5,72,3],[78,4,73,2,"updateGestureConfig"],[78,23,73,21,"updateGestureConfig"],[78,24,73,22],[79,6,74,4,"enabled"],[79,13,74,11],[79,16,74,14],[79,20,74,18],[80,6,75,4],[80,9,75,7,"props"],[81,4,76,2],[81,5,76,3],[81,7,76,5],[82,6,77,4],[82,10,77,8],[82,11,77,9,"clearSelfAsPending"],[82,29,77,27],[82,30,77,28],[82,31,77,29],[83,6,78,4],[83,10,78,8],[83,11,78,9,"config"],[83,17,78,15],[83,20,78,18],[83,24,78,22],[83,25,78,23,"ensureConfig"],[83,37,78,35],[83,38,78,36],[84,8,79,6,"enabled"],[84,15,79,13],[85,8,80,6],[85,11,80,9,"props"],[86,6,81,4],[86,7,81,5],[86,8,81,6],[87,6,82,4],[87,10,82,8],[87,11,82,9,"hasCustomActivationCriteria"],[87,38,82,36],[87,41,82,39],[87,45,82,43],[87,46,82,44,"updateHasCustomActivationCriteria"],[87,79,82,77],[87,80,82,78],[87,84,82,82],[87,85,82,83,"config"],[87,91,82,89],[87,92,82,90],[88,6,83,4],[88,10,83,8,"Array"],[88,15,83,13],[88,16,83,14,"isArray"],[88,23,83,21],[88,24,83,22],[88,28,83,26],[88,29,83,27,"config"],[88,35,83,33],[88,36,83,34,"waitFor"],[88,43,83,41],[88,44,83,42],[88,46,83,44],[89,8,84,6],[89,13,84,11],[89,19,84,17,"gesture"],[89,26,84,24],[89,30,84,28],[89,34,84,32],[89,35,84,33,"config"],[89,41,84,39],[89,42,84,40,"waitFor"],[89,49,84,47],[89,51,84,49],[90,10,85,8,"gesture"],[90,17,85,15],[90,18,85,16,"addPendingGesture"],[90,35,85,33],[90,36,85,34],[90,40,85,38],[90,41,85,39],[91,8,86,6],[92,6,87,4],[93,6,88,4],[93,10,88,8],[93,14,88,12],[93,15,88,13,"hammer"],[93,21,88,19],[93,23,88,21],[94,8,89,6],[94,12,89,10],[94,13,89,11,"sync"],[94,17,89,15],[94,18,89,16],[94,19,89,17],[95,6,90,4],[96,6,91,4],[96,13,91,11],[96,17,91,15],[96,18,91,16,"config"],[96,24,91,22],[97,4,92,2],[98,4,93,2,"destroy"],[98,11,93,9],[98,14,93,12,"destroy"],[98,15,93,12],[98,20,93,18],[99,6,94,4],[99,10,94,8],[99,11,94,9,"clearSelfAsPending"],[99,29,94,27],[99,30,94,28],[99,31,94,29],[100,6,95,4],[100,10,95,8],[100,14,95,12],[100,15,95,13,"hammer"],[100,21,95,19],[100,23,95,21],[101,8,96,6],[101,12,96,10],[101,13,96,11,"hammer"],[101,19,96,17],[101,20,96,18,"stop"],[101,24,96,22],[101,25,96,23],[101,30,96,28],[101,31,96,29],[102,8,97,6],[102,12,97,10],[102,13,97,11,"hammer"],[102,19,97,17],[102,20,97,18,"destroy"],[102,27,97,25],[102,28,97,26],[102,29,97,27],[103,6,98,4],[104,6,99,4],[104,10,99,8],[104,11,99,9,"hammer"],[104,17,99,15],[104,20,99,18],[104,24,99,22],[105,4,100,2],[105,5,100,3],[106,4,101,2,"isPointInView"],[106,17,101,15],[106,20,101,18,"isPointInView"],[106,21,101,19],[107,6,102,4,"x"],[107,7,102,5],[108,6,103,4,"y"],[109,4,104,2],[109,5,104,3],[109,10,104,8],[110,6,105,4],[111,6,106,4],[111,12,106,10,"rect"],[111,16,106,14],[111,19,106,17],[111,23,106,21],[111,24,106,22,"view"],[111,28,106,26],[111,29,106,27,"getBoundingClientRect"],[111,50,106,48],[111,51,106,49],[111,52,106,50],[112,6,107,4],[112,12,107,10,"pointerInside"],[112,25,107,23],[112,28,107,26,"x"],[112,29,107,27],[112,33,107,31,"rect"],[112,37,107,35],[112,38,107,36,"left"],[112,42,107,40],[112,46,107,44,"x"],[112,47,107,45],[112,51,107,49,"rect"],[112,55,107,53],[112,56,107,54,"right"],[112,61,107,59],[112,65,107,63,"y"],[112,66,107,64],[112,70,107,68,"rect"],[112,74,107,72],[112,75,107,73,"top"],[112,78,107,76],[112,82,107,80,"y"],[112,83,107,81],[112,87,107,85,"rect"],[112,91,107,89],[112,92,107,90,"bottom"],[112,98,107,96],[113,6,108,4],[113,13,108,11,"pointerInside"],[113,26,108,24],[114,4,109,2],[114,5,109,3],[115,4,110,2,"getState"],[115,12,110,10,"getState"],[115,13,110,11,"type"],[115,17,110,15],[115,19,110,17],[116,6,111,4],[117,6,112,4],[117,10,112,8,"type"],[117,14,112,12],[117,18,112,16],[117,19,112,17],[117,21,112,19],[118,8,113,6],[118,15,113,13],[118,16,113,14],[119,6,114,4],[120,6,115,4],[120,13,115,11,"EventMap"],[120,32,115,19],[120,33,115,20,"type"],[120,37,115,24],[120,38,115,25],[121,4,116,2],[122,4,117,2,"transformEventData"],[122,22,117,20,"transformEventData"],[122,23,117,21,"event"],[122,28,117,26],[122,30,117,28],[123,6,118,4],[123,12,118,10],[124,8,119,6,"eventType"],[124,17,119,15],[125,8,120,6,"maxPointers"],[125,19,120,17],[125,21,120,19,"numberOfPointers"],[126,6,121,4],[126,7,121,5],[126,10,121,8,"event"],[126,15,121,13],[127,6,122,4],[128,6,123,4],[128,12,123,10,"changedTouch"],[128,24,123,22],[128,27,123,25,"event"],[128,32,123,30],[128,33,123,31,"changedPointers"],[128,48,123,46],[128,49,123,47],[128,50,123,48],[128,51,123,49],[129,6,124,4],[129,12,124,10,"pointerInside"],[129,25,124,23],[129,28,124,26],[129,32,124,30],[129,33,124,31,"isPointInView"],[129,46,124,44],[129,47,124,45],[130,8,125,6,"x"],[130,9,125,7],[130,11,125,9,"changedTouch"],[130,23,125,21],[130,24,125,22,"clientX"],[130,31,125,29],[131,8,126,6,"y"],[131,9,126,7],[131,11,126,9,"changedTouch"],[131,23,126,21],[131,24,126,22,"clientY"],[132,6,127,4],[132,7,127,5],[132,8,127,6],[134,6,129,4],[135,6,130,4],[135,12,130,10,"state"],[135,17,130,15],[135,20,130,18],[135,24,130,22],[135,25,130,23,"getState"],[135,33,130,31],[135,34,130,32,"eventType"],[135,43,130,41],[135,44,130,42],[136,6,131,4],[136,10,131,8,"state"],[136,15,131,13],[136,20,131,18],[136,24,131,22],[136,25,131,23,"previousState"],[136,38,131,36],[136,40,131,38],[137,8,132,6],[137,12,132,10],[137,13,132,11,"oldState"],[137,21,132,19],[137,24,132,22],[137,28,132,26],[137,29,132,27,"previousState"],[137,42,132,40],[138,8,133,6],[138,12,133,10],[138,13,133,11,"previousState"],[138,26,133,24],[138,29,133,27,"state"],[138,34,133,32],[139,6,134,4],[140,6,135,4],[140,13,135,11],[141,8,136,6,"nativeEvent"],[141,19,136,17],[141,21,136,19],[142,10,137,8,"numberOfPointers"],[142,26,137,24],[143,10,138,8,"state"],[143,15,138,13],[144,10,139,8,"pointerInside"],[144,23,139,21],[145,10,140,8],[145,13,140,11],[145,17,140,15],[145,18,140,16,"transformNativeEvent"],[145,38,140,36],[145,39,140,37,"event"],[145,44,140,42],[145,45,140,43],[146,10,141,8],[147,10,142,8,"handlerTag"],[147,20,142,18],[147,22,142,20],[147,26,142,24],[147,27,142,25,"handlerTag"],[147,37,142,35],[148,10,143,8,"target"],[148,16,143,14],[148,18,143,16],[148,22,143,20],[148,23,143,21,"ref"],[148,26,143,24],[149,10,144,8],[150,10,145,8],[151,10,146,8],[152,10,147,8,"oldState"],[152,18,147,16],[152,20,147,18,"state"],[152,25,147,23],[152,30,147,28],[152,34,147,32],[152,35,147,33,"previousState"],[152,48,147,46],[152,52,147,50,"state"],[152,57,147,55],[152,61,147,59],[152,62,147,60],[152,65,147,63],[152,69,147,67],[152,70,147,68,"oldState"],[152,78,147,76],[152,81,147,79,"undefined"],[153,8,148,6],[153,9,148,7],[154,8,149,6,"timeStamp"],[154,17,149,15],[154,19,149,17,"Date"],[154,23,149,21],[154,24,149,22,"now"],[154,27,149,25],[154,28,149,26],[155,6,150,4],[155,7,150,5],[156,4,151,2],[157,4,152,2,"transformNativeEvent"],[157,24,152,22,"transformNativeEvent"],[157,25,152,23,"_event"],[157,31,152,29],[157,33,152,31],[158,6,153,4],[158,13,153,11],[158,14,153,12],[158,15,153,13],[159,4,154,2],[160,4,155,2,"sendEvent"],[160,13,155,11],[160,16,155,14,"nativeEvent"],[160,27,155,25],[160,31,155,29],[161,6,156,4],[161,12,156,10],[162,8,157,6,"onGestureHandlerEvent"],[162,29,157,27],[163,8,158,6,"onGestureHandlerStateChange"],[164,6,159,4],[164,7,159,5],[164,10,159,8],[164,14,159,12],[164,15,159,13,"propsRef"],[164,23,159,21],[164,24,159,22,"current"],[164,31,159,29],[165,6,160,4],[165,12,160,10,"event"],[165,17,160,15],[165,20,160,18],[165,24,160,22],[165,25,160,23,"transformEventData"],[165,43,160,41],[165,44,160,42,"nativeEvent"],[165,55,160,53],[165,56,160,54],[166,6,161,4,"invokeNullableMethod"],[166,26,161,24],[166,27,161,25,"onGestureHandlerEvent"],[166,48,161,46],[166,50,161,48,"event"],[166,55,161,53],[166,56,161,54],[167,6,162,4],[167,10,162,8],[167,14,162,12],[167,15,162,13,"lastSentState"],[167,28,162,26],[167,33,162,31,"event"],[167,38,162,36],[167,39,162,37,"nativeEvent"],[167,50,162,48],[167,51,162,49,"state"],[167,56,162,54],[167,58,162,56],[168,8,163,6],[168,12,163,10],[168,13,163,11,"lastSentState"],[168,26,163,24],[168,29,163,27,"event"],[168,34,163,32],[168,35,163,33,"nativeEvent"],[168,46,163,44],[168,47,163,45,"state"],[168,52,163,50],[169,8,164,6,"invokeNullableMethod"],[169,28,164,26],[169,29,164,27,"onGestureHandlerStateChange"],[169,56,164,54],[169,58,164,56,"event"],[169,63,164,61],[169,64,164,62],[170,6,165,4],[171,4,166,2],[171,5,166,3],[172,4,167,2,"cancelPendingGestures"],[172,25,167,23,"cancelPendingGestures"],[172,26,167,24,"event"],[172,31,167,29],[172,33,167,31],[173,6,168,4],[173,11,168,9],[173,17,168,15,"gesture"],[173,24,168,22],[173,28,168,26,"Object"],[173,34,168,32],[173,35,168,33,"values"],[173,41,168,39],[173,42,168,40],[173,46,168,44],[173,47,168,45,"pendingGestures"],[173,62,168,60],[173,63,168,61],[173,65,168,63],[174,8,169,6],[174,12,169,10,"gesture"],[174,19,169,17],[174,23,169,21,"gesture"],[174,30,169,28],[174,31,169,29,"isGestureRunning"],[174,47,169,45],[174,49,169,47],[175,10,170,8,"gesture"],[175,17,170,15],[175,18,170,16,"hasGestureFailed"],[175,34,170,32],[175,37,170,35],[175,41,170,39],[176,10,171,8,"gesture"],[176,17,171,15],[176,18,171,16,"cancelEvent"],[176,29,171,27],[176,30,171,28,"event"],[176,35,171,33],[176,36,171,34],[177,8,172,6],[178,6,173,4],[179,4,174,2],[180,4,175,2,"notifyPendingGestures"],[180,25,175,23,"notifyPendingGestures"],[180,26,175,23],[180,28,175,26],[181,6,176,4],[181,11,176,9],[181,17,176,15,"gesture"],[181,24,176,22],[181,28,176,26,"Object"],[181,34,176,32],[181,35,176,33,"values"],[181,41,176,39],[181,42,176,40],[181,46,176,44],[181,47,176,45,"pendingGestures"],[181,62,176,60],[181,63,176,61],[181,65,176,63],[182,8,177,6],[182,12,177,10,"gesture"],[182,19,177,17],[182,21,177,19],[183,10,178,8,"gesture"],[183,17,178,15],[183,18,178,16,"onWaitingEnded"],[183,32,178,30],[183,33,178,31],[183,37,178,35],[183,38,178,36],[184,8,179,6],[185,6,180,4],[186,4,181,2],[188,4,183,2],[189,4,184,2,"onGestureEnded"],[189,18,184,16,"onGestureEnded"],[189,19,184,17,"event"],[189,24,184,22],[189,26,184,24],[190,6,185,4],[190,10,185,8],[190,11,185,9,"isGestureRunning"],[190,27,185,25],[190,30,185,28],[190,35,185,33],[191,6,186,4],[191,10,186,8],[191,11,186,9,"cancelPendingGestures"],[191,32,186,30],[191,33,186,31,"event"],[191,38,186,36],[191,39,186,37],[192,4,187,2],[193,4,188,2,"forceInvalidate"],[193,19,188,17,"forceInvalidate"],[193,20,188,18,"event"],[193,25,188,23],[193,27,188,25],[194,6,189,4],[194,10,189,8],[194,14,189,12],[194,15,189,13,"isGestureRunning"],[194,31,189,29],[194,33,189,31],[195,8,190,6],[195,12,190,10],[195,13,190,11,"hasGestureFailed"],[195,29,190,27],[195,32,190,30],[195,36,190,34],[196,8,191,6],[196,12,191,10],[196,13,191,11,"cancelEvent"],[196,24,191,22],[196,25,191,23,"event"],[196,30,191,28],[196,31,191,29],[197,6,192,4],[198,4,193,2],[199,4,194,2,"cancelEvent"],[199,15,194,13,"cancelEvent"],[199,16,194,14,"event"],[199,21,194,19],[199,23,194,21],[200,6,195,4],[200,10,195,8],[200,11,195,9,"notifyPendingGestures"],[200,32,195,30],[200,33,195,31],[200,34,195,32],[201,6,196,4],[201,10,196,8],[201,11,196,9,"sendEvent"],[201,20,196,18],[201,21,196,19],[202,8,197,6],[202,11,197,9,"event"],[202,16,197,14],[203,8,198,6,"eventType"],[203,17,198,15],[203,19,198,17,"Hammer"],[203,36,198,23],[203,37,198,24,"INPUT_CANCEL"],[203,49,198,36],[204,8,199,6,"isFinal"],[204,15,199,13],[204,17,199,15],[205,6,200,4],[205,7,200,5],[205,8,200,6],[206,6,201,4],[206,10,201,8],[206,11,201,9,"onGestureEnded"],[206,25,201,23],[206,26,201,24,"event"],[206,31,201,29],[206,32,201,30],[207,4,202,2],[208,4,203,2,"onRawEvent"],[208,14,203,12,"onRawEvent"],[208,15,203,13],[209,6,204,4,"isFirst"],[210,4,205,2],[210,5,205,3],[210,7,205,5],[211,6,206,4],[211,10,206,8,"isFirst"],[211,17,206,15],[211,19,206,17],[212,8,207,6],[212,12,207,10],[212,13,207,11,"hasGestureFailed"],[212,29,207,27],[212,32,207,30],[212,37,207,35],[213,6,208,4],[214,4,209,2],[215,4,210,2,"shouldUseTouchEvents"],[215,24,210,22,"shouldUseTouchEvents"],[215,25,210,23,"config"],[215,31,210,29],[215,33,210,31],[216,6,211,4],[216,13,211,11,"config"],[216,19,211,17],[216,20,211,18,"simultaneousHandlers"],[216,40,211,38],[216,42,211,40,"some"],[216,46,211,44],[216,47,211,45,"handler"],[216,54,211,52],[216,58,211,56,"handler"],[216,65,211,63],[216,66,211,64,"isNative"],[216,74,211,72],[216,75,211,73],[216,79,211,77],[216,84,211,82],[217,4,212,2],[218,4,213,2,"setView"],[218,11,213,9,"setView"],[218,12,213,10,"ref"],[218,15,213,13],[218,17,213,15,"propsRef"],[218,25,213,23],[218,27,213,25],[219,6,214,4],[219,10,214,8,"ref"],[219,13,214,11],[219,17,214,15],[219,21,214,19],[219,23,214,21],[220,8,215,6],[220,12,215,10],[220,13,215,11,"destroy"],[220,20,215,18],[220,21,215,19],[220,22,215,20],[221,8,216,6],[221,12,216,10],[221,13,216,11,"view"],[221,17,216,15],[221,20,216,18],[221,24,216,22],[222,8,217,6],[223,6,218,4],[225,6,220,4],[226,6,221,4],[226,12,221,10,"SUPPORTS_TOUCH"],[226,26,221,24],[226,29,221,27],[226,43,221,41],[226,47,221,45,"window"],[226,53,221,51],[227,6,222,4],[227,10,222,8],[227,11,222,9,"propsRef"],[227,19,222,17],[227,22,222,20,"propsRef"],[227,30,222,28],[228,6,223,4],[228,10,223,8],[228,11,223,9,"ref"],[228,14,223,12],[228,17,223,15,"ref"],[228,20,223,18],[230,6,225,4],[231,6,226,4],[231,10,226,8],[231,11,226,9,"view"],[231,15,226,13],[231,18,226,16],[231,22,226,16,"findNodeHandle"],[231,45,226,30],[231,47,226,31,"ref"],[231,50,226,34],[231,51,226,35],[233,6,228,4],[234,6,229,4],[235,6,230,4],[236,6,231,4],[236,10,231,8],[236,11,231,9,"hammer"],[236,17,231,15],[236,20,231,18,"SUPPORTS_TOUCH"],[236,34,231,32],[236,38,231,36],[236,42,231,40],[236,43,231,41,"shouldUseTouchEvents"],[236,63,231,61],[236,64,231,62],[236,68,231,66],[236,69,231,67,"config"],[236,75,231,73],[236,76,231,74],[236,79,231,77],[236,83,231,81,"Hammer"],[236,100,231,87],[236,101,231,88,"Manager"],[236,108,231,95],[236,109,231,96],[236,113,231,100],[236,114,231,101,"view"],[236,118,231,105],[236,120,231,107],[237,8,232,6,"inputClass"],[237,18,232,16],[237,20,232,18,"Hammer"],[237,37,232,24],[237,38,232,25,"TouchInput"],[238,6,233,4],[238,7,233,5],[238,8,233,6],[238,11,233,9],[238,15,233,13,"Hammer"],[238,32,233,19],[238,33,233,20,"Manager"],[238,40,233,27],[238,41,233,28],[238,45,233,32],[238,46,233,33,"view"],[238,50,233,37],[238,51,233,38],[239,6,234,4],[239,10,234,8],[239,11,234,9,"oldState"],[239,19,234,17],[239,22,234,20,"State"],[239,34,234,25],[239,35,234,26,"UNDETERMINED"],[239,47,234,38],[240,6,235,4],[240,10,235,8],[240,11,235,9,"previousState"],[240,24,235,22],[240,27,235,25,"State"],[240,39,235,30],[240,40,235,31,"UNDETERMINED"],[240,52,235,43],[241,6,236,4],[241,10,236,8],[241,11,236,9,"lastSentState"],[241,24,236,22],[241,27,236,25],[241,31,236,29],[242,6,237,4],[242,12,237,10],[243,8,238,6,"NativeGestureClass"],[244,6,239,4],[244,7,239,5],[244,10,239,8],[244,14,239,12],[245,6,240,4],[246,6,241,4],[246,12,241,10,"gesture"],[246,19,241,17],[246,22,241,20],[246,26,241,24,"NativeGestureClass"],[246,44,241,42],[246,45,241,43],[246,49,241,47],[246,50,241,48,"getHammerConfig"],[246,65,241,63],[246,66,241,64],[246,67,241,65],[246,68,241,66],[247,6,242,4],[247,10,242,8],[247,11,242,9,"hammer"],[247,17,242,15],[247,18,242,16,"add"],[247,21,242,19],[247,22,242,20,"gesture"],[247,29,242,27],[247,30,242,28],[248,6,243,4],[248,10,243,8],[248,11,243,9,"hammer"],[248,17,243,15],[248,18,243,16,"on"],[248,20,243,18],[248,21,243,19],[248,35,243,33],[248,37,243,35,"ev"],[248,39,243,37],[248,43,243,41],[249,8,244,6],[249,12,244,10],[249,13,244,11],[249,17,244,15],[249,18,244,16,"config"],[249,24,244,22],[249,25,244,23,"enabled"],[249,32,244,30],[249,34,244,32],[250,10,245,8],[250,14,245,12],[250,15,245,13,"hasGestureFailed"],[250,31,245,29],[250,34,245,32],[250,39,245,37],[251,10,246,8],[251,14,246,12],[251,15,246,13,"isGestureRunning"],[251,31,246,29],[251,34,246,32],[251,39,246,37],[252,10,247,8],[253,8,248,6],[254,8,249,6],[254,12,249,10],[254,13,249,11,"onRawEvent"],[254,23,249,21],[254,24,249,22,"ev"],[254,26,249,24],[254,27,249,25],[256,8,251,6],[257,8,252,6],[258,8,253,6],[258,12,253,10],[258,16,253,14],[258,17,253,15,"initialRotation"],[258,32,253,30],[258,37,253,35],[258,41,253,39],[258,45,253,43,"ev"],[258,47,253,45],[258,48,253,46,"rotation"],[258,56,253,54],[258,61,253,59],[258,62,253,60],[258,64,253,62],[259,10,254,8],[259,14,254,12],[259,15,254,13,"initialRotation"],[259,30,254,28],[259,33,254,31,"ev"],[259,35,254,33],[259,36,254,34,"rotation"],[259,44,254,42],[260,8,255,6],[261,8,256,6],[261,12,256,10,"ev"],[261,14,256,12],[261,15,256,13,"isFinal"],[261,22,256,20],[261,24,256,22],[262,10,257,8],[263,10,258,8,"setTimeout"],[263,20,258,18],[263,21,258,19],[263,27,258,25],[264,12,259,10],[264,16,259,14],[264,17,259,15,"initialRotation"],[264,32,259,30],[264,35,259,33],[264,39,259,37],[265,12,260,10],[265,16,260,14],[265,17,260,15,"hasGestureFailed"],[265,33,260,31],[265,36,260,34],[265,41,260,39],[266,10,261,8],[266,11,261,9],[266,12,261,10],[267,8,262,6],[268,6,263,4],[268,7,263,5],[268,8,263,6],[269,6,264,4],[269,10,264,8],[269,11,264,9,"setupEvents"],[269,22,264,20],[269,23,264,21],[269,24,264,22],[270,6,265,4],[270,10,265,8],[270,11,265,9,"sync"],[270,15,265,13],[270,16,265,14],[270,17,265,15],[271,4,266,2],[272,4,267,2,"setupEvents"],[272,15,267,13,"setupEvents"],[272,16,267,13],[272,18,267,16],[273,6,268,4],[274,6,269,4],[274,10,269,8],[274,11,269,9],[274,15,269,13],[274,16,269,14,"isDiscrete"],[274,26,269,24],[274,28,269,26],[275,8,270,6],[275,12,270,10],[275,13,270,11,"hammer"],[275,19,270,17],[275,20,270,18,"on"],[275,22,270,20],[275,23,270,21],[275,26,270,24],[275,30,270,28],[275,31,270,29,"name"],[275,35,270,33],[275,42,270,40],[275,44,270,42,"event"],[275,49,270,47],[275,53,270,51],[275,57,270,55],[275,58,270,56,"onStart"],[275,65,270,63],[275,66,270,64,"event"],[275,71,270,69],[275,72,270,70],[275,73,270,71],[276,8,271,6],[276,12,271,10],[276,13,271,11,"hammer"],[276,19,271,17],[276,20,271,18,"on"],[276,22,271,20],[276,23,271,21],[276,26,271,24],[276,30,271,28],[276,31,271,29,"name"],[276,35,271,33],[276,42,271,40],[276,46,271,44],[276,47,271,45,"name"],[276,51,271,49],[276,59,271,57],[276,61,271,59,"event"],[276,66,271,64],[276,70,271,68],[277,10,272,8],[277,14,272,12],[277,15,272,13,"onGestureEnded"],[277,29,272,27],[277,30,272,28,"event"],[277,35,272,33],[277,36,272,34],[278,8,273,6],[278,9,273,7],[278,10,273,8],[279,6,274,4],[280,6,275,4],[280,10,275,8],[280,11,275,9,"hammer"],[280,17,275,15],[280,18,275,16,"on"],[280,20,275,18],[280,21,275,19],[280,25,275,23],[280,26,275,24,"name"],[280,30,275,28],[280,32,275,30,"ev"],[280,34,275,32],[280,38,275,36],[280,42,275,40],[280,43,275,41,"onGestureActivated"],[280,61,275,59],[280,62,275,60,"ev"],[280,64,275,62],[280,65,275,63],[280,66,275,64],[280,67,275,65],[280,68,275,66],[281,4,276,2],[282,4,277,2,"onStart"],[282,11,277,9,"onStart"],[282,12,277,10],[283,6,278,4,"deltaX"],[283,12,278,10],[284,6,279,4,"deltaY"],[284,12,279,10],[285,6,280,4,"rotation"],[286,4,281,2],[286,5,281,3],[286,7,281,5],[287,6,282,4],[288,6,283,4],[288,10,283,8],[288,11,283,9,"oldState"],[288,19,283,17],[288,22,283,20,"State"],[288,34,283,25],[288,35,283,26,"UNDETERMINED"],[288,47,283,38],[289,6,284,4],[289,10,284,8],[289,11,284,9,"previousState"],[289,24,284,22],[289,27,284,25,"State"],[289,39,284,30],[289,40,284,31,"UNDETERMINED"],[289,52,284,43],[290,6,285,4],[290,10,285,8],[290,11,285,9,"lastSentState"],[290,24,285,22],[290,27,285,25],[290,31,285,29],[291,6,286,4],[291,10,286,8],[291,11,286,9,"isGestureRunning"],[291,27,286,25],[291,30,286,28],[291,34,286,32],[292,6,287,4],[292,10,287,8],[292,11,287,9,"__initialX"],[292,21,287,19],[292,24,287,22,"deltaX"],[292,30,287,28],[293,6,288,4],[293,10,288,8],[293,11,288,9,"__initialY"],[293,21,288,19],[293,24,288,22,"deltaY"],[293,30,288,28],[294,6,289,4],[294,10,289,8],[294,11,289,9,"initialRotation"],[294,26,289,24],[294,29,289,27,"rotation"],[294,37,289,35],[295,4,290,2],[296,4,291,2,"onGestureActivated"],[296,22,291,20,"onGestureActivated"],[296,23,291,21,"ev"],[296,25,291,23],[296,27,291,25],[297,6,292,4],[297,10,292,8],[297,11,292,9,"sendEvent"],[297,20,292,18],[297,21,292,19,"ev"],[297,23,292,21],[297,24,292,22],[298,4,293,2],[299,4,294,2,"onSuccess"],[299,13,294,11,"onSuccess"],[299,14,294,11],[299,16,294,14],[299,17,294,15],[300,4,295,2,"_getPendingGestures"],[300,23,295,21,"_getPendingGestures"],[300,24,295,21],[300,26,295,24],[301,6,296,4],[301,10,296,8,"Array"],[301,15,296,13],[301,16,296,14,"isArray"],[301,23,296,21],[301,24,296,22],[301,28,296,26],[301,29,296,27,"config"],[301,35,296,33],[301,36,296,34,"waitFor"],[301,43,296,41],[301,44,296,42],[301,48,296,46],[301,52,296,50],[301,53,296,51,"config"],[301,59,296,57],[301,60,296,58,"waitFor"],[301,67,296,65],[301,68,296,66,"length"],[301,74,296,72],[301,76,296,74],[302,8,297,6],[303,8,298,6],[304,8,299,6],[304,14,299,12,"stillWaiting"],[304,26,299,24],[304,29,299,27],[304,33,299,31],[304,34,299,32,"config"],[304,40,299,38],[304,41,299,39,"waitFor"],[304,48,299,46],[304,49,299,47,"filter"],[304,55,299,53],[304,56,299,54],[304,57,299,55],[305,10,300,8,"hasGestureFailed"],[306,8,301,6],[306,9,301,7],[306,14,301,12,"hasGestureFailed"],[306,30,301,28],[306,35,301,33],[306,40,301,38],[306,41,301,39],[307,8,302,6],[307,15,302,13,"stillWaiting"],[307,27,302,25],[308,6,303,4],[309,6,304,4],[309,13,304,11],[309,15,304,13],[310,4,305,2],[311,4,306,2,"getHammerConfig"],[311,19,306,17,"getHammerConfig"],[311,20,306,17],[311,22,306,20],[312,6,307,4],[312,12,307,10,"pointers"],[312,20,307,18],[312,23,307,21],[312,27,307,25],[312,28,307,26,"config"],[312,34,307,32],[312,35,307,33,"minPointers"],[312,46,307,44],[312,51,307,49],[312,55,307,53],[312,56,307,54,"config"],[312,62,307,60],[312,63,307,61,"maxPointers"],[312,74,307,72],[312,77,307,75],[312,81,307,79],[312,82,307,80,"config"],[312,88,307,86],[312,89,307,87,"minPointers"],[312,100,307,98],[312,103,307,101],[312,104,307,102],[313,6,308,4],[313,13,308,11],[314,8,309,6,"pointers"],[315,6,310,4],[315,7,310,5],[316,4,311,2],[317,4,312,2,"sync"],[317,8,312,6],[317,11,312,9,"sync"],[317,12,312,9],[317,17,312,15],[318,6,313,4],[318,12,313,10,"gesture"],[318,19,313,17],[318,22,313,20],[318,26,313,24],[318,27,313,25,"hammer"],[318,33,313,31],[318,34,313,32,"get"],[318,37,313,35],[318,38,313,36],[318,42,313,40],[318,43,313,41,"name"],[318,47,313,45],[318,48,313,46],[319,6,314,4],[319,10,314,8],[319,11,314,9,"gesture"],[319,18,314,16],[319,20,314,18],[320,6,315,4],[320,12,315,10,"enable"],[320,18,315,16],[320,21,315,19,"enable"],[320,22,315,20,"recognizer"],[320,32,315,30],[320,34,315,32,"inputData"],[320,43,315,41],[320,48,315,46],[321,8,316,6],[321,12,316,10],[321,13,316,11],[321,17,316,15],[321,18,316,16,"config"],[321,24,316,22],[321,25,316,23,"enabled"],[321,32,316,30],[321,34,316,32],[322,10,317,8],[322,14,317,12],[322,15,317,13,"isGestureRunning"],[322,31,317,29],[322,34,317,32],[322,39,317,37],[323,10,318,8],[323,14,318,12],[323,15,318,13,"hasGestureFailed"],[323,31,318,29],[323,34,318,32],[323,39,318,37],[324,10,319,8],[324,17,319,15],[324,22,319,20],[325,8,320,6],[327,8,322,6],[328,8,323,6],[328,12,323,10],[328,13,323,11,"inputData"],[328,22,323,20],[328,26,323,24],[328,27,323,25,"recognizer"],[328,37,323,35],[328,38,323,36,"options"],[328,45,323,43],[328,49,323,47],[328,56,323,54,"inputData"],[328,65,323,63],[328,66,323,64,"maxPointers"],[328,77,323,75],[328,82,323,80],[328,93,323,91],[328,95,323,93],[329,10,324,8],[329,17,324,15],[329,21,324,19],[329,22,324,20,"shouldEnableGestureOnSetup"],[329,48,324,46],[330,8,325,6],[331,8,326,6],[331,12,326,10],[331,16,326,14],[331,17,326,15,"hasGestureFailed"],[331,33,326,31],[331,35,326,33],[332,10,327,8],[332,17,327,15],[332,22,327,20],[333,8,328,6],[334,8,329,6],[334,12,329,10],[334,13,329,11],[334,17,329,15],[334,18,329,16,"isDiscrete"],[334,28,329,26],[334,30,329,28],[335,10,330,8],[335,14,330,12],[335,18,330,16],[335,19,330,17,"isGestureRunning"],[335,35,330,33],[335,37,330,35],[336,12,331,10],[336,19,331,17],[336,23,331,21],[337,10,332,8],[338,10,333,8],[339,10,334,8],[340,10,335,8],[340,14,335,12],[340,15,335,13,"_stillWaiting"],[340,28,335,26],[340,31,335,29],[340,35,335,33],[340,36,335,34,"_getPendingGestures"],[340,55,335,53],[340,56,335,54],[340,57,335,55],[341,10,336,8],[342,10,337,8],[342,14,337,12],[342,18,337,16],[342,19,337,17,"_stillWaiting"],[342,32,337,30],[342,33,337,31,"length"],[342,39,337,37],[342,41,337,39],[343,12,338,10],[344,12,339,10],[345,12,340,10],[345,17,340,15],[345,23,340,21,"gesture"],[345,30,340,28],[345,34,340,32],[345,38,340,36],[345,39,340,37,"_stillWaiting"],[345,52,340,50],[345,54,340,52],[346,14,341,12],[347,14,342,12],[347,18,342,16],[347,19,342,17,"gesture"],[347,26,342,24],[347,27,342,25,"isDiscrete"],[347,37,342,35],[347,41,342,39,"gesture"],[347,48,342,46],[347,49,342,47,"isGestureRunning"],[347,65,342,63],[347,67,342,65],[348,16,343,14],[348,20,343,18],[348,21,343,19,"hasGestureFailed"],[348,37,343,35],[348,40,343,38],[348,44,343,42],[349,16,344,14],[349,20,344,18],[349,21,344,19,"isGestureRunning"],[349,37,344,35],[349,40,344,38],[349,45,344,43],[350,16,345,14],[350,23,345,21],[350,28,345,26],[351,14,346,12],[352,12,347,10],[353,12,348,10],[354,12,349,10],[354,19,349,17],[354,24,349,22],[355,10,350,8],[356,8,351,6],[358,8,353,6],[359,8,354,6],[359,12,354,10],[359,13,354,11],[359,17,354,15],[359,18,354,16,"hasCustomActivationCriteria"],[359,45,354,43],[359,47,354,45],[360,10,355,8],[360,17,355,15],[360,21,355,19],[361,8,356,6],[362,8,357,6],[362,14,357,12,"deltaRotation"],[362,27,357,25],[362,30,357,28],[362,34,357,32],[362,35,357,33,"initialRotation"],[362,50,357,48],[362,54,357,52],[362,58,357,56],[362,61,357,59],[362,62,357,60],[362,65,357,63,"inputData"],[362,74,357,72],[362,75,357,73,"rotation"],[362,83,357,81],[362,86,357,84],[362,90,357,88],[362,91,357,89,"initialRotation"],[362,106,357,104],[363,8,358,6],[364,8,359,6],[364,14,359,12],[365,10,360,8,"success"],[365,17,360,15],[366,10,361,8,"failed"],[367,8,362,6],[367,9,362,7],[367,12,362,10],[367,16,362,14],[367,17,362,15,"isGestureEnabledForEvent"],[367,41,362,39],[367,42,362,40],[367,46,362,44],[367,47,362,45,"getConfig"],[367,56,362,54],[367,57,362,55],[367,58,362,56],[367,60,362,58,"recognizer"],[367,70,362,68],[367,72,362,70],[368,10,363,8],[368,13,363,11,"inputData"],[368,22,363,20],[369,10,364,8,"deltaRotation"],[370,8,365,6],[370,9,365,7],[370,10,365,8],[371,8,366,6],[371,12,366,10,"failed"],[371,18,366,16],[371,20,366,18],[372,10,367,8],[372,14,367,12],[372,15,367,13,"simulateCancelEvent"],[372,34,367,32],[372,35,367,33,"inputData"],[372,44,367,42],[372,45,367,43],[373,10,368,8],[373,14,368,12],[373,15,368,13,"hasGestureFailed"],[373,31,368,29],[373,34,368,32],[373,38,368,36],[374,8,369,6],[375,8,370,6],[375,15,370,13,"success"],[375,22,370,20],[376,6,371,4],[376,7,371,5],[377,6,372,4],[377,12,372,10,"params"],[377,18,372,16],[377,21,372,19],[377,25,372,23],[377,26,372,24,"getHammerConfig"],[377,41,372,39],[377,42,372,40],[377,43,372,41],[378,6,373,4],[379,6,374,4,"gesture"],[379,13,374,11],[379,14,374,12,"set"],[379,17,374,15],[379,18,374,16],[380,8,375,6],[380,11,375,9,"params"],[380,17,375,15],[381,8,376,6,"enable"],[382,6,377,4],[382,7,377,5],[382,8,377,6],[383,4,378,2],[383,5,378,3],[384,4,379,2,"simulateCancelEvent"],[384,23,379,21,"simulateCancelEvent"],[384,24,379,22,"_inputData"],[384,34,379,32],[384,36,379,34],[384,37,379,35],[386,4,381,2],[387,4,382,2,"ensureConfig"],[387,16,382,14,"ensureConfig"],[387,17,382,15,"config"],[387,23,382,21],[387,25,382,23],[388,6,383,4],[388,12,383,10,"props"],[388,17,383,15],[388,20,383,18],[389,8,384,6],[389,11,384,9,"config"],[390,6,385,4],[390,7,385,5],[392,6,387,4],[393,6,388,4],[393,10,388,8],[393,19,388,17],[393,23,388,21,"config"],[393,29,388,27],[393,31,388,29],[394,8,389,6,"props"],[394,13,389,11],[394,14,389,12,"minDist"],[394,21,389,19],[394,24,389,22,"config"],[394,30,389,28],[394,31,389,29,"minDist"],[394,38,389,36],[395,8,390,6,"props"],[395,13,390,11],[395,14,390,12,"minDistSq"],[395,23,390,21],[395,26,390,24,"props"],[395,31,390,29],[395,32,390,30,"minDist"],[395,39,390,37],[395,42,390,40,"props"],[395,47,390,45],[395,48,390,46,"minDist"],[395,55,390,53],[396,6,391,4],[397,6,392,4],[397,10,392,8],[397,23,392,21],[397,27,392,25,"config"],[397,33,392,31],[397,35,392,33],[398,8,393,6,"props"],[398,13,393,11],[398,14,393,12,"minVelocity"],[398,25,393,23],[398,28,393,26,"config"],[398,34,393,32],[398,35,393,33,"minVelocity"],[398,46,393,44],[399,8,394,6,"props"],[399,13,394,11],[399,14,394,12,"minVelocitySq"],[399,27,394,25],[399,30,394,28,"props"],[399,35,394,33],[399,36,394,34,"minVelocity"],[399,47,394,45],[399,50,394,48,"props"],[399,55,394,53],[399,56,394,54,"minVelocity"],[399,67,394,65],[400,6,395,4],[401,6,396,4],[401,10,396,8],[401,19,396,17],[401,23,396,21,"config"],[401,29,396,27],[401,31,396,29],[402,8,397,6,"props"],[402,13,397,11],[402,14,397,12,"maxDist"],[402,21,397,19],[402,24,397,22,"config"],[402,30,397,28],[402,31,397,29,"maxDist"],[402,38,397,36],[403,8,398,6,"props"],[403,13,398,11],[403,14,398,12,"maxDistSq"],[403,23,398,21],[403,26,398,24,"config"],[403,32,398,30],[403,33,398,31,"maxDist"],[403,40,398,38],[403,43,398,41,"config"],[403,49,398,47],[403,50,398,48,"maxDist"],[403,57,398,55],[404,6,399,4],[405,6,400,4],[405,10,400,8],[405,19,400,17],[405,23,400,21,"config"],[405,29,400,27],[405,31,400,29],[406,8,401,6,"props"],[406,13,401,11],[406,14,401,12,"waitFor"],[406,21,401,19],[406,24,401,22,"asArray"],[406,31,401,29],[406,32,401,30,"config"],[406,38,401,36],[406,39,401,37,"waitFor"],[406,46,401,44],[406,47,401,45],[406,48,401,46,"map"],[406,51,401,49],[406,52,401,50],[406,53,401,51],[407,10,402,8,"handlerTag"],[408,8,403,6],[408,9,403,7],[408,14,403,12,"NodeManager"],[408,25,403,23],[408,26,403,24,"getHandler"],[408,36,403,34],[408,37,403,35,"handlerTag"],[408,47,403,45],[408,48,403,46],[408,49,403,47],[408,50,403,48,"filter"],[408,56,403,54],[408,57,403,55,"v"],[408,58,403,56],[408,62,403,60,"v"],[408,63,403,61],[408,64,403,62],[409,6,404,4],[409,7,404,5],[409,13,404,11],[410,8,405,6,"props"],[410,13,405,11],[410,14,405,12,"waitFor"],[410,21,405,19],[410,24,405,22],[410,28,405,26],[411,6,406,4],[412,6,407,4],[412,10,407,8],[412,32,407,30],[412,36,407,34,"config"],[412,42,407,40],[412,44,407,42],[413,8,408,6],[413,14,408,12,"shouldUseTouchEvents"],[413,34,408,32],[413,37,408,35],[413,41,408,39],[413,42,408,40,"shouldUseTouchEvents"],[413,62,408,60],[413,63,408,61],[413,67,408,65],[413,68,408,66,"config"],[413,74,408,72],[413,75,408,73],[414,8,409,6,"props"],[414,13,409,11],[414,14,409,12,"simultaneousHandlers"],[414,34,409,32],[414,37,409,35,"asArray"],[414,44,409,42],[414,45,409,43,"config"],[414,51,409,49],[414,52,409,50,"simultaneousHandlers"],[414,72,409,70],[414,73,409,71],[414,74,409,72,"map"],[414,77,409,75],[414,78,409,76,"handler"],[414,85,409,83],[414,89,409,87],[415,10,410,8],[415,14,410,12],[415,21,410,19,"handler"],[415,28,410,26],[415,33,410,31],[415,41,410,39],[415,43,410,41],[416,12,411,10],[416,19,411,17,"NodeManager"],[416,30,411,28],[416,31,411,29,"getHandler"],[416,41,411,39],[416,42,411,40,"handler"],[416,49,411,47],[416,50,411,48],[417,10,412,8],[417,11,412,9],[417,17,412,15],[418,12,413,10],[418,19,413,17,"NodeManager"],[418,30,413,28],[418,31,413,29,"getHandler"],[418,41,413,39],[418,42,413,40,"handler"],[418,49,413,47],[418,50,413,48,"handlerTag"],[418,60,413,58],[418,61,413,59],[419,10,414,8],[420,8,415,6],[420,9,415,7],[420,10,415,8],[420,11,415,9,"filter"],[420,17,415,15],[420,18,415,16,"v"],[420,19,415,17],[420,23,415,21,"v"],[420,24,415,22],[420,25,415,23],[421,8,416,6],[421,12,416,10,"shouldUseTouchEvents"],[421,32,416,30],[421,37,416,35],[421,41,416,39],[421,42,416,40,"shouldUseTouchEvents"],[421,62,416,60],[421,63,416,61,"props"],[421,68,416,66],[421,69,416,67],[421,71,416,69],[422,10,417,8],[422,14,417,8,"ghQueueMicrotask"],[422,48,417,24],[422,50,417,25],[422,56,417,31],[423,12,418,10],[424,12,419,10],[425,12,420,10],[425,16,420,14],[425,17,420,15,"destroy"],[425,24,420,22],[425,25,420,23],[425,26,420,24],[426,12,421,10],[426,16,421,14],[426,17,421,15,"setView"],[426,24,421,22],[426,25,421,23],[426,29,421,27],[426,30,421,28,"ref"],[426,33,421,31],[426,35,421,33],[426,39,421,37],[426,40,421,38,"propsRef"],[426,48,421,46],[426,49,421,47],[427,10,422,8],[427,11,422,9],[427,12,422,10],[428,8,423,6],[429,6,424,4],[429,7,424,5],[429,13,424,11],[430,8,425,6,"props"],[430,13,425,11],[430,14,425,12,"simultaneousHandlers"],[430,34,425,32],[430,37,425,35],[430,41,425,39],[431,6,426,4],[432,6,427,4],[432,12,427,10,"configProps"],[432,23,427,21],[432,26,427,24],[432,27,427,25],[432,40,427,38],[432,42,427,40],[432,55,427,53],[432,57,427,55],[432,66,427,64],[432,68,427,66],[432,77,427,75],[432,79,427,77],[432,90,427,88],[432,92,427,90],[432,107,427,105],[432,109,427,107],[432,120,427,118],[432,122,427,120],[432,135,427,133],[432,137,427,135],[432,155,427,153],[432,157,427,155],[432,175,427,173],[432,177,427,175],[432,193,427,191],[432,195,427,193],[432,211,427,209],[432,213,427,211],[432,233,427,231],[432,235,427,233],[432,253,427,251],[432,255,427,253],[432,275,427,273],[432,277,427,275],[432,295,427,293],[432,296,427,294],[433,6,428,4,"configProps"],[433,17,428,15],[433,18,428,16,"forEach"],[433,25,428,23],[433,26,428,24,"prop"],[433,30,428,28],[433,34,428,32],[434,8,429,6],[434,12,429,10],[434,19,429,17,"props"],[434,24,429,22],[434,25,429,23,"prop"],[434,29,429,27],[434,30,429,28],[434,35,429,33],[434,46,429,44],[434,48,429,46],[435,10,430,8,"props"],[435,15,430,13],[435,16,430,14,"prop"],[435,20,430,18],[435,21,430,19],[435,24,430,22,"Number"],[435,30,430,28],[435,31,430,29,"NaN"],[435,34,430,32],[436,8,431,6],[437,6,432,4],[437,7,432,5],[437,8,432,6],[438,6,433,4],[438,13,433,11,"props"],[438,18,433,16],[438,19,433,17],[438,20,433,18],[439,4,434,2],[440,2,435,0],[442,2,437,0],[443,2,438,0],[444,2,439,0],[444,11,439,9,"invokeNullableMethod"],[444,31,439,29,"invokeNullableMethod"],[444,32,439,30,"method"],[444,38,439,36],[444,40,439,38,"event"],[444,45,439,43],[444,47,439,45],[445,4,440,2],[445,8,440,6,"method"],[445,14,440,12],[445,16,440,14],[446,6,441,4],[446,10,441,8],[446,17,441,15,"method"],[446,23,441,21],[446,28,441,26],[446,38,441,36],[446,40,441,38],[447,8,442,6,"method"],[447,14,442,12],[447,15,442,13,"event"],[447,20,442,18],[447,21,442,19],[448,6,443,4],[448,7,443,5],[448,13,443,11],[449,8,444,6],[450,8,445,6],[450,12,445,10],[450,26,445,24],[450,30,445,28,"method"],[450,36,445,34],[450,40,445,38],[450,47,445,45,"method"],[450,53,445,51],[450,54,445,52,"__getHandler"],[450,66,445,64],[450,71,445,69],[450,81,445,79],[450,83,445,81],[451,10,446,8],[451,16,446,14,"handler"],[451,23,446,21],[451,26,446,24,"method"],[451,32,446,30],[451,33,446,31,"__getHandler"],[451,45,446,43],[451,46,446,44],[451,47,446,45],[452,10,447,8,"invokeNullableMethod"],[452,30,447,28],[452,31,447,29,"handler"],[452,38,447,36],[452,40,447,38,"event"],[452,45,447,43],[452,46,447,44],[453,8,448,6],[453,9,448,7],[453,15,448,13],[454,10,449,8],[454,14,449,12],[454,28,449,26],[454,32,449,30,"method"],[454,38,449,36],[454,40,449,38],[455,12,450,10],[455,18,450,16],[456,14,451,12,"argMapping"],[457,12,452,10],[457,13,452,11],[457,16,452,14,"method"],[457,22,452,20],[457,23,452,21,"__nodeConfig"],[457,35,452,33],[458,12,453,10],[458,16,453,14,"Array"],[458,21,453,19],[458,22,453,20,"isArray"],[458,29,453,27],[458,30,453,28,"argMapping"],[458,40,453,38],[458,41,453,39],[458,43,453,41],[459,14,454,12],[459,19,454,17],[459,25,454,23],[459,26,454,24,"index"],[459,31,454,29],[459,33,454,31],[459,34,454,32,"key"],[459,37,454,35],[459,39,454,37,"value"],[459,44,454,42],[459,45,454,43],[459,46,454,44],[459,50,454,48,"argMapping"],[459,60,454,58],[459,61,454,59,"entries"],[459,68,454,66],[459,69,454,67],[459,70,454,68],[459,72,454,70],[460,16,455,14],[460,20,455,18,"key"],[460,23,455,21],[460,27,455,25,"event"],[460,32,455,30],[460,33,455,31,"nativeEvent"],[460,44,455,42],[460,46,455,44],[461,18,456,16],[462,18,457,16],[462,24,457,22,"nativeValue"],[462,35,457,33],[462,38,457,36,"event"],[462,43,457,41],[462,44,457,42,"nativeEvent"],[462,55,457,53],[462,56,457,54,"key"],[462,59,457,57],[462,60,457,58],[463,18,458,16],[463,22,458,20,"value"],[463,27,458,25],[463,31,458,29,"value"],[463,36,458,34],[463,37,458,35,"setValue"],[463,45,458,43],[463,47,458,45],[464,20,459,18],[465,20,460,18,"value"],[465,25,460,23],[465,26,460,24,"setValue"],[465,34,460,32],[465,35,460,33,"nativeValue"],[465,46,460,44],[465,47,460,45],[466,18,461,16],[466,19,461,17],[466,25,461,23],[467,20,462,18],[468,20,463,18,"method"],[468,26,463,24],[468,27,463,25,"__nodeConfig"],[468,39,463,37],[468,40,463,38,"argMapping"],[468,50,463,48],[468,51,463,49,"index"],[468,56,463,54],[468,57,463,55],[468,60,463,58],[468,61,463,59,"key"],[468,64,463,62],[468,66,463,64,"nativeValue"],[468,77,463,75],[468,78,463,76],[469,18,464,16],[470,16,465,14],[471,14,466,12],[472,12,467,10],[473,10,468,8],[474,8,469,6],[475,6,470,4],[476,4,471,2],[477,2,472,0],[478,2,473,0],[478,11,473,9,"asArray"],[478,18,473,16,"asArray"],[478,19,473,17,"value"],[478,24,473,22],[478,26,473,24],[479,4,474,2],[480,4,475,2],[480,11,475,9,"value"],[480,16,475,14],[480,20,475,18],[480,24,475,22],[480,27,475,25],[480,29,475,27],[480,32,475,30,"Array"],[480,37,475,35],[480,38,475,36,"isArray"],[480,45,475,43],[480,46,475,44,"value"],[480,51,475,49],[480,52,475,50],[480,55,475,53,"value"],[480,60,475,58],[480,63,475,61],[480,64,475,62,"value"],[480,69,475,67],[480,70,475,68],[481,2,476,0],[482,2,476,1],[482,6,476,1,"_default"],[482,14,476,1],[482,17,476,1,"exports"],[482,24,476,1],[482,25,476,1,"default"],[482,32,476,1],[482,35,477,15,"GestureHandler"],[482,49,477,29],[483,0,477,29],[483,3]],"functionMap":{"names":["<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACc;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;yBGE;SHK;wBIM;KJI;G1CE;CDC;AgDI;ChDiC;AiDC;CjDG"}},"type":"js/module"}]}