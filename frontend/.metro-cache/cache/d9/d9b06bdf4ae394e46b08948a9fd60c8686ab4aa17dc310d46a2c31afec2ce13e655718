{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":429},"end":{"line":11,"column":31,"index":460}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":496},"end":{"line":13,"column":34,"index":530}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"]}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":624},"end":{"line":15,"column":66,"index":690}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"]}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":691},"end":{"line":16,"column":66,"index":757}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"]}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":758},"end":{"line":17,"column":33,"index":791}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"]}},{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":792},"end":{"line":18,"column":63,"index":855}}],"key":"rKAWVuQOSSDHxC6IWcmkeWszaWg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _react = _interopRequireWildcard(require(_dependencyMap[1], \"react\"));\n  var React = _react;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"invariant\"));\n  var _Animated = _interopRequireDefault(require(_dependencyMap[3], \"react-native-web/dist/exports/Animated\"));\n  var _StyleSheet = _interopRequireDefault(require(_dependencyMap[4], \"react-native-web/dist/exports/StyleSheet\"));\n  var _View = _interopRequireDefault(require(_dependencyMap[5], \"react-native-web/dist/exports/View\"));\n  var _Keyboard = _interopRequireDefault(require(_dependencyMap[6], \"react-native-web/dist/exports/Keyboard\"));\n  var _StatusBar = _interopRequireDefault(require(_dependencyMap[7], \"react-native-web/dist/exports/StatusBar\"));\n  var _I18nManager = _interopRequireDefault(require(_dependencyMap[8], \"react-native-web/dist/exports/I18nManager\"));\n  var _PanGestureHandler = require(_dependencyMap[9], \"../handlers/PanGestureHandler\");\n  var _TapGestureHandler = require(_dependencyMap[10], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[11], \"../State\");\n  var _jsxRuntime = require(_dependencyMap[12], \"react/jsx-runtime\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    static defaultProps = {\n      drawerWidth: 200,\n      drawerPosition: 'left',\n      useNativeAnimations: true,\n      drawerType: 'front',\n      edgeWidth: 20,\n      minSwipeDistance: 3,\n      overlayColor: 'rgba(0, 0, 0, 0.7)',\n      drawerLockMode: 'unlocked',\n      enableTrackpadTwoFingerGesture: false\n    };\n    constructor(props) {\n      super(props);\n      const dragX = new _Animated.default.Value(0);\n      const touchX = new _Animated.default.Value(0);\n      const drawerTranslation = new _Animated.default.Value(0);\n      this.state = {\n        dragX,\n        touchX,\n        drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    accessibilityIsModalView = /*#__PURE__*/React.createRef();\n    pointerEventsView = /*#__PURE__*/React.createRef();\n    panGestureHandler = /*#__PURE__*/React.createRef();\n    drawerShown = false;\n    static positions = {\n      Left: 'left',\n      Right: 'right'\n    };\n    updateAnimatedEvent = (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = _Animated.default.multiply(new _Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n        touchX = _Animated.default.add(new _Animated.default.Value(containerWidth), _Animated.default.multiply(new _Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n      let translationX = dragX;\n      if (drawerType === 'front') {\n        const startPositionX = _Animated.default.add(touchX, _Animated.default.multiply(new _Animated.default.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n      this.openValue = _Animated.default.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          this.props.onDrawerSlide?.(position);\n        };\n      }\n      this.onGestureEvent = _Animated.default.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n    handleContainerLayout = ({\n      nativeEvent\n    }) => {\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n    };\n    openingHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          _Keyboard.default.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          _StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    onTapHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n    handleRelease = ({\n      nativeEvent\n    }) => {\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    updateShowing = showing => {\n      this.drawerShown = showing;\n      this.accessibilityIsModalView.current?.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this.pointerEventsView.current?.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      // @ts-ignore internal API, maybe could be fixed in handler types\n      this.panGestureHandler.current?.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    animateDrawer = (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n      if (this.props.hideStatusBar) {\n        _StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      _Animated.default.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed ?? undefined\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n          if (this.state.drawerState !== DRAGGING) {\n            // It's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            this.props.onDrawerOpen?.();\n          } else {\n            this.props.onDrawerClose?.();\n          }\n        }\n      });\n    };\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    openDrawer = (options = {}) => {\n      this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n      this.forceUpdate();\n    };\n    closeDrawer = (options = {}) => {\n      // TODO: decide if it should be null or undefined is the proper value\n      this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n      this.forceUpdate();\n    };\n    renderOverlay = () => {\n      /* Overlay styles */\n      (0, _invariant.default)(this.openValue, 'should be set');\n      let overlayOpacity;\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange,\n        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    renderDrawer = () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front';\n\n      // We rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n      const reverseContentDirection = _I18nManager.default.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      let containerStyles;\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      let drawerTranslateX = 0;\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Animated.default.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout,\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()]\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_View.default, {\n            style: dynamicDrawerStyles,\n            children: this.props.renderNavigationView(this.openValue)\n          })\n        })]\n      });\n    };\n    setPanGestureRef = ref => {\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      this.props.onGestureRef?.(ref);\n    };\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PanGestureHandler.PanGestureHandler\n      // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }\n  exports.default = DrawerLayout;\n  const styles = _StyleSheet.default.create({\n    drawerContainer: Object.assign({}, _StyleSheet.default.absoluteFillObject, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: Object.assign({}, _StyleSheet.default.absoluteFillObject, {\n      zIndex: 1002\n    }),\n    containerOnBack: Object.assign({}, _StyleSheet.default.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: Object.assign({}, _StyleSheet.default.absoluteFillObject, {\n      zIndex: 1000\n    })\n  });\n});","lineCount":548,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,6,0],[8,2,7,0],[9,2,8,0],[10,2,9,0],[11,2,9,0],[11,6,9,0,"_interopRequireDefault"],[11,28,9,0],[11,31,9,0,"require"],[11,38,9,0],[11,39,9,0,"_dependencyMap"],[11,53,9,0],[12,2,9,0,"Object"],[12,8,9,0],[12,9,9,0,"defineProperty"],[12,23,9,0],[12,24,9,0,"exports"],[12,31,9,0],[13,4,9,0,"value"],[13,9,9,0],[14,2,9,0],[15,2,9,0,"exports"],[15,9,9,0],[15,10,9,0,"default"],[15,17,9,0],[16,2,11,0],[16,6,11,0,"_react"],[16,12,11,0],[16,15,11,0,"_interopRequireWildcard"],[16,38,11,0],[16,39,11,0,"require"],[16,46,11,0],[16,47,11,0,"_dependencyMap"],[16,61,11,0],[17,2,11,31],[17,6,11,31,"React"],[17,11,11,31],[17,14,11,31,"_react"],[17,20,11,31],[18,2,13,0],[18,6,13,0,"_invariant"],[18,16,13,0],[18,19,13,0,"_interopRequireDefault"],[18,41,13,0],[18,42,13,0,"require"],[18,49,13,0],[18,50,13,0,"_dependencyMap"],[18,64,13,0],[19,2,13,34],[19,6,13,34,"_Animated"],[19,15,13,34],[19,18,13,34,"_interopRequireDefault"],[19,40,13,34],[19,41,13,34,"require"],[19,48,13,34],[19,49,13,34,"_dependencyMap"],[19,63,13,34],[20,2,13,34],[20,6,13,34,"_StyleSheet"],[20,17,13,34],[20,20,13,34,"_interopRequireDefault"],[20,42,13,34],[20,43,13,34,"require"],[20,50,13,34],[20,51,13,34,"_dependencyMap"],[20,65,13,34],[21,2,13,34],[21,6,13,34,"_View"],[21,11,13,34],[21,14,13,34,"_interopRequireDefault"],[21,36,13,34],[21,37,13,34,"require"],[21,44,13,34],[21,45,13,34,"_dependencyMap"],[21,59,13,34],[22,2,13,34],[22,6,13,34,"_Keyboard"],[22,15,13,34],[22,18,13,34,"_interopRequireDefault"],[22,40,13,34],[22,41,13,34,"require"],[22,48,13,34],[22,49,13,34,"_dependencyMap"],[22,63,13,34],[23,2,13,34],[23,6,13,34,"_StatusBar"],[23,16,13,34],[23,19,13,34,"_interopRequireDefault"],[23,41,13,34],[23,42,13,34,"require"],[23,49,13,34],[23,50,13,34,"_dependencyMap"],[23,64,13,34],[24,2,13,34],[24,6,13,34,"_I18nManager"],[24,18,13,34],[24,21,13,34,"_interopRequireDefault"],[24,43,13,34],[24,44,13,34,"require"],[24,51,13,34],[24,52,13,34,"_dependencyMap"],[24,66,13,34],[25,2,15,0],[25,6,15,0,"_PanGestureHandler"],[25,24,15,0],[25,27,15,0,"require"],[25,34,15,0],[25,35,15,0,"_dependencyMap"],[25,49,15,0],[26,2,16,0],[26,6,16,0,"_TapGestureHandler"],[26,24,16,0],[26,27,16,0,"require"],[26,34,16,0],[26,35,16,0,"_dependencyMap"],[26,49,16,0],[27,2,17,0],[27,6,17,0,"_State"],[27,12,17,0],[27,15,17,0,"require"],[27,22,17,0],[27,23,17,0,"_dependencyMap"],[27,37,17,0],[28,2,18,0],[28,6,18,0,"_jsxRuntime"],[28,17,18,0],[28,20,18,0,"require"],[28,27,18,0],[28,28,18,0,"_dependencyMap"],[28,42,18,0],[29,2,18,63],[29,11,18,63,"_interopRequireWildcard"],[29,35,18,63,"e"],[29,36,18,63],[29,38,18,63,"t"],[29,39,18,63],[29,68,18,63,"WeakMap"],[29,75,18,63],[29,81,18,63,"r"],[29,82,18,63],[29,89,18,63,"WeakMap"],[29,96,18,63],[29,100,18,63,"n"],[29,101,18,63],[29,108,18,63,"WeakMap"],[29,115,18,63],[29,127,18,63,"_interopRequireWildcard"],[29,150,18,63],[29,162,18,63,"_interopRequireWildcard"],[29,163,18,63,"e"],[29,164,18,63],[29,166,18,63,"t"],[29,167,18,63],[29,176,18,63,"t"],[29,177,18,63],[29,181,18,63,"e"],[29,182,18,63],[29,186,18,63,"e"],[29,187,18,63],[29,188,18,63,"__esModule"],[29,198,18,63],[29,207,18,63,"e"],[29,208,18,63],[29,214,18,63,"o"],[29,215,18,63],[29,217,18,63,"i"],[29,218,18,63],[29,220,18,63,"f"],[29,221,18,63],[29,226,18,63,"__proto__"],[29,235,18,63],[29,243,18,63,"default"],[29,250,18,63],[29,252,18,63,"e"],[29,253,18,63],[29,270,18,63,"e"],[29,271,18,63],[29,294,18,63,"e"],[29,295,18,63],[29,320,18,63,"e"],[29,321,18,63],[29,330,18,63,"f"],[29,331,18,63],[29,337,18,63,"o"],[29,338,18,63],[29,341,18,63,"t"],[29,342,18,63],[29,345,18,63,"n"],[29,346,18,63],[29,349,18,63,"r"],[29,350,18,63],[29,358,18,63,"o"],[29,359,18,63],[29,360,18,63,"has"],[29,363,18,63],[29,364,18,63,"e"],[29,365,18,63],[29,375,18,63,"o"],[29,376,18,63],[29,377,18,63,"get"],[29,380,18,63],[29,381,18,63,"e"],[29,382,18,63],[29,385,18,63,"o"],[29,386,18,63],[29,387,18,63,"set"],[29,390,18,63],[29,391,18,63,"e"],[29,392,18,63],[29,394,18,63,"f"],[29,395,18,63],[29,411,18,63,"t"],[29,412,18,63],[29,416,18,63,"e"],[29,417,18,63],[29,433,18,63,"t"],[29,434,18,63],[29,441,18,63,"hasOwnProperty"],[29,455,18,63],[29,456,18,63,"call"],[29,460,18,63],[29,461,18,63,"e"],[29,462,18,63],[29,464,18,63,"t"],[29,465,18,63],[29,472,18,63,"i"],[29,473,18,63],[29,477,18,63,"o"],[29,478,18,63],[29,481,18,63,"Object"],[29,487,18,63],[29,488,18,63,"defineProperty"],[29,502,18,63],[29,507,18,63,"Object"],[29,513,18,63],[29,514,18,63,"getOwnPropertyDescriptor"],[29,538,18,63],[29,539,18,63,"e"],[29,540,18,63],[29,542,18,63,"t"],[29,543,18,63],[29,550,18,63,"i"],[29,551,18,63],[29,552,18,63,"get"],[29,555,18,63],[29,559,18,63,"i"],[29,560,18,63],[29,561,18,63,"set"],[29,564,18,63],[29,568,18,63,"o"],[29,569,18,63],[29,570,18,63,"f"],[29,571,18,63],[29,573,18,63,"t"],[29,574,18,63],[29,576,18,63,"i"],[29,577,18,63],[29,581,18,63,"f"],[29,582,18,63],[29,583,18,63,"t"],[29,584,18,63],[29,588,18,63,"e"],[29,589,18,63],[29,590,18,63,"t"],[29,591,18,63],[29,602,18,63,"f"],[29,603,18,63],[29,608,18,63,"e"],[29,609,18,63],[29,611,18,63,"t"],[29,612,18,63],[30,2,19,0],[30,8,19,6,"DRAG_TOSS"],[30,17,19,15],[30,20,19,18],[30,24,19,22],[31,2,20,0],[31,8,20,6,"IDLE"],[31,12,20,10],[31,15,20,13],[31,21,20,19],[32,2,21,0],[32,8,21,6,"DRAGGING"],[32,16,21,14],[32,19,21,17],[32,29,21,27],[33,2,22,0],[33,8,22,6,"SETTLING"],[33,16,22,14],[33,19,22,17],[33,29,22,27],[35,2,24,0],[36,0,25,0],[37,0,26,0],[39,2,28,0],[40,0,29,0],[41,0,30,0],[43,2,32,0],[44,0,33,0],[45,0,34,0],[47,2,36,0],[48,0,37,0],[49,0,38,0],[51,2,40,0],[52,0,41,0],[53,0,42,0],[55,2,44,0],[56,2,45,0],[57,2,46,0],[59,2,48,0],[60,0,49,0],[61,0,50,0],[63,2,52,0],[64,0,53,0],[65,0,54,0],[67,2,56,0],[68,0,57,0],[69,0,58,0],[71,2,60,0],[72,0,61,0],[73,0,62,0],[74,2,63,15],[74,8,63,21,"DrawerLayout"],[74,20,63,33],[74,29,63,42,"Component"],[74,45,63,51],[74,46,63,52],[75,4,64,2],[75,11,64,9,"defaultProps"],[75,23,64,21],[75,26,64,24],[76,6,65,4,"drawerWidth"],[76,17,65,15],[76,19,65,17],[76,22,65,20],[77,6,66,4,"drawerPosition"],[77,20,66,18],[77,22,66,20],[77,28,66,26],[78,6,67,4,"useNativeAnimations"],[78,25,67,23],[78,27,67,25],[78,31,67,29],[79,6,68,4,"drawerType"],[79,16,68,14],[79,18,68,16],[79,25,68,23],[80,6,69,4,"edgeWidth"],[80,15,69,13],[80,17,69,15],[80,19,69,17],[81,6,70,4,"minSwipeDistance"],[81,22,70,20],[81,24,70,22],[81,25,70,23],[82,6,71,4,"overlayColor"],[82,18,71,16],[82,20,71,18],[82,40,71,38],[83,6,72,4,"drawerLockMode"],[83,20,72,18],[83,22,72,20],[83,32,72,30],[84,6,73,4,"enableTrackpadTwoFingerGesture"],[84,36,73,34],[84,38,73,36],[85,4,74,2],[85,5,74,3],[86,4,75,2,"constructor"],[86,15,75,13,"constructor"],[86,16,75,14,"props"],[86,21,75,19],[86,23,75,21],[87,6,76,4],[87,11,76,9],[87,12,76,10,"props"],[87,17,76,15],[87,18,76,16],[88,6,77,4],[88,12,77,10,"dragX"],[88,17,77,15],[88,20,77,18],[88,24,77,22,"Animated"],[88,41,77,30],[88,42,77,31,"Value"],[88,47,77,36],[88,48,77,37],[88,49,77,38],[88,50,77,39],[89,6,78,4],[89,12,78,10,"touchX"],[89,18,78,16],[89,21,78,19],[89,25,78,23,"Animated"],[89,42,78,31],[89,43,78,32,"Value"],[89,48,78,37],[89,49,78,38],[89,50,78,39],[89,51,78,40],[90,6,79,4],[90,12,79,10,"drawerTranslation"],[90,29,79,27],[90,32,79,30],[90,36,79,34,"Animated"],[90,53,79,42],[90,54,79,43,"Value"],[90,59,79,48],[90,60,79,49],[90,61,79,50],[90,62,79,51],[91,6,80,4],[91,10,80,8],[91,11,80,9,"state"],[91,16,80,14],[91,19,80,17],[92,8,81,6,"dragX"],[92,13,81,11],[93,8,82,6,"touchX"],[93,14,82,12],[94,8,83,6,"drawerTranslation"],[94,25,83,23],[95,8,84,6,"containerWidth"],[95,22,84,20],[95,24,84,22],[95,25,84,23],[96,8,85,6,"drawerState"],[96,19,85,17],[96,21,85,19,"IDLE"],[96,25,85,23],[97,8,86,6,"drawerOpened"],[97,20,86,18],[97,22,86,20],[98,6,87,4],[98,7,87,5],[99,6,88,4],[99,10,88,8],[99,11,88,9,"updateAnimatedEvent"],[99,30,88,28],[99,31,88,29,"props"],[99,36,88,34],[99,38,88,36],[99,42,88,40],[99,43,88,41,"state"],[99,48,88,46],[99,49,88,47],[100,4,89,2],[101,4,90,2,"shouldComponentUpdate"],[101,25,90,23,"shouldComponentUpdate"],[101,26,90,24,"props"],[101,31,90,29],[101,33,90,31,"state"],[101,38,90,36],[101,40,90,38],[102,6,91,4],[102,10,91,8],[102,14,91,12],[102,15,91,13,"props"],[102,20,91,18],[102,21,91,19,"drawerPosition"],[102,35,91,33],[102,40,91,38,"props"],[102,45,91,43],[102,46,91,44,"drawerPosition"],[102,60,91,58],[102,64,91,62],[102,68,91,66],[102,69,91,67,"props"],[102,74,91,72],[102,75,91,73,"drawerWidth"],[102,86,91,84],[102,91,91,89,"props"],[102,96,91,94],[102,97,91,95,"drawerWidth"],[102,108,91,106],[102,112,91,110],[102,116,91,114],[102,117,91,115,"props"],[102,122,91,120],[102,123,91,121,"drawerType"],[102,133,91,131],[102,138,91,136,"props"],[102,143,91,141],[102,144,91,142,"drawerType"],[102,154,91,152],[102,158,91,156],[102,162,91,160],[102,163,91,161,"state"],[102,168,91,166],[102,169,91,167,"containerWidth"],[102,183,91,181],[102,188,91,186,"state"],[102,193,91,191],[102,194,91,192,"containerWidth"],[102,208,91,206],[102,210,91,208],[103,8,92,6],[103,12,92,10],[103,13,92,11,"updateAnimatedEvent"],[103,32,92,30],[103,33,92,31,"props"],[103,38,92,36],[103,40,92,38,"state"],[103,45,92,43],[103,46,92,44],[104,6,93,4],[105,6,94,4],[105,13,94,11],[105,17,94,15],[106,4,95,2],[107,4,96,2,"accessibilityIsModalView"],[107,28,96,26],[107,31,96,29],[107,44,96,42,"React"],[107,49,96,47],[107,50,96,48,"createRef"],[107,59,96,57],[107,60,96,58],[107,61,96,59],[108,4,97,2,"pointerEventsView"],[108,21,97,19],[108,24,97,22],[108,37,97,35,"React"],[108,42,97,40],[108,43,97,41,"createRef"],[108,52,97,50],[108,53,97,51],[108,54,97,52],[109,4,98,2,"panGestureHandler"],[109,21,98,19],[109,24,98,22],[109,37,98,35,"React"],[109,42,98,40],[109,43,98,41,"createRef"],[109,52,98,50],[109,53,98,51],[109,54,98,52],[110,4,99,2,"drawerShown"],[110,15,99,13],[110,18,99,16],[110,23,99,21],[111,4,100,2],[111,11,100,9,"positions"],[111,20,100,18],[111,23,100,21],[112,6,101,4,"Left"],[112,10,101,8],[112,12,101,10],[112,18,101,16],[113,6,102,4,"Right"],[113,11,102,9],[113,13,102,11],[114,4,103,2],[114,5,103,3],[115,4,104,2,"updateAnimatedEvent"],[115,23,104,21],[115,26,104,24,"updateAnimatedEvent"],[115,27,104,25,"props"],[115,32,104,30],[115,34,104,32,"state"],[115,39,104,37],[115,44,104,42],[116,6,105,4],[117,6,106,4],[117,12,106,10],[118,8,107,6,"drawerPosition"],[118,22,107,20],[119,8,108,6,"drawerWidth"],[119,19,108,17],[120,8,109,6,"drawerType"],[121,6,110,4],[121,7,110,5],[121,10,110,8,"props"],[121,15,110,13],[122,6,111,4],[122,12,111,10],[123,8,112,6,"dragX"],[123,13,112,11],[123,15,112,13,"dragXValue"],[123,25,112,23],[124,8,113,6,"touchX"],[124,14,113,12],[124,16,113,14,"touchXValue"],[124,27,113,25],[125,8,114,6,"drawerTranslation"],[125,25,114,23],[126,8,115,6,"containerWidth"],[127,6,116,4],[127,7,116,5],[127,10,116,8,"state"],[127,15,116,13],[128,6,117,4],[128,10,117,8,"dragX"],[128,15,117,13],[128,18,117,16,"dragXValue"],[128,28,117,26],[129,6,118,4],[129,10,118,8,"touchX"],[129,16,118,14],[129,19,118,17,"touchXValue"],[129,30,118,28],[130,6,119,4],[130,10,119,8,"drawerPosition"],[130,24,119,22],[130,29,119,27],[130,35,119,33],[130,37,119,35],[131,8,120,6],[132,8,121,6],[133,8,122,6],[134,8,123,6],[135,8,124,6],[136,8,125,6],[137,8,126,6,"dragX"],[137,13,126,11],[137,16,126,14,"Animated"],[137,33,126,22],[137,34,126,23,"multiply"],[137,42,126,31],[137,43,126,32],[137,47,126,36,"Animated"],[137,64,126,44],[137,65,126,45,"Value"],[137,70,126,50],[137,71,126,51],[137,72,126,52],[137,73,126,53],[137,74,126,54],[137,76,126,56,"dragXValue"],[137,86,126,66],[137,87,126,67],[137,88,126,68],[137,89,126,69],[138,8,127,6,"touchX"],[138,14,127,12],[138,17,127,15,"Animated"],[138,34,127,23],[138,35,127,24,"add"],[138,38,127,27],[138,39,127,28],[138,43,127,32,"Animated"],[138,60,127,40],[138,61,127,41,"Value"],[138,66,127,46],[138,67,127,47,"containerWidth"],[138,81,127,61],[138,82,127,62],[138,84,127,64,"Animated"],[138,101,127,72],[138,102,127,73,"multiply"],[138,110,127,81],[138,111,127,82],[138,115,127,86,"Animated"],[138,132,127,94],[138,133,127,95,"Value"],[138,138,127,100],[138,139,127,101],[138,140,127,102],[138,141,127,103],[138,142,127,104],[138,144,127,106,"touchXValue"],[138,155,127,117],[138,156,127,118],[138,157,127,119],[138,158,127,120],[138,159,127,121],[139,8,128,6,"touchXValue"],[139,19,128,17],[139,20,128,18,"setValue"],[139,28,128,26],[139,29,128,27,"containerWidth"],[139,43,128,41],[139,44,128,42],[140,6,129,4],[140,7,129,5],[140,13,129,11],[141,8,130,6,"touchXValue"],[141,19,130,17],[141,20,130,18,"setValue"],[141,28,130,26],[141,29,130,27],[141,30,130,28],[141,31,130,29],[142,6,131,4],[144,6,133,4],[145,6,134,4],[146,6,135,4],[147,6,136,4],[148,6,137,4],[149,6,138,4],[150,6,139,4],[151,6,140,4],[152,6,141,4],[153,6,142,4],[154,6,143,4],[155,6,144,4],[156,6,145,4],[157,6,146,4],[158,6,147,4],[159,6,148,4],[160,6,149,4],[161,6,150,4],[162,6,151,4],[163,6,152,4],[164,6,153,4],[165,6,154,4],[166,6,155,4],[167,6,156,4],[168,6,157,4],[169,6,158,4],[169,10,158,8,"translationX"],[169,22,158,20],[169,25,158,23,"dragX"],[169,30,158,28],[170,6,159,4],[170,10,159,8,"drawerType"],[170,20,159,18],[170,25,159,23],[170,32,159,30],[170,34,159,32],[171,8,160,6],[171,14,160,12,"startPositionX"],[171,28,160,26],[171,31,160,29,"Animated"],[171,48,160,37],[171,49,160,38,"add"],[171,52,160,41],[171,53,160,42,"touchX"],[171,59,160,48],[171,61,160,50,"Animated"],[171,78,160,58],[171,79,160,59,"multiply"],[171,87,160,67],[171,88,160,68],[171,92,160,72,"Animated"],[171,109,160,80],[171,110,160,81,"Value"],[171,115,160,86],[171,116,160,87],[171,117,160,88],[171,118,160,89],[171,119,160,90],[171,121,160,92,"dragX"],[171,126,160,97],[171,127,160,98],[171,128,160,99],[172,8,161,6],[172,14,161,12,"dragOffsetFromOnStartPosition"],[172,43,161,41],[172,46,161,44,"startPositionX"],[172,60,161,58],[172,61,161,59,"interpolate"],[172,72,161,70],[172,73,161,71],[173,10,162,8,"inputRange"],[173,20,162,18],[173,22,162,20],[173,23,162,21,"drawerWidth"],[173,34,162,32],[173,37,162,35],[173,38,162,36],[173,40,162,38,"drawerWidth"],[173,51,162,49],[173,53,162,51,"drawerWidth"],[173,64,162,62],[173,67,162,65],[173,68,162,66],[173,69,162,67],[174,10,163,8,"outputRange"],[174,21,163,19],[174,23,163,21],[174,24,163,22],[174,25,163,23],[174,27,163,25],[174,28,163,26],[174,30,163,28],[174,31,163,29],[175,8,164,6],[175,9,164,7],[175,10,164,8],[176,8,165,6,"translationX"],[176,20,165,18],[176,23,165,21,"Animated"],[176,40,165,29],[176,41,165,30,"add"],[176,44,165,33],[176,45,165,34,"dragX"],[176,50,165,39],[176,52,165,41,"dragOffsetFromOnStartPosition"],[176,81,165,70],[176,82,165,71],[176,83,165,72],[176,84,165,73],[177,6,166,4],[178,6,167,4],[178,10,167,8],[178,11,167,9,"openValue"],[178,20,167,18],[178,23,167,21,"Animated"],[178,40,167,29],[178,41,167,30,"add"],[178,44,167,33],[178,45,167,34,"translationX"],[178,57,167,46],[178,59,167,48,"drawerTranslation"],[178,76,167,65],[178,77,167,66],[178,78,167,67,"interpolate"],[178,89,167,78],[178,90,167,79],[179,8,168,6,"inputRange"],[179,18,168,16],[179,20,168,18],[179,21,168,19],[179,22,168,20],[179,24,168,22,"drawerWidth"],[179,35,168,33],[179,36,168,34],[180,8,169,6,"outputRange"],[180,19,169,17],[180,21,169,19],[180,22,169,20],[180,23,169,21],[180,25,169,23],[180,26,169,24],[180,27,169,25],[181,8,170,6,"extrapolate"],[181,19,170,17],[181,21,170,19],[182,6,171,4],[182,7,171,5],[182,8,171,6],[183,6,172,4],[183,12,172,10,"gestureOptions"],[183,26,172,24],[183,29,172,27],[184,8,173,6,"useNativeDriver"],[184,23,173,21],[184,25,173,23,"props"],[184,30,173,28],[184,31,173,29,"useNativeAnimations"],[185,6,174,4],[185,7,174,5],[186,6,175,4],[186,10,175,8],[186,14,175,12],[186,15,175,13,"props"],[186,20,175,18],[186,21,175,19,"onDrawerSlide"],[186,34,175,32],[186,36,175,34],[187,8,176,6,"gestureOptions"],[187,22,176,20],[187,23,176,21,"listener"],[187,31,176,29],[187,34,176,32,"ev"],[187,36,176,34],[187,40,176,38],[188,10,177,8],[188,16,177,14,"translationX"],[188,28,177,26],[188,31,177,29,"Math"],[188,35,177,33],[188,36,177,34,"floor"],[188,41,177,39],[188,42,177,40,"Math"],[188,46,177,44],[188,47,177,45,"abs"],[188,50,177,48],[188,51,177,49,"ev"],[188,53,177,51],[188,54,177,52,"nativeEvent"],[188,65,177,63],[188,66,177,64,"translationX"],[188,78,177,76],[188,79,177,77],[188,80,177,78],[189,10,178,8],[189,16,178,14,"position"],[189,24,178,22],[189,27,178,25,"translationX"],[189,39,178,37],[189,42,178,40],[189,46,178,44],[189,47,178,45,"state"],[189,52,178,50],[189,53,178,51,"containerWidth"],[189,67,178,65],[190,10,179,8],[190,14,179,12],[190,15,179,13,"props"],[190,20,179,18],[190,21,179,19,"onDrawerSlide"],[190,34,179,32],[190,37,179,35,"position"],[190,45,179,43],[190,46,179,44],[191,8,180,6],[191,9,180,7],[192,6,181,4],[193,6,182,4],[193,10,182,8],[193,11,182,9,"onGestureEvent"],[193,25,182,23],[193,28,182,26,"Animated"],[193,45,182,34],[193,46,182,35,"event"],[193,51,182,40],[193,52,182,41],[193,53,182,42],[194,8,183,6,"nativeEvent"],[194,19,183,17],[194,21,183,19],[195,10,184,8,"translationX"],[195,22,184,20],[195,24,184,22,"dragXValue"],[195,34,184,32],[196,10,185,8,"x"],[196,11,185,9],[196,13,185,11,"touchXValue"],[197,8,186,6],[198,6,187,4],[198,7,187,5],[198,8,187,6],[198,10,187,8,"gestureOptions"],[198,24,187,22],[198,25,187,23],[199,4,188,2],[199,5,188,3],[200,4,189,2,"handleContainerLayout"],[200,25,189,23],[200,28,189,26,"handleContainerLayout"],[200,29,189,27],[201,6,190,4,"nativeEvent"],[202,4,191,2],[202,5,191,3],[202,10,191,8],[203,6,192,4],[203,10,192,8],[203,11,192,9,"setState"],[203,19,192,17],[203,20,192,18],[204,8,193,6,"containerWidth"],[204,22,193,20],[204,24,193,22,"nativeEvent"],[204,35,193,33],[204,36,193,34,"layout"],[204,42,193,40],[204,43,193,41,"width"],[205,6,194,4],[205,7,194,5],[205,8,194,6],[206,4,195,2],[206,5,195,3],[207,4,196,2,"emitStateChanged"],[207,20,196,18],[207,23,196,21,"emitStateChanged"],[207,24,196,22,"newState"],[207,32,196,30],[207,34,196,32,"drawerWillShow"],[207,48,196,46],[207,53,196,51],[208,6,197,4],[208,10,197,8],[208,11,197,9,"props"],[208,16,197,14],[208,17,197,15,"onDrawerStateChanged"],[208,37,197,35],[208,40,197,38,"newState"],[208,48,197,46],[208,50,197,48,"drawerWillShow"],[208,64,197,62],[208,65,197,63],[209,4,198,2],[209,5,198,3],[210,4,199,2,"openingHandlerStateChange"],[210,29,199,27],[210,32,199,30,"openingHandlerStateChange"],[210,33,199,31],[211,6,200,4,"nativeEvent"],[212,4,201,2],[212,5,201,3],[212,10,201,8],[213,6,202,4],[213,10,202,8,"nativeEvent"],[213,21,202,19],[213,22,202,20,"oldState"],[213,30,202,28],[213,35,202,33,"State"],[213,47,202,38],[213,48,202,39,"ACTIVE"],[213,54,202,45],[213,56,202,47],[214,8,203,6],[214,12,203,10],[214,13,203,11,"handleRelease"],[214,26,203,24],[214,27,203,25],[215,10,204,8,"nativeEvent"],[216,8,205,6],[216,9,205,7],[216,10,205,8],[217,6,206,4],[217,7,206,5],[217,13,206,11],[217,17,206,15,"nativeEvent"],[217,28,206,26],[217,29,206,27,"state"],[217,34,206,32],[217,39,206,37,"State"],[217,51,206,42],[217,52,206,43,"ACTIVE"],[217,58,206,49],[217,60,206,51],[218,8,207,6],[218,12,207,10],[218,13,207,11,"emitStateChanged"],[218,29,207,27],[218,30,207,28,"DRAGGING"],[218,38,207,36],[218,40,207,38],[218,45,207,43],[218,46,207,44],[219,8,208,6],[219,12,208,10],[219,13,208,11,"setState"],[219,21,208,19],[219,22,208,20],[220,10,209,8,"drawerState"],[220,21,209,19],[220,23,209,21,"DRAGGING"],[221,8,210,6],[221,9,210,7],[221,10,210,8],[222,8,211,6],[222,12,211,10],[222,16,211,14],[222,17,211,15,"props"],[222,22,211,20],[222,23,211,21,"keyboardDismissMode"],[222,42,211,40],[222,47,211,45],[222,56,211,54],[222,58,211,56],[223,10,212,8,"Keyboard"],[223,27,212,16],[223,28,212,17,"dismiss"],[223,35,212,24],[223,36,212,25],[223,37,212,26],[224,8,213,6],[225,8,214,6],[225,12,214,10],[225,16,214,14],[225,17,214,15,"props"],[225,22,214,20],[225,23,214,21,"hideStatusBar"],[225,36,214,34],[225,38,214,36],[226,10,215,8,"StatusBar"],[226,28,215,17],[226,29,215,18,"setHidden"],[226,38,215,27],[226,39,215,28],[226,43,215,32],[226,45,215,34],[226,49,215,38],[226,50,215,39,"props"],[226,55,215,44],[226,56,215,45,"statusBarAnimation"],[226,74,215,63],[226,78,215,67],[226,85,215,74],[226,86,215,75],[227,8,216,6],[228,6,217,4],[229,4,218,2],[229,5,218,3],[230,4,219,2,"onTapHandlerStateChange"],[230,27,219,25],[230,30,219,28,"onTapHandlerStateChange"],[230,31,219,29],[231,6,220,4,"nativeEvent"],[232,4,221,2],[232,5,221,3],[232,10,221,8],[233,6,222,4],[233,10,222,8],[233,14,222,12],[233,15,222,13,"drawerShown"],[233,26,222,24],[233,30,222,28,"nativeEvent"],[233,41,222,39],[233,42,222,40,"oldState"],[233,50,222,48],[233,55,222,53,"State"],[233,67,222,58],[233,68,222,59,"ACTIVE"],[233,74,222,65],[233,78,222,69],[233,82,222,73],[233,83,222,74,"props"],[233,88,222,79],[233,89,222,80,"drawerLockMode"],[233,103,222,94],[233,108,222,99],[233,121,222,112],[233,123,222,114],[234,8,223,6],[234,12,223,10],[234,13,223,11,"closeDrawer"],[234,24,223,22],[234,25,223,23],[234,26,223,24],[235,6,224,4],[236,4,225,2],[236,5,225,3],[237,4,226,2,"handleRelease"],[237,17,226,15],[237,20,226,18,"handleRelease"],[237,21,226,19],[238,6,227,4,"nativeEvent"],[239,4,228,2],[239,5,228,3],[239,10,228,8],[240,6,229,4],[240,12,229,10],[241,8,230,6,"drawerWidth"],[241,19,230,17],[242,8,231,6,"drawerPosition"],[242,22,231,20],[243,8,232,6,"drawerType"],[244,6,233,4],[244,7,233,5],[244,10,233,8],[244,14,233,12],[244,15,233,13,"props"],[244,20,233,18],[245,6,234,4],[245,12,234,10],[246,8,235,6,"containerWidth"],[247,6,236,4],[247,7,236,5],[247,10,236,8],[247,14,236,12],[247,15,236,13,"state"],[247,20,236,18],[248,6,237,4],[248,10,237,8],[249,8,238,6,"translationX"],[249,20,238,18],[249,22,238,20,"dragX"],[249,27,238,25],[250,8,239,6,"velocityX"],[250,17,239,15],[251,8,240,6,"x"],[251,9,240,7],[251,11,240,9,"touchX"],[252,6,241,4],[252,7,241,5],[252,10,241,8,"nativeEvent"],[252,21,241,19],[253,6,242,4],[253,10,242,8,"drawerPosition"],[253,24,242,22],[253,29,242,27],[253,35,242,33],[253,37,242,35],[254,8,243,6],[255,8,244,6],[256,8,245,6,"dragX"],[256,13,245,11],[256,16,245,14],[256,17,245,15,"dragX"],[256,22,245,20],[257,8,246,6,"touchX"],[257,14,246,12],[257,17,246,15,"containerWidth"],[257,31,246,29],[257,34,246,32,"touchX"],[257,40,246,38],[258,8,247,6,"velocityX"],[258,17,247,15],[258,20,247,18],[258,21,247,19,"velocityX"],[258,30,247,28],[259,6,248,4],[260,6,249,4],[260,12,249,10,"gestureStartX"],[260,25,249,23],[260,28,249,26,"touchX"],[260,34,249,32],[260,37,249,35,"dragX"],[260,42,249,40],[261,6,250,4],[261,10,250,8,"dragOffsetBasedOnStart"],[261,32,250,30],[261,35,250,33],[261,36,250,34],[262,6,251,4],[262,10,251,8,"drawerType"],[262,20,251,18],[262,25,251,23],[262,32,251,30],[262,34,251,32],[263,8,252,6,"dragOffsetBasedOnStart"],[263,30,252,28],[263,33,252,31,"gestureStartX"],[263,46,252,44],[263,49,252,47,"drawerWidth"],[263,60,252,58],[263,63,252,61,"gestureStartX"],[263,76,252,74],[263,79,252,77,"drawerWidth"],[263,90,252,88],[263,93,252,91],[263,94,252,92],[264,6,253,4],[265,6,254,4],[265,12,254,10,"startOffsetX"],[265,24,254,22],[265,27,254,25,"dragX"],[265,32,254,30],[265,35,254,33,"dragOffsetBasedOnStart"],[265,57,254,55],[265,61,254,59],[265,65,254,63],[265,66,254,64,"drawerShown"],[265,77,254,75],[265,80,254,78,"drawerWidth"],[265,91,254,89],[265,94,254,92],[265,95,254,93],[265,96,254,94],[266,6,255,4],[266,12,255,10,"projOffsetX"],[266,23,255,21],[266,26,255,24,"startOffsetX"],[266,38,255,36],[266,41,255,39,"DRAG_TOSS"],[266,50,255,48],[266,53,255,51,"velocityX"],[266,62,255,60],[267,6,256,4],[267,12,256,10,"shouldOpen"],[267,22,256,20],[267,25,256,23,"projOffsetX"],[267,36,256,34],[267,39,256,37,"drawerWidth"],[267,50,256,48],[267,53,256,51],[267,54,256,52],[268,6,257,4],[268,10,257,8,"shouldOpen"],[268,20,257,18],[268,22,257,20],[269,8,258,6],[269,12,258,10],[269,13,258,11,"animateDrawer"],[269,26,258,24],[269,27,258,25,"startOffsetX"],[269,39,258,37],[269,41,258,39,"drawerWidth"],[269,52,258,50],[269,54,258,52,"velocityX"],[269,63,258,61],[269,64,258,62],[270,6,259,4],[270,7,259,5],[270,13,259,11],[271,8,260,6],[271,12,260,10],[271,13,260,11,"animateDrawer"],[271,26,260,24],[271,27,260,25,"startOffsetX"],[271,39,260,37],[271,41,260,39],[271,42,260,40],[271,44,260,42,"velocityX"],[271,53,260,51],[271,54,260,52],[272,6,261,4],[273,4,262,2],[273,5,262,3],[274,4,263,2,"updateShowing"],[274,17,263,15],[274,20,263,18,"showing"],[274,27,263,25],[274,31,263,29],[275,6,264,4],[275,10,264,8],[275,11,264,9,"drawerShown"],[275,22,264,20],[275,25,264,23,"showing"],[275,32,264,30],[276,6,265,4],[276,10,265,8],[276,11,265,9,"accessibilityIsModalView"],[276,35,265,33],[276,36,265,34,"current"],[276,43,265,41],[276,45,265,43,"setNativeProps"],[276,59,265,57],[276,60,265,58],[277,8,266,6,"accessibilityViewIsModal"],[277,32,266,30],[277,34,266,32,"showing"],[278,6,267,4],[278,7,267,5],[278,8,267,6],[279,6,268,4],[279,10,268,8],[279,11,268,9,"pointerEventsView"],[279,28,268,26],[279,29,268,27,"current"],[279,36,268,34],[279,38,268,36,"setNativeProps"],[279,52,268,50],[279,53,268,51],[280,8,269,6,"pointerEvents"],[280,21,269,19],[280,23,269,21,"showing"],[280,30,269,28],[280,33,269,31],[280,39,269,37],[280,42,269,40],[281,6,270,4],[281,7,270,5],[281,8,270,6],[282,6,271,4],[282,12,271,10],[283,8,272,6,"drawerPosition"],[283,22,272,20],[284,8,273,6,"minSwipeDistance"],[284,24,273,22],[285,8,274,6,"edgeWidth"],[286,6,275,4],[286,7,275,5],[286,10,275,8],[286,14,275,12],[286,15,275,13,"props"],[286,20,275,18],[287,6,276,4],[287,12,276,10,"fromLeft"],[287,20,276,18],[287,23,276,21,"drawerPosition"],[287,37,276,35],[287,42,276,40],[287,48,276,46],[288,6,277,4],[289,6,278,4],[290,6,279,4],[291,6,280,4],[291,12,280,10,"gestureOrientation"],[291,30,280,28],[291,33,280,31],[291,34,280,32,"fromLeft"],[291,42,280,40],[291,45,280,43],[291,46,280,44],[291,49,280,47],[291,50,280,48],[291,51,280,49],[291,56,280,54],[291,60,280,58],[291,61,280,59,"drawerShown"],[291,72,280,70],[291,75,280,73],[291,76,280,74],[291,77,280,75],[291,80,280,78],[291,81,280,79],[291,82,280,80],[292,6,281,4],[293,6,282,4],[294,6,283,4],[295,6,284,4],[295,12,284,10,"hitSlop"],[295,19,284,17],[295,22,284,20,"fromLeft"],[295,30,284,28],[295,33,284,31],[296,8,285,6,"left"],[296,12,285,10],[296,14,285,12],[296,15,285,13],[297,8,286,6,"width"],[297,13,286,11],[297,15,286,13,"showing"],[297,22,286,20],[297,25,286,23,"undefined"],[297,34,286,32],[297,37,286,35,"edgeWidth"],[298,6,287,4],[298,7,287,5],[298,10,287,8],[299,8,288,6,"right"],[299,13,288,11],[299,15,288,13],[299,16,288,14],[300,8,289,6,"width"],[300,13,289,11],[300,15,289,13,"showing"],[300,22,289,20],[300,25,289,23,"undefined"],[300,34,289,32],[300,37,289,35,"edgeWidth"],[301,6,290,4],[301,7,290,5],[302,6,291,4],[303,6,292,4],[303,10,292,8],[303,11,292,9,"panGestureHandler"],[303,28,292,26],[303,29,292,27,"current"],[303,36,292,34],[303,38,292,36,"setNativeProps"],[303,52,292,50],[303,53,292,51],[304,8,293,6,"hitSlop"],[304,15,293,13],[305,8,294,6,"activeOffsetX"],[305,21,294,19],[305,23,294,21,"gestureOrientation"],[305,41,294,39],[305,44,294,42,"minSwipeDistance"],[306,6,295,4],[306,7,295,5],[306,8,295,6],[307,4,296,2],[307,5,296,3],[308,4,297,2,"animateDrawer"],[308,17,297,15],[308,20,297,18,"animateDrawer"],[308,21,297,19,"fromValue"],[308,30,297,28],[308,32,297,30,"toValue"],[308,39,297,37],[308,41,297,39,"velocity"],[308,49,297,47],[308,51,297,49,"speed"],[308,56,297,54],[308,61,297,59],[309,6,298,4],[309,10,298,8],[309,11,298,9,"state"],[309,16,298,14],[309,17,298,15,"dragX"],[309,22,298,20],[309,23,298,21,"setValue"],[309,31,298,29],[309,32,298,30],[309,33,298,31],[309,34,298,32],[310,6,299,4],[310,10,299,8],[310,11,299,9,"state"],[310,16,299,14],[310,17,299,15,"touchX"],[310,23,299,21],[310,24,299,22,"setValue"],[310,32,299,30],[310,33,299,31],[310,37,299,35],[310,38,299,36,"props"],[310,43,299,41],[310,44,299,42,"drawerPosition"],[310,58,299,56],[310,63,299,61],[310,69,299,67],[310,72,299,70],[310,73,299,71],[310,76,299,74],[310,80,299,78],[310,81,299,79,"state"],[310,86,299,84],[310,87,299,85,"containerWidth"],[310,101,299,99],[310,102,299,100],[311,6,300,4],[311,10,300,8,"fromValue"],[311,19,300,17],[311,23,300,21],[311,27,300,25],[311,29,300,27],[312,8,301,6],[312,12,301,10,"nextFramePosition"],[312,29,301,27],[312,32,301,30,"fromValue"],[312,41,301,39],[313,8,302,6],[313,12,302,10],[313,16,302,14],[313,17,302,15,"props"],[313,22,302,20],[313,23,302,21,"useNativeAnimations"],[313,42,302,40],[313,44,302,42],[314,10,303,8],[315,10,304,8],[316,10,305,8],[317,10,306,8],[318,10,307,8],[318,14,307,12,"fromValue"],[318,23,307,21],[318,26,307,24,"toValue"],[318,33,307,31],[318,37,307,35,"velocity"],[318,45,307,43],[318,48,307,46],[318,49,307,47],[318,51,307,49],[319,12,308,10,"nextFramePosition"],[319,29,308,27],[319,32,308,30,"Math"],[319,36,308,34],[319,37,308,35,"min"],[319,40,308,38],[319,41,308,39,"fromValue"],[319,50,308,48],[319,53,308,51,"velocity"],[319,61,308,59],[319,64,308,62],[319,68,308,66],[319,70,308,68,"toValue"],[319,77,308,75],[319,78,308,76],[320,10,309,8],[320,11,309,9],[320,17,309,15],[320,21,309,19,"fromValue"],[320,30,309,28],[320,33,309,31,"toValue"],[320,40,309,38],[320,44,309,42,"velocity"],[320,52,309,50],[320,55,309,53],[320,56,309,54],[320,58,309,56],[321,12,310,10,"nextFramePosition"],[321,29,310,27],[321,32,310,30,"Math"],[321,36,310,34],[321,37,310,35,"max"],[321,40,310,38],[321,41,310,39,"fromValue"],[321,50,310,48],[321,53,310,51,"velocity"],[321,61,310,59],[321,64,310,62],[321,68,310,66],[321,70,310,68,"toValue"],[321,77,310,75],[321,78,310,76],[322,10,311,8],[323,8,312,6],[324,8,313,6],[324,12,313,10],[324,13,313,11,"state"],[324,18,313,16],[324,19,313,17,"drawerTranslation"],[324,36,313,34],[324,37,313,35,"setValue"],[324,45,313,43],[324,46,313,44,"nextFramePosition"],[324,63,313,61],[324,64,313,62],[325,6,314,4],[326,6,315,4],[326,12,315,10,"willShow"],[326,20,315,18],[326,23,315,21,"toValue"],[326,30,315,28],[326,35,315,33],[326,36,315,34],[327,6,316,4],[327,10,316,8],[327,11,316,9,"updateShowing"],[327,24,316,22],[327,25,316,23,"willShow"],[327,33,316,31],[327,34,316,32],[328,6,317,4],[328,10,317,8],[328,11,317,9,"emitStateChanged"],[328,27,317,25],[328,28,317,26,"SETTLING"],[328,36,317,34],[328,38,317,36,"willShow"],[328,46,317,44],[328,47,317,45],[329,6,318,4],[329,10,318,8],[329,11,318,9,"setState"],[329,19,318,17],[329,20,318,18],[330,8,319,6,"drawerState"],[330,19,319,17],[330,21,319,19,"SETTLING"],[331,6,320,4],[331,7,320,5],[331,8,320,6],[332,6,321,4],[332,10,321,8],[332,14,321,12],[332,15,321,13,"props"],[332,20,321,18],[332,21,321,19,"hideStatusBar"],[332,34,321,32],[332,36,321,34],[333,8,322,6,"StatusBar"],[333,26,322,15],[333,27,322,16,"setHidden"],[333,36,322,25],[333,37,322,26,"willShow"],[333,45,322,34],[333,47,322,36],[333,51,322,40],[333,52,322,41,"props"],[333,57,322,46],[333,58,322,47,"statusBarAnimation"],[333,76,322,65],[333,80,322,69],[333,87,322,76],[333,88,322,77],[334,6,323,4],[335,6,324,4,"Animated"],[335,23,324,12],[335,24,324,13,"spring"],[335,30,324,19],[335,31,324,20],[335,35,324,24],[335,36,324,25,"state"],[335,41,324,30],[335,42,324,31,"drawerTranslation"],[335,59,324,48],[335,61,324,50],[336,8,325,6,"velocity"],[336,16,325,14],[337,8,326,6,"bounciness"],[337,18,326,16],[337,20,326,18],[337,21,326,19],[338,8,327,6,"toValue"],[338,15,327,13],[339,8,328,6,"useNativeDriver"],[339,23,328,21],[339,25,328,23],[339,29,328,27],[339,30,328,28,"props"],[339,35,328,33],[339,36,328,34,"useNativeAnimations"],[339,55,328,53],[340,8,329,6,"speed"],[340,13,329,11],[340,15,329,13,"speed"],[340,20,329,18],[340,24,329,22,"undefined"],[341,6,330,4],[341,7,330,5],[341,8,330,6],[341,9,330,7,"start"],[341,14,330,12],[341,15,330,13],[341,16,330,14],[342,8,331,6,"finished"],[343,6,332,4],[343,7,332,5],[343,12,332,10],[344,8,333,6],[344,12,333,10,"finished"],[344,20,333,18],[344,22,333,20],[345,10,334,8],[345,14,334,12],[345,15,334,13,"emitStateChanged"],[345,31,334,29],[345,32,334,30,"IDLE"],[345,36,334,34],[345,38,334,36,"willShow"],[345,46,334,44],[345,47,334,45],[346,10,335,8],[346,14,335,12],[346,15,335,13,"setState"],[346,23,335,21],[346,24,335,22],[347,12,336,10,"drawerOpened"],[347,24,336,22],[347,26,336,24,"willShow"],[348,10,337,8],[348,11,337,9],[348,12,337,10],[349,10,338,8],[349,14,338,12],[349,18,338,16],[349,19,338,17,"state"],[349,24,338,22],[349,25,338,23,"drawerState"],[349,36,338,34],[349,41,338,39,"DRAGGING"],[349,49,338,47],[349,51,338,49],[350,12,339,10],[351,12,340,10],[352,12,341,10],[352,16,341,14],[352,17,341,15,"setState"],[352,25,341,23],[352,26,341,24],[353,14,342,12,"drawerState"],[353,25,342,23],[353,27,342,25,"IDLE"],[354,12,343,10],[354,13,343,11],[354,14,343,12],[355,10,344,8],[356,10,345,8],[356,14,345,12,"willShow"],[356,22,345,20],[356,24,345,22],[357,12,346,10],[357,16,346,14],[357,17,346,15,"props"],[357,22,346,20],[357,23,346,21,"onDrawerOpen"],[357,35,346,33],[357,38,346,36],[357,39,346,37],[358,10,347,8],[358,11,347,9],[358,17,347,15],[359,12,348,10],[359,16,348,14],[359,17,348,15,"props"],[359,22,348,20],[359,23,348,21,"onDrawerClose"],[359,36,348,34],[359,39,348,37],[359,40,348,38],[360,10,349,8],[361,8,350,6],[362,6,351,4],[362,7,351,5],[362,8,351,6],[363,4,352,2],[363,5,352,3],[365,4,354,2],[366,4,355,2,"openDrawer"],[366,14,355,12],[366,17,355,15,"openDrawer"],[366,18,355,16,"options"],[366,25,355,23],[366,28,355,26],[366,29,355,27],[366,30,355,28],[366,35,355,33],[367,6,356,4],[367,10,356,8],[367,11,356,9,"animateDrawer"],[367,24,356,22],[368,6,357,4],[369,6,358,4,"undefined"],[369,15,358,13],[369,17,358,15],[369,21,358,19],[369,22,358,20,"props"],[369,27,358,25],[369,28,358,26,"drawerWidth"],[369,39,358,37],[369,41,358,39,"options"],[369,48,358,46],[369,49,358,47,"velocity"],[369,57,358,55],[369,60,358,58,"options"],[369,67,358,65],[369,68,358,66,"velocity"],[369,76,358,74],[369,79,358,77],[369,80,358,78],[369,82,358,80,"options"],[369,89,358,87],[369,90,358,88,"speed"],[369,95,358,93],[369,96,358,94],[371,6,360,4],[372,6,361,4],[373,6,362,4],[373,10,362,8],[373,11,362,9,"forceUpdate"],[373,22,362,20],[373,23,362,21],[373,24,362,22],[374,4,363,2],[374,5,363,3],[375,4,364,2,"closeDrawer"],[375,15,364,13],[375,18,364,16,"closeDrawer"],[375,19,364,17,"options"],[375,26,364,24],[375,29,364,27],[375,30,364,28],[375,31,364,29],[375,36,364,34],[376,6,365,4],[377,6,366,4],[377,10,366,8],[377,11,366,9,"animateDrawer"],[377,24,366,22],[377,25,366,23,"undefined"],[377,34,366,32],[377,36,366,34],[377,37,366,35],[377,39,366,37,"options"],[377,46,366,44],[377,47,366,45,"velocity"],[377,55,366,53],[377,58,366,56,"options"],[377,65,366,63],[377,66,366,64,"velocity"],[377,74,366,72],[377,77,366,75],[377,78,366,76],[377,80,366,78,"options"],[377,87,366,85],[377,88,366,86,"speed"],[377,93,366,91],[377,94,366,92],[379,6,368,4],[380,6,369,4],[381,6,370,4],[381,10,370,8],[381,11,370,9,"forceUpdate"],[381,22,370,20],[381,23,370,21],[381,24,370,22],[382,4,371,2],[382,5,371,3],[383,4,372,2,"renderOverlay"],[383,17,372,15],[383,20,372,18,"renderOverlay"],[383,21,372,18],[383,26,372,24],[384,6,373,4],[385,6,374,4],[385,10,374,4,"invariant"],[385,28,374,13],[385,30,374,14],[385,34,374,18],[385,35,374,19,"openValue"],[385,44,374,28],[385,46,374,30],[385,61,374,45],[385,62,374,46],[386,6,375,4],[386,10,375,8,"overlayOpacity"],[386,24,375,22],[387,6,376,4],[387,10,376,8],[387,14,376,12],[387,15,376,13,"state"],[387,20,376,18],[387,21,376,19,"drawerState"],[387,32,376,30],[387,37,376,35,"IDLE"],[387,41,376,39],[387,43,376,41],[388,8,377,6,"overlayOpacity"],[388,22,377,20],[388,25,377,23],[388,29,377,27],[388,30,377,28,"openValue"],[388,39,377,37],[389,6,378,4],[389,7,378,5],[389,13,378,11],[390,8,379,6,"overlayOpacity"],[390,22,379,20],[390,25,379,23],[390,29,379,27],[390,30,379,28,"state"],[390,35,379,33],[390,36,379,34,"drawerOpened"],[390,48,379,46],[390,51,379,49],[390,52,379,50],[390,55,379,53],[390,56,379,54],[391,6,380,4],[392,6,381,4],[392,12,381,10,"dynamicOverlayStyles"],[392,32,381,30],[392,35,381,33],[393,8,382,6,"opacity"],[393,15,382,13],[393,17,382,15,"overlayOpacity"],[393,31,382,29],[394,8,383,6,"backgroundColor"],[394,23,383,21],[394,25,383,23],[394,29,383,27],[394,30,383,28,"props"],[394,35,383,33],[394,36,383,34,"overlayColor"],[395,6,384,4],[395,7,384,5],[396,6,385,4],[396,13,385,11],[396,26,385,24],[396,30,385,24,"_jsx"],[396,45,385,28],[396,47,385,29,"TapGestureHandler"],[396,83,385,46],[396,85,385,48],[397,8,386,6,"onHandlerStateChange"],[397,28,386,26],[397,30,386,28],[397,34,386,32],[397,35,386,33,"onTapHandlerStateChange"],[397,58,386,56],[398,8,387,6,"children"],[398,16,387,14],[398,18,387,16],[398,31,387,29],[398,35,387,29,"_jsx"],[398,50,387,33],[398,52,387,34,"Animated"],[398,69,387,42],[398,70,387,43,"View"],[398,74,387,47],[398,76,387,49],[399,10,388,8,"pointerEvents"],[399,23,388,21],[399,25,388,23],[399,29,388,27],[399,30,388,28,"drawerShown"],[399,41,388,39],[399,44,388,42],[399,50,388,48],[399,53,388,51],[399,59,388,57],[400,10,389,8,"ref"],[400,13,389,11],[400,15,389,13],[400,19,389,17],[400,20,389,18,"pointerEventsView"],[400,37,389,35],[401,10,390,8,"style"],[401,15,390,13],[401,17,390,15],[401,18,390,16,"styles"],[401,24,390,22],[401,25,390,23,"overlay"],[401,32,390,30],[401,34,390,32,"dynamicOverlayStyles"],[401,54,390,52],[402,8,391,6],[402,9,391,7],[403,6,392,4],[403,7,392,5],[403,8,392,6],[404,4,393,2],[404,5,393,3],[405,4,394,2,"renderDrawer"],[405,16,394,14],[405,19,394,17,"renderDrawer"],[405,20,394,17],[405,25,394,23],[406,6,395,4],[406,12,395,10],[407,8,396,6,"drawerBackgroundColor"],[407,29,396,27],[408,8,397,6,"drawerWidth"],[408,19,397,17],[409,8,398,6,"drawerPosition"],[409,22,398,20],[410,8,399,6,"drawerType"],[410,18,399,16],[411,8,400,6,"drawerContainerStyle"],[411,28,400,26],[412,8,401,6,"contentContainerStyle"],[413,6,402,4],[413,7,402,5],[413,10,402,8],[413,14,402,12],[413,15,402,13,"props"],[413,20,402,18],[414,6,403,4],[414,12,403,10,"fromLeft"],[414,20,403,18],[414,23,403,21,"drawerPosition"],[414,37,403,35],[414,42,403,40],[414,48,403,46],[415,6,404,4],[415,12,404,10,"drawerSlide"],[415,23,404,21],[415,26,404,24,"drawerType"],[415,36,404,34],[415,41,404,39],[415,47,404,45],[416,6,405,4],[416,12,405,10,"containerSlide"],[416,26,405,24],[416,29,405,27,"drawerType"],[416,39,405,37],[416,44,405,42],[416,51,405,49],[418,6,407,4],[419,6,408,4],[420,6,409,4],[421,6,410,4],[422,6,411,4],[422,12,411,10,"reverseContentDirection"],[422,35,411,33],[422,38,411,36,"I18nManager"],[422,58,411,47],[422,59,411,48,"isRTL"],[422,64,411,53],[422,67,411,56,"fromLeft"],[422,75,411,64],[422,78,411,67],[422,79,411,68,"fromLeft"],[422,87,411,76],[423,6,412,4],[423,12,412,10,"dynamicDrawerStyles"],[423,31,412,29],[423,34,412,32],[424,8,413,6,"backgroundColor"],[424,23,413,21],[424,25,413,23,"drawerBackgroundColor"],[424,46,413,44],[425,8,414,6,"width"],[425,13,414,11],[425,15,414,13,"drawerWidth"],[426,6,415,4],[426,7,415,5],[427,6,416,4],[427,12,416,10,"openValue"],[427,21,416,19],[427,24,416,22],[427,28,416,26],[427,29,416,27,"openValue"],[427,38,416,36],[428,6,417,4],[428,10,417,4,"invariant"],[428,28,417,13],[428,30,417,14,"openValue"],[428,39,417,23],[428,41,417,25],[428,56,417,40],[428,57,417,41],[429,6,418,4],[429,10,418,8,"containerStyles"],[429,25,418,23],[430,6,419,4],[430,10,419,8,"containerSlide"],[430,24,419,22],[430,26,419,24],[431,8,420,6],[431,14,420,12,"containerTranslateX"],[431,33,420,31],[431,36,420,34,"openValue"],[431,45,420,43],[431,46,420,44,"interpolate"],[431,57,420,55],[431,58,420,56],[432,10,421,8,"inputRange"],[432,20,421,18],[432,22,421,20],[432,23,421,21],[432,24,421,22],[432,26,421,24],[432,27,421,25],[432,28,421,26],[433,10,422,8,"outputRange"],[433,21,422,19],[433,23,422,21,"fromLeft"],[433,31,422,29],[433,34,422,32],[433,35,422,33],[433,36,422,34],[433,38,422,36,"drawerWidth"],[433,49,422,47],[433,50,422,48],[433,53,422,51],[433,54,422,52],[433,55,422,53],[433,57,422,55],[433,58,422,56,"drawerWidth"],[433,69,422,67],[433,70,422,68],[434,10,423,8,"extrapolate"],[434,21,423,19],[434,23,423,21],[435,8,424,6],[435,9,424,7],[435,10,424,8],[436,8,425,6,"containerStyles"],[436,23,425,21],[436,26,425,24],[437,10,426,8,"transform"],[437,19,426,17],[437,21,426,19],[437,22,426,20],[438,12,427,10,"translateX"],[438,22,427,20],[438,24,427,22,"containerTranslateX"],[439,10,428,8],[439,11,428,9],[440,8,429,6],[440,9,429,7],[441,6,430,4],[442,6,431,4],[442,10,431,8,"drawerTranslateX"],[442,26,431,24],[442,29,431,27],[442,30,431,28],[443,6,432,4],[443,10,432,8,"drawerSlide"],[443,21,432,19],[443,23,432,21],[444,8,433,6],[444,14,433,12,"closedDrawerOffset"],[444,32,433,30],[444,35,433,33,"fromLeft"],[444,43,433,41],[444,46,433,44],[444,47,433,45,"drawerWidth"],[444,58,433,56],[444,61,433,59,"drawerWidth"],[444,72,433,70],[445,8,434,6],[445,12,434,10],[445,16,434,14],[445,17,434,15,"state"],[445,22,434,20],[445,23,434,21,"drawerState"],[445,34,434,32],[445,39,434,37,"IDLE"],[445,43,434,41],[445,45,434,43],[446,10,435,8,"drawerTranslateX"],[446,26,435,24],[446,29,435,27,"openValue"],[446,38,435,36],[446,39,435,37,"interpolate"],[446,50,435,48],[446,51,435,49],[447,12,436,10,"inputRange"],[447,22,436,20],[447,24,436,22],[447,25,436,23],[447,26,436,24],[447,28,436,26],[447,29,436,27],[447,30,436,28],[448,12,437,10,"outputRange"],[448,23,437,21],[448,25,437,23],[448,26,437,24,"closedDrawerOffset"],[448,44,437,42],[448,46,437,44],[448,47,437,45],[448,48,437,46],[449,12,438,10,"extrapolate"],[449,23,438,21],[449,25,438,23],[450,10,439,8],[450,11,439,9],[450,12,439,10],[451,8,440,6],[451,9,440,7],[451,15,440,13],[452,10,441,8,"drawerTranslateX"],[452,26,441,24],[452,29,441,27],[452,33,441,31],[452,34,441,32,"state"],[452,39,441,37],[452,40,441,38,"drawerOpened"],[452,52,441,50],[452,55,441,53],[452,56,441,54],[452,59,441,57,"closedDrawerOffset"],[452,77,441,75],[453,8,442,6],[454,6,443,4],[455,6,444,4],[455,12,444,10,"drawerStyles"],[455,24,444,22],[455,27,444,25],[456,8,445,6,"transform"],[456,17,445,15],[456,19,445,17],[456,20,445,18],[457,10,446,8,"translateX"],[457,20,446,18],[457,22,446,20,"drawerTranslateX"],[458,8,447,6],[458,9,447,7],[458,10,447,8],[459,8,448,6,"flexDirection"],[459,21,448,19],[459,23,448,21,"reverseContentDirection"],[459,46,448,44],[459,49,448,47],[459,62,448,60],[459,65,448,63],[460,6,449,4],[460,7,449,5],[461,6,450,4],[461,13,450,11],[461,26,450,24],[461,30,450,24,"_jsxs"],[461,46,450,29],[461,48,450,30,"Animated"],[461,65,450,38],[461,66,450,39,"View"],[461,70,450,43],[461,72,450,45],[462,8,451,6,"style"],[462,13,451,11],[462,15,451,13,"styles"],[462,21,451,19],[462,22,451,20,"main"],[462,26,451,24],[463,8,452,6,"onLayout"],[463,16,452,14],[463,18,452,16],[463,22,452,20],[463,23,452,21,"handleContainerLayout"],[463,44,452,42],[464,8,453,6,"children"],[464,16,453,14],[464,18,453,16],[464,19,453,17],[464,32,453,30],[464,36,453,30,"_jsxs"],[464,52,453,35],[464,54,453,36,"Animated"],[464,71,453,44],[464,72,453,45,"View"],[464,76,453,49],[464,78,453,51],[465,10,454,8,"style"],[465,15,454,13],[465,17,454,15],[465,18,454,16,"drawerType"],[465,28,454,26],[465,33,454,31],[465,40,454,38],[465,43,454,41,"styles"],[465,49,454,47],[465,50,454,48,"containerOnBack"],[465,65,454,63],[465,68,454,66,"styles"],[465,74,454,72],[465,75,454,73,"containerInFront"],[465,91,454,89],[465,93,454,91,"containerStyles"],[465,108,454,106],[465,110,454,108,"contentContainerStyle"],[465,131,454,129],[465,132,454,130],[466,10,455,8,"importantForAccessibility"],[466,35,455,33],[466,37,455,35],[466,41,455,39],[466,42,455,40,"drawerShown"],[466,53,455,51],[466,56,455,54],[466,77,455,75],[466,80,455,78],[466,85,455,83],[467,10,456,8,"children"],[467,18,456,16],[467,20,456,18],[467,21,456,19],[467,28,456,26],[467,32,456,30],[467,33,456,31,"props"],[467,38,456,36],[467,39,456,37,"children"],[467,47,456,45],[467,52,456,50],[467,62,456,60],[467,65,456,63],[467,69,456,67],[467,70,456,68,"props"],[467,75,456,73],[467,76,456,74,"children"],[467,84,456,82],[467,85,456,83],[467,89,456,87],[467,90,456,88,"openValue"],[467,99,456,97],[467,100,456,98],[467,103,456,101],[467,107,456,105],[467,108,456,106,"props"],[467,113,456,111],[467,114,456,112,"children"],[467,122,456,120],[467,124,456,122],[467,128,456,126],[467,129,456,127,"renderOverlay"],[467,142,456,140],[467,143,456,141],[467,144,456,142],[468,8,457,6],[468,9,457,7],[468,10,457,8],[468,12,457,10],[468,25,457,23],[468,29,457,23,"_jsx"],[468,44,457,27],[468,46,457,28,"Animated"],[468,63,457,36],[468,64,457,37,"View"],[468,68,457,41],[468,70,457,43],[469,10,458,8,"pointerEvents"],[469,23,458,21],[469,25,458,23],[469,35,458,33],[470,10,459,8,"ref"],[470,13,459,11],[470,15,459,13],[470,19,459,17],[470,20,459,18,"accessibilityIsModalView"],[470,44,459,42],[471,10,460,8,"accessibilityViewIsModal"],[471,34,460,32],[471,36,460,34],[471,40,460,38],[471,41,460,39,"drawerShown"],[471,52,460,50],[472,10,461,8,"style"],[472,15,461,13],[472,17,461,15],[472,18,461,16,"styles"],[472,24,461,22],[472,25,461,23,"drawerContainer"],[472,40,461,38],[472,42,461,40,"drawerStyles"],[472,54,461,52],[472,56,461,54,"drawerContainerStyle"],[472,76,461,74],[472,77,461,75],[473,10,462,8,"children"],[473,18,462,16],[473,20,462,18],[473,33,462,31],[473,37,462,31,"_jsx"],[473,52,462,35],[473,54,462,36,"View"],[473,67,462,40],[473,69,462,42],[474,12,463,10,"style"],[474,17,463,15],[474,19,463,17,"dynamicDrawerStyles"],[474,38,463,36],[475,12,464,10,"children"],[475,20,464,18],[475,22,464,20],[475,26,464,24],[475,27,464,25,"props"],[475,32,464,30],[475,33,464,31,"renderNavigationView"],[475,53,464,51],[475,54,464,52],[475,58,464,56],[475,59,464,57,"openValue"],[475,68,464,66],[476,10,465,8],[476,11,465,9],[477,8,466,6],[477,9,466,7],[477,10,466,8],[478,6,467,4],[478,7,467,5],[478,8,467,6],[479,4,468,2],[479,5,468,3],[480,4,469,2,"setPanGestureRef"],[480,20,469,18],[480,23,469,21,"ref"],[480,26,469,24],[480,30,469,28],[481,6,470,4],[482,6,471,4],[483,6,472,4],[483,10,472,8],[483,11,472,9,"panGestureHandler"],[483,28,472,26],[483,29,472,27,"current"],[483,36,472,34],[483,39,472,37,"ref"],[483,42,472,40],[484,6,473,4],[484,10,473,8],[484,11,473,9,"props"],[484,16,473,14],[484,17,473,15,"onGestureRef"],[484,29,473,27],[484,32,473,30,"ref"],[484,35,473,33],[484,36,473,34],[485,4,474,2],[485,5,474,3],[486,4,475,2,"render"],[486,10,475,8,"render"],[486,11,475,8],[486,13,475,11],[487,6,476,4],[487,12,476,10],[488,8,477,6,"drawerPosition"],[488,22,477,20],[489,8,478,6,"drawerLockMode"],[489,22,478,20],[490,8,479,6,"edgeWidth"],[490,17,479,15],[491,8,480,6,"minSwipeDistance"],[492,6,481,4],[492,7,481,5],[492,10,481,8],[492,14,481,12],[492,15,481,13,"props"],[492,20,481,18],[493,6,482,4],[493,12,482,10,"fromLeft"],[493,20,482,18],[493,23,482,21,"drawerPosition"],[493,37,482,35],[493,42,482,40],[493,48,482,46],[495,6,484,4],[496,6,485,4],[497,6,486,4],[498,6,487,4],[498,12,487,10,"gestureOrientation"],[498,30,487,28],[498,33,487,31],[498,34,487,32,"fromLeft"],[498,42,487,40],[498,45,487,43],[498,46,487,44],[498,49,487,47],[498,50,487,48],[498,51,487,49],[498,56,487,54],[498,60,487,58],[498,61,487,59,"drawerShown"],[498,72,487,70],[498,75,487,73],[498,76,487,74],[498,77,487,75],[498,80,487,78],[498,81,487,79],[498,82,487,80],[500,6,489,4],[501,6,490,4],[502,6,491,4],[503,6,492,4],[503,12,492,10,"hitSlop"],[503,19,492,17],[503,22,492,20,"fromLeft"],[503,30,492,28],[503,33,492,31],[504,8,493,6,"left"],[504,12,493,10],[504,14,493,12],[504,15,493,13],[505,8,494,6,"width"],[505,13,494,11],[505,15,494,13],[505,19,494,17],[505,20,494,18,"drawerShown"],[505,31,494,29],[505,34,494,32,"undefined"],[505,43,494,41],[505,46,494,44,"edgeWidth"],[506,6,495,4],[506,7,495,5],[506,10,495,8],[507,8,496,6,"right"],[507,13,496,11],[507,15,496,13],[507,16,496,14],[508,8,497,6,"width"],[508,13,497,11],[508,15,497,13],[508,19,497,17],[508,20,497,18,"drawerShown"],[508,31,497,29],[508,34,497,32,"undefined"],[508,43,497,41],[508,46,497,44,"edgeWidth"],[509,6,498,4],[509,7,498,5],[510,6,499,4],[510,13,499,11],[510,26,499,24],[510,30,499,24,"_jsx"],[510,45,499,28],[510,47,499,29,"PanGestureHandler"],[511,6,500,4],[512,6,500,4],[512,8,501,6],[513,8,502,6,"userSelect"],[513,18,502,16],[513,20,502,18],[513,24,502,22],[513,25,502,23,"props"],[513,30,502,28],[513,31,502,29,"userSelect"],[513,41,502,39],[514,8,503,6,"activeCursor"],[514,20,503,18],[514,22,503,20],[514,26,503,24],[514,27,503,25,"props"],[514,32,503,30],[514,33,503,31,"activeCursor"],[514,45,503,43],[515,8,504,6,"mouseButton"],[515,19,504,17],[515,21,504,19],[515,25,504,23],[515,26,504,24,"props"],[515,31,504,29],[515,32,504,30,"mouseButton"],[515,43,504,41],[516,8,505,6,"enableContextMenu"],[516,25,505,23],[516,27,505,25],[516,31,505,29],[516,32,505,30,"props"],[516,37,505,35],[516,38,505,36,"enableContextMenu"],[516,55,505,53],[517,8,506,6,"ref"],[517,11,506,9],[517,13,506,11],[517,17,506,15],[517,18,506,16,"setPanGestureRef"],[517,34,506,32],[518,8,507,6,"hitSlop"],[518,15,507,13],[518,17,507,15,"hitSlop"],[518,24,507,22],[519,8,508,6,"activeOffsetX"],[519,21,508,19],[519,23,508,21,"gestureOrientation"],[519,41,508,39],[519,44,508,42,"minSwipeDistance"],[519,60,508,58],[520,8,509,6,"failOffsetY"],[520,19,509,17],[520,21,509,19],[520,22,509,20],[520,23,509,21],[520,25,509,23],[520,27,509,25],[520,29,509,27],[520,30,509,28],[521,8,510,6,"onGestureEvent"],[521,22,510,20],[521,24,510,22],[521,28,510,26],[521,29,510,27,"onGestureEvent"],[521,43,510,41],[522,8,511,6,"onHandlerStateChange"],[522,28,511,26],[522,30,511,28],[522,34,511,32],[522,35,511,33,"openingHandlerStateChange"],[522,60,511,58],[523,8,512,6,"enableTrackpadTwoFingerGesture"],[523,38,512,36],[523,40,512,38],[523,44,512,42],[523,45,512,43,"props"],[523,50,512,48],[523,51,512,49,"enableTrackpadTwoFingerGesture"],[523,81,512,79],[524,8,513,6,"enabled"],[524,15,513,13],[524,17,513,15,"drawerLockMode"],[524,31,513,29],[524,36,513,34],[524,51,513,49],[524,55,513,53,"drawerLockMode"],[524,69,513,67],[524,74,513,72],[524,87,513,85],[525,8,514,6,"children"],[525,16,514,14],[525,18,514,16],[525,22,514,20],[525,23,514,21,"renderDrawer"],[525,35,514,33],[525,36,514,34],[526,6,515,4],[526,7,515,5],[526,8,515,6],[527,4,516,2],[528,2,517,0],[529,2,517,1,"exports"],[529,9,517,1],[529,10,517,1,"default"],[529,17,517,1],[529,20,517,1,"DrawerLayout"],[529,32,517,1],[530,2,518,0],[530,8,518,6,"styles"],[530,14,518,12],[530,17,518,15,"StyleSheet"],[530,36,518,25],[530,37,518,26,"create"],[530,43,518,32],[530,44,518,33],[531,4,519,2,"drawerContainer"],[531,19,519,17],[531,21,519,17,"Object"],[531,27,519,17],[531,28,519,17,"assign"],[531,34,519,17],[531,39,520,7,"StyleSheet"],[531,58,520,17],[531,59,520,18,"absoluteFillObject"],[531,77,520,36],[532,6,521,4,"zIndex"],[532,12,521,10],[532,14,521,12],[532,18,521,16],[533,6,522,4,"flexDirection"],[533,19,522,17],[533,21,522,19],[534,4,522,24],[534,6,523,3],[535,4,524,2,"containerInFront"],[535,20,524,18],[535,22,524,18,"Object"],[535,28,524,18],[535,29,524,18,"assign"],[535,35,524,18],[535,40,525,7,"StyleSheet"],[535,59,525,17],[535,60,525,18,"absoluteFillObject"],[535,78,525,36],[536,6,526,4,"zIndex"],[536,12,526,10],[536,14,526,12],[537,4,526,16],[537,6,527,3],[538,4,528,2,"containerOnBack"],[538,19,528,17],[538,21,528,17,"Object"],[538,27,528,17],[538,28,528,17,"assign"],[538,34,528,17],[538,39,529,7,"StyleSheet"],[538,58,529,17],[538,59,529,18,"absoluteFillObject"],[538,77,529,36],[538,78,530,3],[539,4,531,2,"main"],[539,8,531,6],[539,10,531,8],[540,6,532,4,"flex"],[540,10,532,8],[540,12,532,10],[540,13,532,11],[541,6,533,4,"zIndex"],[541,12,533,10],[541,14,533,12],[541,15,533,13],[542,6,534,4,"overflow"],[542,14,534,12],[542,16,534,14],[543,4,535,2],[543,5,535,3],[544,4,536,2,"overlay"],[544,11,536,9],[544,13,536,9,"Object"],[544,19,536,9],[544,20,536,9,"assign"],[544,26,536,9],[544,31,537,7,"StyleSheet"],[544,50,537,17],[544,51,537,18,"absoluteFillObject"],[544,69,537,36],[545,6,538,4,"zIndex"],[545,12,538,10],[545,14,538,12],[546,4,538,16],[547,2,540,0],[547,3,540,1],[547,4,540,2],[548,0,540,3],[548,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eC8D;ECY;GDc;EEC;GFK;wBGS;gCCwE;ODI;GHQ;0BKC;GLM;qBMC;GNE;8BOC;GPmB;4BQC;GRM;kBSC;GToC;kBUC;GViC;kBWC;aCiC;KDqB;GXC;eaG;GbQ;gBcC;GdO;kBeC;GfqB;iBgBC;GhB0E;qBiBC;GjBK;EkBC;GlByC;CDC"}},"type":"js/module"}]}