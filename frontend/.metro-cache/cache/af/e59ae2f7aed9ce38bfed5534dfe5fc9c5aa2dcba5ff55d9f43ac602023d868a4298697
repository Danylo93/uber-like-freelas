{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":54,"index":69}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"]}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":70},"end":{"line":4,"column":69,"index":139}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":140},"end":{"line":5,"column":36,"index":176}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":177},"end":{"line":6,"column":53,"index":230}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[1], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[2], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[3], \"react\");\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[4], \"../../../findNodeHandle\"));\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":42,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"useViewRefHandler"],[8,27,1,13],[8,30,1,13,"useViewRefHandler"],[8,47,1,13],[9,2,3,0],[9,6,3,0,"_utils"],[9,12,3,0],[9,15,3,0,"require"],[9,22,3,0],[9,23,3,0,"_dependencyMap"],[9,37,3,0],[10,2,4,0],[10,6,4,0,"_getShadowNodeFromRef"],[10,27,4,0],[10,30,4,0,"require"],[10,37,4,0],[10,38,4,0,"_dependencyMap"],[10,52,4,0],[11,2,5,0],[11,6,5,0,"_react"],[11,12,5,0],[11,15,5,0,"require"],[11,22,5,0],[11,23,5,0,"_dependencyMap"],[11,37,5,0],[12,2,6,0],[12,6,6,0,"_findNodeHandle"],[12,21,6,0],[12,24,6,0,"_interopRequireDefault"],[12,46,6,0],[12,47,6,0,"require"],[12,54,6,0],[12,55,6,0,"_dependencyMap"],[12,69,6,0],[13,2,7,0],[14,2,8,0],[15,2,9,0],[16,2,10,7],[16,11,10,16,"useViewRefHandler"],[16,28,10,33,"useViewRefHandler"],[16,29,10,34,"state"],[16,34,10,39],[16,36,10,41,"updateAttachedGestures"],[16,58,10,63],[16,60,10,65],[17,4,11,2],[17,10,11,8,"refHandler"],[17,20,11,18],[17,23,11,21],[17,27,11,21,"useCallback"],[17,45,11,32],[17,47,11,33,"ref"],[17,50,11,36],[17,54,11,40],[18,6,12,4],[18,10,12,8,"ref"],[18,13,12,11],[18,18,12,16],[18,22,12,20],[18,24,12,22],[19,8,13,6],[20,6,14,4],[21,6,15,4,"state"],[21,11,15,9],[21,12,15,10,"viewRef"],[21,19,15,17],[21,22,15,20,"ref"],[21,25,15,23],[23,6,17,4],[24,6,18,4],[24,10,18,8,"state"],[24,15,18,13],[24,16,18,14,"previousViewTag"],[24,31,18,29],[24,36,18,34],[24,37,18,35],[24,38,18,36],[24,40,18,38],[25,8,19,6,"state"],[25,13,19,11],[25,14,19,12,"previousViewTag"],[25,29,19,27],[25,32,19,30],[25,36,19,30,"findNodeHandle"],[25,59,19,44],[25,61,19,45,"state"],[25,66,19,50],[25,67,19,51,"viewRef"],[25,74,19,58],[25,75,19,59],[26,6,20,4],[28,6,22,4],[29,6,23,4],[30,6,24,4],[30,10,24,8],[30,11,24,9,"state"],[30,16,24,14],[30,17,24,15,"firstRender"],[30,28,24,26],[30,30,24,28],[31,8,25,6,"updateAttachedGestures"],[31,30,25,28],[31,31,25,29],[31,35,25,33],[31,36,25,34],[32,6,26,4],[33,6,27,4],[33,10,27,8,"__DEV__"],[33,17,27,15],[33,21,27,19],[33,25,27,19,"isFabric"],[33,40,27,27],[33,42,27,28],[33,43,27,29],[33,47,27,33,"global"],[33,53,27,39],[33,54,27,40,"isViewFlatteningDisabled"],[33,78,27,64],[33,80,27,66],[34,8,28,6],[34,14,28,12,"node"],[34,18,28,16],[34,21,28,19],[34,25,28,19,"getShadowNodeFromRef"],[34,67,28,39],[34,69,28,40,"ref"],[34,72,28,43],[34,73,28,44],[35,8,29,6],[35,12,29,10,"global"],[35,18,29,16],[35,19,29,17,"isViewFlatteningDisabled"],[35,43,29,41],[35,44,29,42,"node"],[35,48,29,46],[35,49,29,47],[35,54,29,52],[35,59,29,57],[35,61,29,59],[36,10,30,8,"console"],[36,17,30,15],[36,18,30,16,"error"],[36,23,30,21],[36,24,30,22],[36,28,30,22,"tagMessage"],[36,45,30,32],[36,47,30,33],[36,115,30,101],[36,118,30,104],[36,216,30,202],[36,217,30,203],[36,218,30,204],[37,8,31,6],[38,6,32,4],[39,4,33,2],[39,5,33,3],[39,7,33,5],[39,8,33,6,"state"],[39,13,33,11],[39,15,33,13,"updateAttachedGestures"],[39,37,33,35],[39,38,33,36],[39,39,33,37],[40,4,34,2],[40,11,34,9,"refHandler"],[40,21,34,19],[41,2,35,0],[42,0,35,1],[42,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCS;iCCC;GDsB;CDE"}},"type":"js/module"}]}