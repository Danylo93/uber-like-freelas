apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: marketplace-ingress
  namespace: marketplace
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  tls:
  - hosts:
    - api.marketplace.com
    secretName: marketplace-tls
  rules:
  - host: api.marketplace.com
    http:
      paths:
      # Auth Service
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 8000
      
      # User Service
      - path: /api/users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 8000
      
      # Service Management
      - path: /api/services
        pathType: Prefix
        backend:
          service:
            name: service-service
            port:
              number: 8000
      
      # Realtime WebSocket
      - path: /api/ws
        pathType: Prefix
        backend:
          service:
            name: realtime-service
            port:
              number: 8000
      
      # Notifications
      - path: /api/notifications
        pathType: Prefix
        backend:
          service:
            name: notification-service
            port:
              number: 8000
      
      # Payments
      - path: /api/payments
        pathType: Prefix
        backend:
          service:
            name: payment-service
            port:
              number: 8000
      
      # Chat
      - path: /api/chats
        pathType: Prefix
        backend:
          service:
            name: chat-service
            port:
              number: 8000
      
      # Analytics
      - path: /api/analytics
        pathType: Prefix
        backend:
          service:
            name: analytics-service
            port:
              number: 8000

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: marketplace
data:
  nginx.conf: |
    upstream auth_service {
        server auth-service:8000;
    }
    upstream user_service {
        server user-service:8000;
    }
    upstream service_service {
        server service-service:8000;
    }
    upstream realtime_service {
        server realtime-service:8000;
    }
    upstream notification_service {
        server notification-service:8000;
    }
    upstream payment_service {
        server payment-service:8000;
    }
    upstream chat_service {
        server chat-service:8000;
    }
    upstream analytics_service {
        server analytics-service:8000;
    }
    
    server {
        listen 80;
        server_name api.marketplace.com;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Auth service
        location /api/auth {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Other services follow similar pattern...
    }